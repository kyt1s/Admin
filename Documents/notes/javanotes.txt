Java
==============

JDK1.8 => java development kit   
jre1.8 => java runtime environment

java program run using two techniques
---------------------------------------
1 command prompt
2 Itegrated development Environment[IDE  => netbeans,eclipse]

Java
==============
Father java is James Goslling.
Java is OOP[Object Oriented programming] based programming language.
It is software development techniques.
OOP follow bottom up approach in designing.
Data security is very high in OOP.
Maximum feature of OOP is implemented using Java.
Extension of java program is .java.
Java is famous for embeded software.
Java is used to write logic part in webApp, MobileApp and DesktopApp
  WebAPP => Gmail,Facebook,Google,Banking App,whatsApp etc
  MobileAPP => WhatsAPP, YoutubeApp, Facebook,chrome etc
  DesktopApp => MSoffice,Mspaint,Mediaplayer etc
Java is famous because of WORA[Write once and run anywhere].
This is possible because of JVM[java virtual machine].
Java program is written inside class.

 program=> inputdata
-============================================================================
[8:42 pm, 12/08/2020] Akash Cse B: Path setting for java compiler
--------------------------------
It means javac command is accessable in every drive and folder.
javac is name of java compiler.
It is an application file[.exe].
It compile code to byte code(intermediate code).
Java virtual machine reads byte code.
"Write once and run anywhere" is possible due to JVM.

Path setting
--------------
  step1: open This PC and choose C drive
  step2: open program files from C drive
  step3: open java folder
  step4: open jdk folder
  step5: open bin folder
  step6: copy the path of bin folder[ctrl+C]
  step7: Right click on This PC and choose properties
  step8: Click on Advanced system setting
  step9: choose Environment variable in system properties
  step10: In system variable, click on new button.
        variable name: path
        variable value: C:\Program Files\Java\jdk1.8.0_25\bin; c:\windows;
  step11: click ok in each window.

DOS[Disk Operating System] Commands
------------------------------------
c:\>  =>command prompt

cls  => clear the screen of command prompt
dir  => list all directories and files of working directory
dir/p => list all directories and files pagewise
cd..  => goto previous directory
cd    => change directory[imediate directory]
cd\   => go to root directory
md    => make a new directory   [c:\>md jprog]
rd    => remove directory[c:\>rd jprog] 
edit => file edit
set path=> it is used to set path for directories and files[Temporary mode]
del  => delete file from directory[del prog.txt]
dir p* => List all files and directories whose name is start with p.
exit => exit from cmd
==================================================================================================================
changing of colour forground and background with font.
Step 1. First of all, open the Start menu and then type in CMD. Open CMD from the list.

Change Command Prompt Color In Windows 10
Step 2. Now on the Command Prompt window, type in “color/?” (Without quotation marks”

Change Command Prompt Color In Windows 10
Step 3. Now the Windows Command Prompt will show you the color attributes.

Change Command Prompt Color In Windows 10
Step 4. The color attributes are specified by two hex digits – The first one is for background, the second is for the foreground.
 For example, you can type in Color 16. It will change the background color to Blue and text color to Yellow.

Change Command Prompt Color In Windows 10
That’s it, you are done! You can try various combinations to pick the best one for you.
=======================================================================================================================================================
JavaProgramming
--------------------
OOP based programming language.
Java needs compilation and interpretation both.
javac command is used for compilation.
java command is used for interpretation.

Feature of OOP
-------------------
1. class and object
2. Data abstraction
3. Data encapsulation
4. Inheritance
5. Polymorphism
6. Message passing.

Java is 90% OOP.
class and structure is same. It is used for making userdefined data type.
struct student
{
  int roll;
  char name[20];
};


class Student
{
   int roll;      //data member
   char name[];
   void show()    //method or function
   {

   }
}

Student ob=new Student();  //ob is object
Class
---------------
Class is used for making userdefined data type.
Class name always start with Capital letter. 
Class name in title case.
 example
 Student
 StudentDetail
 EmployeeDept
 1Data   //wrong class name 
 Stud Fine  //wrong class name due to space

Class name should be single word.
Special symbol is not allowed in class name except underscore.
 Stud_Detail
 Stud@Detail   //wrong class name

Class contains variable and method.
Variable is used for storage of data.
Method is used for operation or action work.

 class Student
  {
      int roll;
      char name[];
      void input()
      {

      }
      void display()
      {

      }
  }

class ATMCustomer
{
   String bank;
   long int acno;
   long int atmno;
   int boothno;
   String location;
    void withdrawl()
    {}
    void pinChange()
    {
    }
    void balanceEnquiry()
    {
    }
    void fundTransfer()
    {
   }
}
class is blue print of object.
Example
----------
Student => roll,name,branch, marks,mobileno
object =>  Akas,Dev, Sagar 
Bird  => fly,lay egg,beak
object=> parrot, Eagle,Peagon

Object
========
Object is runtime entity.
It occupies memory space.
new keyword is used to allocate space for object.
class Student
{
   int roll;
   String name;
}

Student s1=new Student();   //s1 is an object.

Structure of java program
===========================
java program is written inside class.
class is keyword.
class Student
{
   int roll=10;             //list of variable declaration
   String name="Ramesh";
   char sec='A';
   public static void main(String args[])   //main() method
   {

   }   

}

class Demo
{
   int roll=10;
   static int r=100;
}

--------------------------------
Output statement in java
-----------------------------
This statement is used to print variable and value.
There are three methods to print data in java.
 1. print()
 2. println()
 3. printf()
All above methods are part PrintStream class.
print()
----------
It is used to print data on screen.
 syntax
   System.out.print();

   System.out.print("Hello");   //Hello
println()
----------
 It is used to print data with new line.
  System.out.println("Hello");   //Hello then newline
printf()
-----------
 It is used to print data using format string(%d,%s,%c,%f).
  System.out.printf("Hello");  //Hello
  System.out.printf("%d",10);  //10

  int n=10;
  System.out.print("n="+n);  //n=10
  System.out.println("n="+n); //n=10 with newline
  System.out.printf("n=%d",n); //n=10

program to print name and branch using java
----------------------------------------------
class MyDetail
{
    public static void main(String args[])
    {
       System.out.println("Name=Ramesh");
       System.out.println("Branch=CSE");
    }
}
save: MyDetail.java
compile: javac MyDetail.java
run: java MyDetail

Step to create program
-------------------------
1. go to your working folder/directory
2. open cmd
3. in cmd notepad Prog.java
4. write code in java file
5. save file(ctrl+s)
6. compile in cmd
     javac Prog.java
7. run in cmd
     java Prog


class MyClass
{
   public static void main(String args[])   //main() method
   {
      Demo ob=new Demo();
       ob.roll=>10
      Demo.r=> 100
   }   

}
=====================================================================================================
JavaHomework[17Aug2020]
------------------------------
Q1 Program to print personal details[Personal.java]
   Name:Ram
   Branch: CSE
   Section:A
Q2 Program to print subject details of last semester[FirstSem.java]
Q3 Program to print favorite color and food [MyFavorite.java]
Q4 Program to print name of five friends [MyFriends.java]
Q5 Program to print Area of rectangle[RectArea.java]
  class RectArea
   {
      public static void main(String args[])
      {
         int len=10,bredth=20;
         System.out.println("Area ="+ len*bredth);
      }
   }   
  save with RectArea.java
  compile: javac RectArea.java
   Run : java RectArea
Q6 Program to print perimeter of rectangle. [RectPeri.java]
Q7 Program to print area of circle [CircleArea.java]
  class CircleArea
   {
      public static void main(String args[])
      {
         float r=5.0f,pi=3.142f;
         System.out.println("Area of circle ="+ pi*r*r);
      }
   }   
 Q8 Program to print perimeter of circle [CirclePeri.java]
===============================================================================================
[8:24 pm, 17/08/2020] Akash Cse B: Example to print variable with value using print(), println() and printf() method.
---------------------------------------------------------------------------------
class PrintEx
{
   public static void main(String args[])
   {
      int n=10;
      System.out.print("n="+n);    //n=10 and cursor in same line
      System.out.println("n="+n);   //n=10 then new line
      System.out.printf("n=%d",n);  //n=10 and cursor in same line
   }
}
 
save with PrintEx.java
compile javac PrintEx.java
run java PrintEx

Data type in Java
========================
Data type tells to the compiler about the types of a variable.
Memory allocation depends upon the data type.
There are two types of data type
 1. primitive data type
 2. Reference data type
Primitive data type
-------------------
A primitive data type is also called builtin data type.
primtitive data type
----------------------
 1 Integer 
     -byte
     -short
     -int
     -long
2 Float
    -float
    -double
3 character
    -char
4 Boolean [keep true/false]
    -boolean
Integer data type
--------------------
It holds integer value in variable with different range.
[1,-9,0 ,2,5,100]=> integer data
Smallest data type in integer is byte and biggest is long.
long mobile=9437920600l;

Datatype           Range              Width            Example
----------------------------------------------------------------
byte		-128 to 127         8bits		byte n=10;
short          -32768 to 32767      16bits              short n;
int       -2147483648 to 2147483647 32bits		int n;
long   -9223372036854775808 to
            9223372036854775807     64bits              long n;
Floating point
-------------------
It is used for storing floating point number.
Datatype         Range                Width             Example
------------------------------------------------------------------------
float          1.4E-045 to 3.4 E 38   32bits           float marks;
double         4.9E-324 to 1.8 E 308  64bits           double n;

Character
--------------
It is used to hold single character in variable.
Character is denoted by single quote('').
Data type          Range               Width               Example
----------------------------------------------------------------------------
char            0 to 65535            16bits            char sec='A';

Boolean data type
----------------------
It is used to store boolean value in variable.
We keep comparative value in boolean.
it takes 1byte memory space.
boolean res=10>5;
System.out.println(res);    //false

program to print all data value using variable.
----------------------------------------------
class PrintData
{
   public static void main(String []args)
   {
      short roll=11;
      int room =4206;
      String name="Ramesh";
      long mobile=9876543210l;
      float height=134.5f;
      char sec='A';
       System.out.println("Roll="+roll);        
   }

}

save PrintData.java  
compile javac PrintData.java
Run: java PrintData

command line argument
=============================
java can accept value in command line.
Value is stored in args[] array.
Value is converted into string object.

c:\>    //command prompt
c:\> javac Demo.java      //compilation of Demo.java file
c:\> java Demo        //Run Byte code
c:\>java Demo Hello 10 2.5     //Hello 10 2.5 is command line arguement.
 it is stored in args[] array.
 args[0]=>Hello
 args[1]=>10
 args[2]=>2.5
You can pass unlimited command line arguments.

class MyProg
{
   public static void main(String args[])
   {
        System.out.println("Welcome "+args[0]);
   }

}

save with MyProg.java
compile: javac MyProg.java
run: java MyProg Rahul

program to accept name and roll from commandline argument
-------------------------------------------------------------
class MyDetails
{
   public static void main(String args[])
   {
        System.out.println("My name is "+args[0]);
        System.out.println("My roll is "+args[1]);
   }

}

save with MyDetails.java
compile: javac MyDetails.java
run: java MyDetails Rahul 10

System.out.println((int)('A'));
[10:46 pm, 17/08/2020] Bhasi (Karosine Engine)🐃🐃🐃🐃: Homework[17Aug2020]
=========================
Q1. program to print your biodata using java.[Biodata.java]
Q2. program to find simple interest and amount[Interest.java]
Q3. program to find area and perimeter of triangle[Triangle.java]
Q4. program to print name,mobile,email and address using variable[MyDetails.java]
Q5. program to accept two integer from command line and print in separate line.[TwoInt.java]
Q6. program to accept name and email using command line and print in separate line.[NameE.java]
Q7. program to accept name,roll and marks using command line and print.[EDetail.java]
Q8. program to accept subject of 1st sem using command line and print with serial number.[FirstSem.java]
==============================================================================================================
class
---------------
class is keyword.
It is used to make user defined data type.
It is combination of variable or object ,method/function.
class keyword is used in declaration.
syntax
----------
class MyClass
{
    variable;
    variable;
    method()
    {

    }
    variable;
   method()
   {

   }
}
variable is used to store data. variable is created using premitive data type or userdefined data type.
Variable is name of the location where data is stored.
variable name must be single word.
There are two types of variable is used inside class.
 1. Instance variable
 2. Static variable/class variable

  class MyClass
  {
     int num;         //instance variable or non static variable
     static int n;    //static variable or class variable
  }
Instance variable
-----------------
Instance variable is also called non-static variable.
It is used to store data.
It is accessed using object of class.
 class Data
  {
     int n1=10;
     float n2=10.5f;
  }
  class Myprog
  {
      public static void main(String args[])
      {
           Data ob=new Data();
          System.out.println("n1="+ob.n1);
          System.out.printf("n2=%f",ob.n2);
      }
  }
 
save with Myprog.java
compile javac Myprog.java
        Data.class
        Myprog.class
Run java Myprog 

  Data ob;   //reference of Data
  Data d =new Data();  //d is an object of Data
  new Data();       //ananoumous object

  classname objectname=new classname();
  classname=>userdefined data type
  new => operator
  classname() => constructor [special method to allocate memory space to an object]


  class MyData
  {
     int n1=10;
     float n2=10.5f;
      public static void main(String args[])
      {
           MyData ob=new MyData();
          System.out.println("n1="+ob.n1);
          System.out.printf("n2=%f",ob.n2);
      }
  }
save with MyData.java
compile javac MyData.java
run java MyData

program to initilize instance variable using static method main()
-----------------------------------------------------------------
  class Student
  {
     int roll;
     String name;
      public static void main(String args[])
      {
           Student s1=new Student();
           s1.roll=10;
           s1.name="Sagar";
           Student s2=new Student();
           s2.roll=11;
           s2.name="Dev";
          System.out.println("Roll="+s1.roll);
          System.out.printf("Name=%s",s1.name);
          System.out.println("Roll="+s2.roll);
          System.out.printf("Name=%s",s2.name);

      }
  }
save with Student.java
compile javac Student.java
Run java Student

static method is accessed instance variable using object.
Different object can store different value. 

program to find sum of two instance variable using main() method.
------------------------------------------------------------------
  class TwoSum
  {
     int n1,n2;
      public static void main(String args[])
      {
           TwoSum ob=new TwoSum();
          ob.n1=10;
          ob.n2=50;
          System.out.println("Sum="+(ob.n1+ob.n2));
      }
  }
save with TwoSum.java
compile javac TwoSum.java
Run java TwoSum

    System.out.println(ob.n1+ob.n2);   //60
    System.out.println(ob.n1+ob.n2+"sum"); //60sum
    System.out.println(ob.n1-ob.n2);  //-40
    System.out.println("sub="+ob.n1-ob.n2);  //error
    System.out.println(ob.n1-ob.n2+"sub");  //-40sub
    System.out.println(ob.n1+ob.n2);   //60
    System.out.println(ob.n1+ob.n2+"sum"); //60sum
    System.out.println(ob.n1-ob.n2);  //40
    System.out.println("sub="+ob.n1-ob.n2);  //error
    System.out.println("Result="+ob.n1*ob.n2);  //Result=500
    
static variable
---------------------
The variable is declared with static keyword.
It is also called class variable. static variable is accessed using classname.
Object is not required to access.
static variable is directly accessed in static method.
Naming rule of static variable is full capital or full small.
   static int NUM;
  or
   static int num;    
     
example
-----------
class StaticDemo
{
    static int n=10;
    public static void main(String args[])
    {
          System.out.println("n="+n);     
    }
}    

example2
class Value
 {
     static float pi=3.142f;
 }
class Circle
{
    public static void main(String args[])
    {
       int r=10;
       System.out.println("Area="+Value.pi*r*r);
    }
}

save with Circle.java
compile javac Circle.java
run  java Circle

program to find sum of two static variable using main()
----------------------------------------------------------
class SumStatic
{
    static int n1=10;
    static float n2=7.8f;
    public static void main(String args[])
    {
       System.out.println("Sum="+(n1+n2));
    }
}
save with SumStatic.java
========================================================================================================
Homework[19Aug2020]
---------------------------------
Q1. program to find sum of three instance variable in main()[SumThree.java]
     n1=10,n2=90,n3=80
Q2. program to find sum of three float instance variable in main()[SumFloat.java]
     n1=5.5,n2=8.7,n3=9.1
Q3. program to find multiplication of two static variable.[MutltiData.java]
     n1=9,n2=10
Q4. program to find addition,substraction and division result of instance var[DataOpr.java]
    n1=50,n2=10
Q5. program to find square and cube of intance variable in main()[DataOpr.java]
Q6. program to find output of following:
    System.out.println(10+20);
    System.out.println(10+20-1);
    System.out.printf("%d",10+20-8);
    System.out.println("Result="+10+20);
    System.out.println("Result="+(10+20));
    System.out.println("Result="+10-20);
    System.out.println("Result="+10*30);
    System.out.println(10-9+" Result");
    System.out.println("Result="+50/2);
    System.out.printf("Result=%d",100/20);
    System.out.printf("Result=%f",5.5f+3.0f);
    System.out.printf("Welcome %s","Java");
    System.out.printf("Result="+(100-20));
Q7. program to find simple interes of static variable [principal,rate,time] using main()[CalInt.java]
Q8. program to store following in object and print[StudRec.java]
     11 Ramesh 8.9
     20 Ram    9.0
     25 Rohit  8.7
     26 Suresh 8.5
====================================================================================================
Method/function
---------------------
It is self contained block of statement which performs specific task.
Method and function is similar.
It is block of code. Block is declared using curly brace.
Method operates value in object .
It is accessed using dot(.).
In java, method name is always start with small letter.
    show()
    showDetail()
    actionPerformed()
Method name should be meaningful.
Space is not allowed in method name.
There are two types of method use in class.
1. Instance method /non static method
2. static method
class Method
{
     void show()          //instance method
      {  //working of method
      }
     static void disp()     //static method
     {  //working of method
     }
}

Instance Method
---------------------
Method is defined in class and access using object.
Instance method call other instance method directly.
In static method, Instance method is called using object.

class MDemo
{
    void show()
    {
        System.out.println("I am show method");
        display();
    }
    void display()
    {
        System.out.println("I am display method");
    }
   public static void main(String args[])
   {
       MDemo ob=new MDemo();
       ob.show();
   }
}

Method is used to perform action work in object.
Method is also used to provide value in instance variable.
Instance method directly access instance variable.

program to initialize roll and marks using method.
--------------------------------------------------
 class Student
  {
      int roll;
      String name;
      float marks;
      void input(int r,String n, float m)
      {
           roll=r;
           name=n;
           marks=m;
      }
      void show()
      {
           System.out.println("Roll="+roll);
           System.out.println("Name="+name);
           System.out.println("Marks="+marks);
      }
  }
  

class College
{
      public static void main(String args[])
      {
         Student s1=new Student();
         Student s2=new Student();
         Student s3=new Student();
         s1.input(10,"Dev",8.5f);
         s2.input(11,"Akas",8.9f);
         s3.input(12,"Yash",9.0f);        
         s1.show();
         s2.show();
         s3.show();
      }
}

static method
-----------------
static keyword is used with method definition.
It is accessed using class name in other class.
static method is directly accessed in other static method.
example
---------
class MyStatic
 {
      static void show()
       {
           System.out.println("I am static show");
       }
     static void main()
      {
           System.out.println("I am static main");
      }
    public static void main(String args[])
     {
           show();
           main();
     }
 }
====================================================================================================================
Homework[22Aug2020]
--------------------------------------------
Q1 to Q6 using Instance variable
Q7 to Q10 using Static variable
Q1. program to find sum of three integer numbers[SumThree.java]
Q2. program to find sum of three float numbers[SumFloat.java]
Q3. program to find Multiplication of three float numbers[FloatMulti.java]
Q4. program to find division of two float numbers[DivNum.java]
Q5. program to find area of rectangle(area=len*bredth) [RectArea.java]
Q6. program to find area of circle(area=pi*r*r)[CircleArea.java]
Q7. program to find perimeter of rectangle(peri=2*(len+bredth))[RectPeri.java]
Q8. program to find perimeter of circle(peri=2*pi*r) [CirclePeri.java]
Q9 program to swap two characters [SwapChar.java]
Q10. program to swap two float [SwapFloat.java]
Q11. find the output
class StDemo
{
   static int n;
   void input(int num)
    {
        n=num;
    }
    void show()
    {
       System.out.println("n="+n);
    }
   public static void main(String args[])
    {
        StDemo ob1=new StDemo();
        ob1.input(10);
        StDemo ob2=new StDemo();
        ob2.input(20);
        ob1.show();
        ob2.show();
    }
}
===============================================================================
[10:38 pm, 25/08/2020] Akash Cse B: Homework[25Aug2020]
-------------------------------
program to print default value of instance variable
==================================================
class DValue
{
   int n1,n2;
    public static void main(String args[])
    {
       DValue ob=new DValue();
        System.out.println("n1="+ob.n1);
        System.out.println("n2="+ob.n2);  
    }

}

program to store different value in multiple object
---------------------------------------------------
class StudMarks
{
     int roll;
    float marks;
    public static void main(String args[])
    {
       StudMarks s1=new StudMarks();
        s1.roll=10;
        s1.marks=8.5f;
       StudMarks s2=new StudMarks();
         s2.roll=20;
         s2.marks=9.0f;
        System.out.println("Roll="+s1.roll);
        System.out.println("Marks="+s1.marks);
        System.out.println("Roll="+s2.roll);
        System.out.println("Marks="+s2.marks);  
    }
}

program to store following data in object
---------------------------------------------
1 soap 52.99
2 Milk 23.00
3 Sugar 42.00
class Item
{
   byte slno;
   String iname;
   float price;
   public static void main(String args[])
   {
       Item ob1=new Item();
       Item ob2=new Item();
       Item ob3=new Item();
       ob1.slno=1;
       ob1.iname="soap";
       ob1.price=52.99f;
       ob2.slno=2;
       ob2.iname="Milk";
       ob2.price=23.00f;
       System.out.println(ob1.slno+"  "+ob1.iname+"  "+ob1.price);
       System.out.println(ob2.slno+"  "+ob2.iname+"  "+ob2.price);
   }
}

program to store data in object and print total amt.
------------------------------------------------------
Prog in C  299.50
Complete java 599.00

class Book
{
   String bname;
   float price;
   public static void main(String args[])
   {
     Book b1=new Book();
     Book b2=new Book();
     b1.bname="Prog in C";
     b1.price=299.50f;
     b2.bname="Complete java";
     b2.price=599.00f;
    System.out.println(b1.bname+"\t"+b1.price);
    System.out.println(b2.bname+"\t"+b2.price);
    System.out.println("Total="+(b1.price+b2.price));
}

Q1 Store in different object and print [Student.java]
    name     roll    marks
    Ramesh   11      8.5
    Suresh   10      9.5
    Rohit    16      8.0
Q2 Store in different object and print detail with tot marks.[StudentM.java]
    name     roll    sub1   sub2
    Ramesh   11      8.5    8.0
    Suresh   10      9.5    7.5
    Rohit    16      8.0    6.0
    Ramit    12      7.0    8.0
Q3. Store in different object and print numbers with average of numbers[Number.java]
     n1  n2   n2
     10  20   40
     11  32   25
     14  15   35
Q4. store in different object and print details of total amount.[BankT.java]
     actno  amount  depositer
     123    5000     Ramesh
     123    10000    Rohit
     123    2000     Umesh
     123    1500     Sonu
============================================================================================static variable and instance variable
--------------------------------------
variable is declared in class.
class MyData
{
     int n1;         //instance variable
     static int n2;  //static variable/class variable
}
class PrintD
{
    public static void main(String args[])
    {
      MyData ob=new MyData();  //creation of object
       ob.n1=10;   //correct
       ob.n2=20;  //correct 
       MyData.n2=10;  //correct
    }
}

static variable is not part of class object.
It keeps common value for each object.
class StDemo
{
     int n1;
    static int n2;
    public static void main(String args[])
     {
         StDemo ob1=new StDemo();
         StDemo ob2=new StDemo();
         StDemo ob3=new StDemo();
         ob1.n1=10;
         ob2.n1=20;
         ob3.n1=30;
          ob1.n2=100;
          ob2.n2=200;
          ob3.n2=300;
         System.out.println(ob1.n1+" "+ob2.n1+" "+ob3.n1);
        System.out.println(ob1.n2+" "+ob2.n2+" "+ob3.n2);
     
     }
}

Methods
--------------
Class behavior is implemented using method/function.
Method is self contained block of statement which performs a task.
syntax
----------
   void show()   //void=>return type show()=> name of method/function
   {              //{} represent block of method

   }

Method block defines working of method.
Variable is used inside method block called local variable.
Life span of local variable is upto block.

  void show()
  {
      int n=10;
  }
There are two types of method is used inside class.
1. Instance method
2. static method
class MethodDemo
{
    void show()       //instance method or non static method
    {

    }
    static void disp()  //static method
    {
    }
}
1. Instance method
---------------------
Method is declared inside class and access through object of the class.
It is also called non static method.
Method name should be meaningful according to work.
Instance method access instance variable directly.
class InsM
{
    void collegeDetails()  //instance method
    {
        System.out.println("Trident");
        System.out.println("Engineering college");
        System.out.println("Bhubaneswar");
    }
   public static void main(String args[])
   {
       InsM ob=new InsM();
        ob.collegeDetails();   //method call
        ob.collegeDetails();   //method call
        ob.collegeDetails();   //method call
   }
}
Method can be called many times using method call statement.
Method replace repeatation of code.
There are two parts of any method.
  a)Method definition
  b)Method call

Method definition
----------------------
It defines working part of method.
Single method is defines once in a class.
Method definition is used block for working code.
class Method
{
    void show() //method definition
    {
        System.out.print("Hello Student");
    }
   public static void main(String args[])
   {
        Method ob=new Method();
        ob.show();    //method call
    }
}

class Method1
{
   public static void main(String args[])
   {
        Method1 ob=new Method1();
        ob.show();    //method call
    }
    void show() //method definition
    {
        System.out.print("Hello Student");
    }
}
b) Method Call
------------------
Method call execute method definition.
Method call is used many times in a class.
Call statment depends upon user requirement.
  System.out.print("Hello");  //method call statement of print()

   
Instance variable is directly accessed in instance method
Example
----------
  class InsDemo
  {
      int n=10;  //instance var
      void show() //instance method
      {
           System.out.println("n="+n);
      }
    public static void main(String args[])
     {
        InsDemo ob=new InsDemo();
        ob.show();    //method call
     }
     
  }

2. Static method
-------------------
Method is declared with static keyword.
It is accessed using class name.
Static method access static variable directly.

class StaticM
{
    static void show()
    {
       System.out.println("I am static method show"); 
    }
    public static void main(String args[])
    {
       show();
    }
}

save with StaticM.java
compile javac StaticM.java
 Run java StaticM
program to use main() in java class
-------------------------------------
class MainS
{
    static void main()
    {
        System.out.println("I am static main");
    }
    public static void main(String args[])
    {
       main();
       main();
    }
}
save with MainS.java
compile javac MainS.java
run  java MainS
output
--------
I am static main
I am static main

program to access static variable in static method
---------------------------------------------------
class StVar
{
    static int n=10;     //static var
    static void show()    //static method
     {
         System.out.println("n="+n);
     }
    public static void main(String args[])
    {
       show();      //method call of static method
       StVar.show();      //method call of static method
    }
}

program to access static and instance method in two different call
------------------------------------------------------------------
class Methods
{
     void show()
     {
         System.out.println("I am instance method show");
     }
    static void main()
    {
        System.out.println("I am static main");
    }
}
save with Methods.java
compile javac Methods.java
class RunMethods
{
    public static void main(String args[])
    {
       Methods.main();
       Methods ob=new Methods();
        ob.show();
    }
}
save with RunMethods.java
compiler javac RunMethods.java
run java RunMethods

example of static
--------------------
class Static
{
    static float pi=3.142f;
    static void show()
     {
         System.out.println("pi="+pi);
     }
}
class MyClass
{
    Static valuepi;
    
}
class User
{
    public static void main(String args[])
    {
      MyClass.valuepi.show();
    }
}

save User.java
compile javac User.java
       Static.class
       MyClass.class
       User.class
run java User
=========================================================================================================
class MyClass
{
    static
     {
        System.out.println("First");
     }
    static void show()
    {
               System.out.println("Second");
    }
   public static void main(String args[])
   {
        show();
        System.out.println("Third");
   }
}

Operators
--------------
It is special symbol which operates expression.
It is used to calculate value of expression.
There are two types of operator.
  1. Unary operator => use one operand[-5,++n,n--]
  2. Binary operator=>use two operand[10+8,10-8,10*4,10/5,10%3]

Operator is used in java
----------------------------
1. Arithmatic operator
   + ,- ,*,/,%
2. Relational operator[returns boolean value true/false]
   <,>,<=,>=,!=,==
    boolean res=10>8;
    System.out.println(10>7);  //true
    System.out.println(res);  //true
Relational operator is used to make conditions.
Conditions are used in control statement(for,if,while etc)
3. Logical operator
  It combines multiple condition and work according to truth table
  Logical operators are:
   -Logical AND(&&)
   -Logical OR(||)
   -Logical NOT(!)
  Logical operator is also return boolean value(true/false).
4. Bitwise operator
  It operates value according to binary bit[0,1].
  Bitwise operators are:
  -Bitwise leftshift(<<)
  -Bitwise Rightshift(>>)
  -Bitwise AND(&)
  -Bitwise OR(|)
  -Bitwise XOR(^)
5. Conditional operator/Ternary operator
   Works according three statement.
   ?: symbol is used as Ternary operator.
   
  class TOpt
   {
       public static void main(String args[])
       {
           int n=10;
           String res=(n%2==0)?"Even number":"Odd Number";
           System.out.print(res);
       }
   }

program to print number with opposite sign.
-------------------------------------------
class SignO
{
      public static void main(String args[])
       {
           int n=-10;
           int res=(n<0)?-n:-n;
           System.out.print(res);
       }
}

program to print output
-------------------------
class Bool
{
      public static void main(String args[])
       {
           int n=-10;
           boolean res=(n<0)?true:false;
           System.out.print(res);
       }
}

6. Increment/Decrement operator
  It is type of unary operator.
  It is used to increase or decrease value by 1.
  It is used in two forms (pre/post).
  ++ and -- symbol is used as increment/decrement operator.
  int n=10;
  System.out.println(++n);  //11
  System.out.println(n);    //11

  int n=10;
  System.out.println(n++);  //10
  System.out.println(n);    //11
  
  int n=10;
  System.out.println(--n);  //9
  System.out.println(n);    //9
 
  int n=10;
  System.out.println(n--); //10
  System.out.println(n);   //9
==================================================================================================================
Homework[29Aug2020]
--------------------------
Q1 program to display mobile and laptop detail using two instance method.[MyGadgets.java]
Q2 program to display permanent and college address using instance method.[Address.java]
Q3. program to find addition and substraction of instance var using instance methods.[NumOpr.java]
class NumOpr
{
   int n1=10;
   int n2=40;
   void addNum()
   {
       System.out.println("Addition="+(n1+n2));
   }
   void subNum()
   {
      System.out.println("Substracion="+(n1-n2));
  }
  public static void main(String args[])
   {
     NumOpr ob=new NumOpr();
     ob.addNum();
     ob.sumNum();
   }
}
Q4. program to print your education details and hobbies using static method.[StudPersonal.java]
Q5. program to print current sem theory and practical subject details using instance method.[Subject.java]
Q6. program to find following operations using multiple instance method.
    Operation.java[instance var n1=10,n2=5]
    divNum()
    multiNum()
    remNum()
Q7. program to swap two numbers using static method[SwapNum.java].
Q8. program to print biodata using static method[Biodata.java].
Q9. program to print favorite vehicle and electronic gadget details using instance method.[MyFavorite.java]
Q10. program to print favorite food details using static method.[FavoriteFood.java]
Q11 program to find greatest number among two numbers.[Greatest.java]
Q12. program to print two digit number in following format.[TwoDigit.java]
      n=19
     output
      unit=>9
      tens=>1
Q13. program to swap two character using instance method
================================================================================================================
Homework[3Sept2020]
------------------------------
Q1. program to find the output using program.
  a)     System.out.println(5/2);
         System.out.print(3/1.0);
  b) System.out.println( (int)'A');
     System.out.println((char)65+1);
  c) System.out.println(10>2&&True);
  d) System.out.println((int)10.5);
     System.out.println(10+(float)5);
  e) System.out.println('A'+1+2);
     System.out.println((int)'B'+1);
  f) float int=10.5f;
     System.out.printf("%f",int);
Q2. program to check valid roll using method[ValidRoll.java]
Q3. program to check number is even or odd using method.[CheckNum.java]
     check(10*2);    //Even number
     check(10-1);    //Odd number
     check(10+9+1);   //Even number
Q4. program to check BPUT grade according to marks.[CheckGrade.java]
Q5. program to print day name using day number[DayName.java]
Q6. program to print month name using month number[MonthName.java]
Q7. program to print name and roll using instance method[PrintD.java]
Q8. program to print greater and smaller digit of two digit number.[PDigit.java]
      n=45
     output=>54
      n=43
     output=>43
=================================================================================================================
class Demo
{
   int n;
   static void show()
   {
       Demo ob=new Demo();
         System.out.println(ob.n);
   }
   public static void main(String args[])
   {
       show();
   }
}

switch-case statement
-------------------------
It is type of control statement.
It controls statement using case.
syntax
-------
   switch(datatype/expression) //float and double is not applicable
   {
       case value:
          statement;
       break;
       case value:
          statement;
        break;
      default:
       statement;
   }

default is optional block. It is executed when case not found.
break is keyword. It is used to terminate execution of switch case statement.

example
---------
program to print dig name using digit.
class DigName
 {
     public static void main(String args[])
     {
        int d=1;
         switch(d)
          {
            case 1: System.out.println("One");
            break;
            case 0: System.out.println("Zero");
            break;
            case 2: System.out.println("Two");
             break;
         } 
     }   
 }

Example
---------------
class NameDig
 {
     public static void main(String args[])
     {
        String d="one";
         switch(d)
          {
            case "one": System.out.println(1);
            break;
            case "two": System.out.println(2);
            break;
            case "three": System.out.println(3);
             break;
         } 
     }   
 }
   
program to check vowel using switch case
------------------------------------------
 class CheckV
 {
     public static void main(String args[])
     {
        char ch='a';
         switch(ch)
          {
            case 'a': 
            case 'e':
            case 'i':
            case 'o':
            case 'u':
            System.out.println("Vowel");
            break; 
         } 
     }   
 }

Example
----------
   program to check expression result usint switch case
   
 class CheckEx
 {
     public static void main(String args[])
     {
        boolean r=(10.5==10.5);
         switch(10>5)
          {
            case true:
            System.out.println("Correct answer");
            break; 
            case false:
            System.out.println("Incorrect answer");
            break; 
         } 
     }   
 }

Iterational statement
------------------------
It is also called looping statement.
It is used for repeatation of code.
It works with three statement.
 -Initial value : starting value for loop
 -condition : termination value for loop
 -Update expression : any mathematical expression.
There are two types of loop
 1) Entry controlled loop
    -for()
    -while()
 2) Exit controlled loop
     do-while()
Entry controlled loop
------------------------
In this loop, first check the condition ,print body and update the initial value.
It is also called single line loop[possibilities to write in multiline].
Syntax for for()
------------------
  for(intial value;condition;update expression)
    statement to repeat;
 or
  for(intial value;condition;update expression)
  {
    statement to repeat;
  }
or
  for(intial value;condition;update expression)
  {
    statement1 to repeat;
    statement2 to repeat;
    statement3 to repeat;
  }
or
  intial value;
  for(;condition;)
  {
    statement to repeat;
    update expression;
  }
or
  intial value;
  for(;condition; update expression)
  {
    statement to repeat;
  }
or
  intial value;
  for(;condition; update expression)
      statement to repeat;
or
  
  for(intial value;condition;)
  {
    statement to repeat;
     update expression;
  }   
or Infinite loop 
  for(;true;)
  {
    statement to repeat;
  }
or loop without body
  for(intial value;condition;update expression);
  
program to print 1 to 10 numbers using for loop
------------------------------------------------
class PrintTen
{
     public static void main(String args[])
     {
       for(int i=1;i<=10;i++)      //i is fixed for loop only
         System.out.print(" "+i);
     }
}

program to print 10 to 1 using infinite for loop.
class InfiniteTen
{
    void revSeries()
    {
      boolean res=true;
       for(int i=10;res;i--)
        {
            System.out.print(" "+i);
             res=(i==1)?false:true;
        }
    }
     public static void main(String args[])
     {
        InfiniteTen ob=new InfiniteTen();
        ob.revSeries();
     }
}
========================================================================================================
Homework[4Sept2020]
-----------------------
Q1 program to swap two character using third variable.[SwapChar.java]
Q2 program to find sum of each digit in 4 digit number[SumFour.java]
Q3 program to multiply each digit in 2 digit number[MultiDig.java]
Q4 program to find sum first and last digit in 4 digit number[SumFirstLast.java]
Q5 program to find sum of alternate digit in 5 digit number[AlternateSum.java]
Q6 program to find greatest number among two number.[Greatest.java]
Q7 program to check number is even or odd.[CheckNum.java]
Q8 program to print three digit number in reverse.[RevNum.java]
Q9 program to check number is divisible by 6. [DivSix.java]
Q10 program to check number is divisible by 7 and 5.[DivNum.java]
Q11 print following series
   a) 10 9 8 7 6 5 4 
   b) 1 4 9 16 25 36 49 64 81 100
   c) 2 4 6 8 10 12 14 16 18 20
   d) 1 3 5 7 9 11 13 15
   e) a b c d e f g h...z
   f) A B C D....Z
   g) 5 10 15 20 ...50
========================================================================================================
Loop without body
---------------------
Find the output of the program 
for(int i=1;i<=10;i++); //i is visible inside loop
  {
     System.out.print(i); //i is not declared
  }
output: Error

program to print 1 to 10 numbers using loop without body.
--------------------------------------------------------
class MySeries
{
    public static void main(String args[])
    {
       for(int i=1;i<=10;System.out.print(i++));
    }
}
       int s=0;
       for(int i=1;i<=10;System.out.print(i++),s=s+i);
       System.out.println("Sum= "+s);
while() loop
--------------
It is also entry controlled loop.
Works according to three statement[initial value,condn,update exp].
First check the condition then execute body of the loop.
syntax
---------
initial value;
while(condition)
{
   statement to repeat;
   update exp;
}

program to print -5 to 4 using while loop
--------------------------------------------
class PNum
{
    public static void main(String args[])
    {
         int i=-5;
         while(i<=4)
          {
             System.out.print(" "+i);
             i++;
          }
    }
}

19 29 39 49 59 69 79 89 99
1 9 3 9 5 9 7 9 9

do-while() loop
-------------------
It is exit controlled loop .
Works according to three statement.
It is also colled bottom tested loop.
Condition is always end with semicolon.
Condition is checked at the end of iteration.
If condition is false then one iteration is possible.
 syntax
-----------
  initial value;
  do
  {
    statement to repeat;
     update exp;
  }while(condition);

program to print 10 to 1 number using do-while loop
----------------------------------------------------
class Series
{
     public static void main(String args[])
     {
         int i=10;
         do
         {
            System.out.print(" "+i);
            i--;
         }while(i>=1);
     }
}
program to print * ten times
-------------------------------
class Star
{
     public static void main(String args[])
     {
         int i=10;
         do
         {
            System.out.print(" *");
            i--;
         }while(i>=1);
     }
}

String s1="java";
String s2="java";
String s3=new String("java");
=======================================================================================================================
[0:39 pm, 08/09/2020] Akash Cse B: Homework[8Sept2020]
----------------------
Q1. print following series
 a) 10 20 30 40 50 60 70 80 90 100
 b) 11,22,33,44,55,66,77,88,99,110
 c) 1+1,1+1,1+2,1+3,1+4,1+5,1+6,1+7,1+8,1+9
 d) a b c d e f ...z
 e) A B C D E F G ...Z
 f) A-65 B-66 C-67 D-68 ....Z-90
 g) 5 OneZero 15 TwoZero 25 ThreeZero 35 FourZero....FiveZero
 h) Aa Bb Cc Dd Ee Ff Gg Hh ....Zz
 i) Aa bB Cc dD Ee........
 j) 5X1 5X2 5X3.......5X10
 k) 1 Two 3 Four 5 Six 7 Eight 9 Ten
Q2. program to solve using loop without body.
  a) print 10 to 1 
  b) print A to Z
  c) find sum of 1 to 10 numbers
  d) find the reverse of a number
  e) print all even numbers between 1 to20
    class PrintEven
    {
      public static void main(String args[])
      {
        for(int i=1;i<=20;System.out.print(i%2==0?i:" "),i++);
      }
    }
  f) print all odd numbers between 10 to 50
[0:39 pm, 08/09/2020] Akash Cse B: class Factorial
{
   public static void main(String args[])
   {
       for(int i=1,f=1;i<=5;System.out.print(i<5?i+"X":i+"= "+f),i++,f*=i);
   }
===============================================================================================================
19 29 39 49 59 69 79 89

class FunSeries
{
public static void main(String args[])
 {
   for(int i=19,j=1;i<=89;i+=10,j++)
  {
      if(j%2!=0)
        System.out.print(i/10+" ");
      else
        System.out.print(i%10+" ");  
  }
 }
}

Nested Loop
================
 Loop within loop is nested loop.
It is used for printing pattern and contents of matrix.
We can keep all types of loop within loop.
example
---------
for()    //outer loop
 {
     for()  //inner loop
     {}
 }
In terms of execution, first complete iteration of inner loop then outer loop.
Example
-----------
class NLoop
{
    public static void main(String args[])
    {
       for(int i=1;i<=3;i++)
        {
           for(int j=1;j<=4;j++)
             System.out.println(i+" "+j);
        }
    }
}

example2
---------------
class LoopN
{
    public static void main(String args[])
    {
       for(int i=1;i<=3;i++)
         for(int j=1;j<=4;j++)
             for(int k=1;k<=2;k++)
               System.out.println(i+" "+j+" "+k);
      }
}

Array
--------
A collection of several items of the same data type.
Java treats array as a object.
It is reference type variable.
A variable of reference data type holds the reference to the actual value or set of value.

Array is also called basic datastructure. It arranges the list of value.
Syntax
--------
datatype arrayname[];    //1d array
or
datatype []arrayname;
or
datatype [][]arrayname;   //2d array or matrix
or
datatype arrayname[][]; 

foreach loop is specialized loop for array only.
It is advanced type of loop.
Single subscript is used in 1d array.
Two subscript are used in 2d array.

Array initialization
---------------------
int num[]={11,22,33,44,55}; //num is initialized with 5 elements.
  11,22,33,44,55 are array elements.
Array behave like a object so we find length of array using arrayname.length.

class CheckLen
{
    public static void main(String args[])
    {
       int num[]={11,22,33,44,55};
       System.out.print(num.length);
    }
}

   String n="Welcome";
   System.out.println(n.length());  //7
Array Element is accessed using name of array and index.
Index always start with zero.

 int num[]={11,22,33};
 num[0]=> 11
 num[2]=>33
 num[3]=> ArrayIndexOutOfBoundsException 3 index is not found.

class PrintArray
{
    public static void main(String args[])
    {
       int num[]={11,22,33};
       System.out.print(num[0]);
       System.out.print(num[1]);
       System.out.print(num[3]);
     }
}

print contents of array using loop
--------------------------------------
class ArrLoop
{
    public static void main(String args[])
    {
       int num[]={11,22,33,55,77,99};
       for(int i=0;i<num.length;i++)
         System.out.print(" "+num[i]);
    }
}
   for(int i=0;i<num.length;System.out.print(" "+num[i++]));

  float []marks={10.0f,7.5f,8.5f,6.9f,8.0f};
  for(int i=0;i<marks.length;i++)
   System.out.print(" "+marks[i]);

for each loop
----------------
Initial value,condition and update expression is not required.
It reduces burden of software developer regarding loop.
 Syntax :  for(datatype var:arrayname)
             System.out.print(var);
class DemoArr
 {
 public static void main(String args[])
  {
   int num[]={11,22,33,44,55,66,77,88,99};
    for(int ele:num)
     System.out.print(" "+ele);
   }
}
program to print float array using foreach loop
-------------------------------------------------
class FloatArr
{
  public static void main(String args[])
  {
      float []marks={10.0f,7.5f,8.5f,6.9f,8.0f};
    for(float val:marks)
      System.out.print(" "+val);
  }
}
program to print contents of vowel array.
class VowelArr
{
  public static void main(String args[])
  {
      char []vowel={'A','E','I','O','U'};
    for(char val:vowel)
      System.out.print(" "+val);
  }
}

2d array
--------------
It is also called matrix.
It stores similar type of element according to row and column.
In java different row have different number of elements.
It is also called Array of arrays.
syntax
----------
  datatype [][]arrayname;
 or
 datatype arrayname[][];

int mat[][];
float mat[][];
char mat[][];

Intialization of matrix
-------------------------
   0  1  2  =>col index
 0 11 22 33    =>2 X 3
 1 44 55 66
 int mat[][]={{11,22,33},{44,55,66}};
Access the content of 2d array
------------------------------
 arrayname[rowindex][colindex]
print 11
 System.out.print(mat[0][0]);
print 22
 System.out.print(mat[0][1]);
print 44
  System.out.print(mat[1][0]);

 mat.length=> it returns number of rows in mat=>2
 mat[0].length=> It returns number of element in 0th row=>3

program to print length of row and column
--------------------------------------------
  class PrintMat
  {
     public static void main(String args[])
     {
          int mat[][]={{11,22,33},{10,20,0}};
          System.out.println("Total rows in mat="+mat.length);
          System.out.println("Total cols in mat[1]="+mat[1].length);
     }
  } 

11
22 33 44
55 66
10

class MatDisp
{
public static void main(String args[])
  {
   int mat[][]={{11},{22,33,44},{55,66},{10}};
   for(int i=0;i<mat.length;i++)
     {
        for(int j=0;j<mat[i].length;j++)
         System.out.print("  "+mat[i][j]);
      System.out.println();
     }
  }
}
===================================================================================================
Homework[10Sept2020]
--------------------------------
Q1 program to print following pattern.
  a)* * ** ** ***
  b) ** ** ** ** ** *
  c) ** ** ** ** ** ** * * *
  d) mirror print
  e) 12345 4321 123 21 1
Q2 program to store in array and print.
   [10,4 ,5,11,17, 8, 99,18,100,30 ]
Q3. program to store number line of 5 in array and print.
Q4. program to store capital vowel in array and print.
Q5. program to store char in array and print with ASCII code.
    [A B C D E F G H I J]  =>output A-65 B-66 ......
Q6. program to store char in array and print 
    [a b c d e f g h i j] => output A b C d E f G h I j
Q7. program to store in array and print.
    [10 11 12 13 14 15 16 17 18 19 20]
    output 10 oneone 12 onethree......
Q8. program to find sum of unit place digits of array element.
    [15,14,38,76,19,22,43,67] output=>5+4+8+6+9+2+3+7=>44    
Q9. program to find sum of tens place digits of array element.
    [15,14,38,76,19,22,43,67]
Q10. program to store in array and print.
       [4.3,9.6,8.9,2.3,7.8,1.4]
    output 4   0.3
           9   0.6 ...
Q11. program to store in array and print roundoff value.
         [4.3,9.6,8.9,2.3,7.8,1.4]
     output=> 4 10 9 2 8 1
Q12. program to store in 2d array and print in matrix form.
 a) 11 22 33
    44 55 66
 b) 11 22
    44 55 77 88
    99 11
 c) A B
    C D E F G
    H I J K
    L M
 d) 2.5 3.9
    1.2
    4.5
    6.9 8.0 4.5
================================================================================================
10 oneone 12 onethree.....20
class PrintS
{
   static void word(int n)
   {
        switch(n)
        {
            case 0:
             System.out.print("zero");
            break;
            case 1:
             System.out.print("zero");
            break;
           case 2:
             System.out.print("zero");
            break;
        }
   }
   public static void main(String args[])
   {
      for(int i=10;i<=20;i++)
      {
         if(i%2!=0)
         { 
             word(i/10);
             word(i%10);                   
         }
         else
          System.out.print(i+" ")
      }
   }
}
print contents of 2d array using foreach loop
------------------------------------------------
class PrintMat
{
public static void main(String args[])
{
  int mat[][]={{10,20},{11,22,33}};
  for(int r[]:mat)
  {
    for(int ele:r)
     System.out.print(ele+" ");
   System.out.println();
  }
 }
}

Array memory allocation using new operator.
------------------------------------------
Memory allocation of 1d array
 int num[]=new int[2]; //num stores two integer value
System.out.print(num.length);

class ArraySize
{
   public static void main(String args[])
    {
       int num[]=new int[2]; //num stores two integer value
       System.out.print(num.length);
       System.out.print(num[0]);
    }
}

program to allocate and initialize 1d array.
--------------------------------------------
class ArrayEle
{ 
  public static void main(String args[])
    {
       int num[]=new int[4]; 
       num[0]=10;
       num[1]=30;
       num[2]=90;
       num[3]=50;
      for(int i=0;i<num.length;i++)
         System.out.print(" "+num[i]);
      
    }
}
program to assign all even numbers between 1 to 20 in array.
------------------------------------------------------------
class EvenArr
{ 
  public static void main(String args[])
    {
       int even[]=new int[10]; 
      for(int i=1,j=0;i<=20;i++)
         if(i%2==0)
           even[j++]=i;
      for(int i=0;i<even.length;)
         System.out.print(" "+even[i++]);
      
    }
}
Memory allocation of 2d array using new
---------------------------------------
class MatArr
{
public static void main(String args[])
 {
   int mat[][]=new int[3][2];  //capcity is 6 elements[3X2 matrix]
    mat[0][0]=10;
   mat[0][1]=20;
   mat[1][0]=30;
   mat[1][1]=40;
   mat[2][0]=50;
   mat[2][1]=60;
   for(int r[]:mat)
    {
      for(int ele:r)
        System.out.print(ele+"  ");
      System.out.println();
   }
 }
}

Allocate space for disimilar element based matrix
---------------------------------------------------
class MatDemo
{
  public static void main(String args[])
  { 
  int [][]mat=new int[2][];
   mat[0]=new int[2];
   mat[1]=new int[3];
       mat[0][0]=10;
       mat[0][1]=20;
       mat[1][0]=30;
       mat[1][1]=40;
       mat[1][2]=50;
      for(int r[]:mat)
     {
        for(int ele:r)
          System.out.print(ele+"  ");
        System.out.println();
      }
 }
============================================================================================
Homework[12Sept2020] 
-----------------------------
Q1. program to store following elements in 1d array and find sum of alternate element using method.
   [11,32,10,16,32,16,9,18,6,2] 
Q2. program to find sum of even indexed element using method.
   [11,32,10,16,32,16,9,18,6,2] 
Q3. program to find sum of odd indexed element using method.
   [11,32,10,17,33,16,9,18,6,20]
Q4. program to sort list of element using all types sorting algorithm.
    [11,32,100,11,33,16,9,18,6,20]
Q5. program to sort list in descending order using selection and insertion sort
     [b,a,C,D,K,m,A,G,g,B]
Q6. program to print upper and lower traingle matrix
     11 22 33
     44 55 66
     77 88 99
Q7. program to find row sum of following matrix.
    11
    20 30
    77 33 11 44
    22 11
Q8. program to find column sum of following matrix.
    10 20
    30 11 22 33
    40 20 10
    11 22
=================================================================
Polymorphism
----------------
It is feature of OOP.
Polymorphism is implemented by method overloading and overriding.
Poly means multple.
Single method name is used for multiple purpose.
Argument should be different.
There are two types of polymorphism
  1) static polymorphism   =>implemented using method overloading
  2) Dynamic polymorphism  =>implemented using method overriding[inheritance]
Method overloading
----------------
Single method name is used for multiple purpose.
It is also called method name overloading.
Method is overloaded according to:
       - number of arguments
       - types of arguments
       - both

    +  => addition
       => concatination
 It means + symbol is overloaded.

Overloading according to number of arguments
------------------------------------------------
    void show();
    void show(int n);
    void show(int n,int n1);
    void show(int n,int n1,int n2);
 show() method is overloaded according to number of arguements.
Overloading according to type of arguments
--------------------------------------------
   void show(int n);
   void show(float n);
   void show(char n);
   show() method is overloaded according to type of arguements.
Overloading according to type and number of arguements
-------------------------------------------------------
   void show();
   void show(int n);
   void show(int n1,float n2);
   void show(int n1,int n2);
show() method is overloaded.

program to print all data type using different show() method.
---------------------------------------------------------------
 class PrintData
 {
    void show(int n)
    {
         System.out.println("Integer n="+n);
    }
    void show(float n)
    {
         System.out.println("Float n="+n);
    }
    void show(char n)
    {
         System.out.println("char n="+n);
    }
   public static void main(String args[])
   {
       PrintData ob=new PrintData();
       char ch='A';
       ob.show(ch);
       int n=10;
        ob.show(n);
       float n1=10.5f;
        ob.show(n1);
   }
 }

program to find sum of numbers using overloaded method.
--------------------------------------------------------
 sum(10,20);
 sum(10,20,30);
 sum(10,20,30,40);
 sum(5,19,20,40,50);
program to find area of shape using overloaded method
--------------------------------------------------------
  area()   //calculate area of triangle[0.5*b*h]
  area()   //calculate area of circle [pi*r*r]
  area()   //calculate area of rectangle[l*b]
  area()   //calculate area of square[s*s]

program to swap two number using overloaded method swap.
   swap('A','B');
   swap(10,20);
   swap(2.5f,5.5f);
   double n1=3.4,n2=5.4;
   swap(n1,n2);
 

Constructor
-----------------
Constructor is special type of method.
Constructor name and class name should be same.
It is executed using new operator.
It is used to allocate and initialize instance variable.
Constructor does not have explicit return type.
  class Demo
   {
       Demo()  //constructor
       {

       }
   }
Constructor can not be inherited.
There are two types of constructor.
 1. Default constructor: constructor without arguement
 2. Parameter constructor: constructor with argument.
================================================================================================================
Homework[15Sept2020]
---------------------------
Q1. program to find sum of two integer and float using overloaded method.
Q2. program to find area of circle,triangle,square and rectangle using overloaded method.
Q3. program to find perimeter of circle,trianle,square and rectangle using overloaded method.
Q4. program to find interest for fixed and saving using overloaded method.
Q5. program to print contents of array using overloaded method.
     showArr()  => forward print
     showArr()  => backward print
Q6. program to print series using overloaded method.
    series()  => 1 2 3 4 5 6 7 8 9 10
    series()  => 10 9 8 7 6 5 4 3 2 1
Q7. program to print digits using overloaded method.
     25 35 45 55 65 75 85
      digit()=> 2 3 4 5 6 7 8 =>unit place
      digit()=> 5 5 5 5 5 5 5 =>Tens place
===============================================================================
calInterest(float,float,float)   //fixed
calInterest(float,float)     //saving

c1=(10000.0f,2.5f,6.5f);
c2=(100000.0f,1.0f)

Constructor
----------------------
Example of Default constructor/no argument constructor
--------------------------------------------------------
class Demo
{
    int n;
    Demo()
    {
          System.out.println("Constructor is executed..");
    }
   public static void main(String args[])
    {
       Demo ob=new Demo();
        System.out.println(ob.n);
       Demo ob1;
       System.out.print(new Demo().n);
    }
}

program to initialize default value for instance variable is 10.
-----------------------------------------------------------------
class InVar
{
    int n;
    InVar()
    {
        n=10;
          System.out.println("Constructor is executed..");
    }
   public static void main(String args[])
    {
       InVar ob=new InVar();
        System.out.println(ob.n);
        System.out.print(new InVar().n);
    }
}

Parameter constructor
-----------------------
It is type of constructor.
It is used to pass parameter during object creation.
Parameter may be any type.
Example
---------------
program to show execution of parameter constructor
class ConsDemo
{
   int n;
   ConsDemo(int num)
   {
      n=num;
      System.out.println("Constructor is executed..");
   }
   void show()
   {
      System.out.println("n="+n);
   }
   public static void main(String args[])
   {
      ConsDemo ob=new ConsDemo(10);
      ob.show();
      ConsDemo ob1=new ConsDemo(20);
      ob1.show();
   }
}

Multiple constructor in single class
------------------------------------
There is possiblities to use multiple constructor in single class.
This concept is known as constructor overloading.
The argument must be different.
syntax
---------
    class Demo
    {
           Demo() 
           {

           }
         Demo(int n)   //Demo constructor is overloaded
         {

         }
    }
Constructor is calling according to arguments.
example
----------
program to initialize instance variable by 10 and 20 using default and parameter constructor.

class MyVar
{
   int n;
   MyVar(int num)
   {
      n=num;
      System.out.println("parameter Constructor is executed..");
   }
   MyVar()
   {
         n=10;
       System.out.println("Default Constructor is executed..");
   }
   void show()
   {
      System.out.println("n="+n);
   }
   public static void main(String args[])
   {
      MyVar ob=new MyVar(20);
      ob.show();
      MyVar ob1=new MyVar();
      ob1.show();
   }
}
this
------------
It is keyword in java.
It is non static.You can not use in static.
this represents object of current class.
It is automatically available in method and constructor.
this is used to access instance variable and method.
It is also used to call same class constructor.
During constructor calling, It must be first statement in constructor.
  this();   //call default constructor
  this(10);  //call constructor with int value
program to access instance variable using this
---------------------------------------------------
class MyData
{
   int n;
   MyData(int n)
   {
      this.n=n;
      System.out.println("parameter Constructor is executed..");
   }
   void show()
   {
      System.out.println("n="+n);
   }
   public static void main(String args[])
   {
      MyData ob=new MyData(20);
      ob.show();
   }
}
program to access instance variable and method using this
---------------------------------------------------
class MyD
{
   int n;
   MyD(int n)
   {
      this.n=n;
      System.out.println("parameter Constructor is executed..");
      this.show();
   }
   void show()
   {
      System.out.println("n="+this.n);
   }
   public static void main(String args[])
   {
      MyD ob=new MyD(20);
   }
}
this keyword is used to call same class constructor
-----------------------------------------------------
program to call default constructor using parameter constructor.
class MyCon
{
   int n;
   MyCon(int n)
   {
       this();       //calling of default constructor
      this.n=n;
     System.out.println("Parameter Constructor");
   }
   MyCon()
   {
          System.out.println("Default Constructor");
   }
   void show()
   {
      System.out.println("n="+n);
   }
   public static void main(String args[])
   {
      MyCon ob=new MyCon(20);
       ob.show();
   }
}

program to call parameter constructor using default constructor.
class MyCons
{
   int n;
   MyCons(int n)
   {
      this.n=n;
     System.out.println("Parameter Constructor");
   }
   MyCons()
   {
         this(20);
          System.out.println("Default Constructor");
   }
   void show()
   {
      System.out.println("n="+n);
   }
   public static void main(String args[])
   {
      MyCons ob=new MyCons();
       ob.show();
   }
}
==========================================================================================
Inheritance
-----------------------
It is feature of OOP.
Reusability of code is possible using inheritance concept.
extends keyword is used for inheritance.
extends keyword inherit only one class.
constructor is not inherited .
Java does not support multiple inheritance.
You can implement multiple inheritance in interface.
Types of inheritance 
-----------------------
1. Single level inheritance/simple inheritance
2. Multilevel Inheritance
3. Hierarchical inheritance
4. Hybrid inheritance.
Base Class: Existing class is known as base class.
Derived class: Inherited class is known as derived class. Derived class object
contains properties of base class as well as derived class.

1. Single Level Inheritance
----------------------------
Derived class inherit properties of single base class.
This type of inheritance is known as single level inheritance.
syntax
---------
  class Base
  {
      //list of properties[variables and methods]
  }
  class Derived extends Base
  {
     //list of properties[Derived class]  
  }

Derived ob=new Derived(); //ob contains all properties of Base and Derived

Example
-------------
class Data
{
   float pi=3.142f;
   float getPI()
   {
     return pi;
   }
}   
class Circle extends Data
{
     int r;
     void area()
     {
         System.out.print("Area of Circle="+getPI() *r*r);
     }
    public static void main(String args[])
    {
         Circle ob=new Circle();
         ob.r=3;
         ob.area();
    } 
}

Example
----------------
class MyData
{
    int n1=10,n2=20;
}
class MySeries extends MyData
{
    void fseries()
    {
        for(int i=n1;i<=n2;System.out.print(" "+i++));
    }
    void rseries()
    {
        for(int i=n2;i>=1;System.out.print(" "+i--));
    }
   public static void main(String args[])
   {
       MySeries ob=new MySeries();
       ob.fseries();
       System.out.println();
       ob.rseries();
   }
}
====================================================================================================
Inheritance
--------------------
class Data
{
 int n1=10,n2=20;
}
class Series extends Data
{
    int n3=30;
     void add()
     {
        System.out.println("Addition="+(n1+n2+n3));
     }
     void multi()
     {
       System.out.println("Addition="+(n1*n2*n3));
     }
    public static void main(String args[])
    {
        Series ob=new Series();
         ob.add();
         ob.multi();
    }
}

save with Series.java
compile: javac Series.java
     Data.class
     Series.class
Run:  java Series

class SData
{
  static int n1=10,n2=20;
}
class Calc extends Data
{
    int n3=30;
     void add()
     {
        System.out.println("Addition="+(n1+n2+n3));
     }
     void multi()
     {
       System.out.println("Addition="+(n1*n2*n3));
     }
    public static void main(String args[])
    {
        Calc ob=new Calc();
         ob.add();
         ob.multi();
    }
}
save with Calc.java
compile: javac Calc.java
      SData.class
      Calc.class=> main method
Run: java Calc

Multilevel Inheritance
--------------------------
In this inheritance, class properties is inherited in different level.
syntax
----------
class Base
{

}
class D extends Base
{

}
class Main extends D
{

}

Main ob=new Main();  //ob contains all the properties of Base,D and Main class
example
---------
class PValue
{
    float pi=3.142f;
}
class Dimen extends PValue
{
   int r;
   void calArea(int r)
   {
     this.r=r;
     System.out.println("Area of Circle="+pi*r*r);
   }
}
class Circle extends Dimen
{
    public static void main(String args[])
    {
      Circle c1=new Circle();
      c1.calArea(10);
      Circle c2=new Circle();
       c2.calArea(5);      
    }
}

Hierarchical Inheritance
-------------------------
In hierarchical inheritance, single base class is inherited to multiple derived class.
syntax
--------
class Base
{

}
class MainOne extends Base
{

}
class MainTwo extends Base
{

}
class Main extends Base
{

}
program to calculate Area and Perimeter of Circle
--------------------------------------------------
class CData
{
   float pi=3.142f;
}
class Area extends CData
{
    void calArea(int r)
    {
        System.out.println("Area of Circle="+pi*r*r);
    }
}
class Perimeter extends CData
{
    void calPeri(int r)
    {
        System.out.println("Perimeter of Circle="+2*pi*r);
    }

}
class CircleCal
{
   public static void main(String args[])
   {
      Area c1=new Area();
      Perimeter c2=new Perimeter();
      c1.calArea(10);
      c2.calPeri(10);        
   }
}

save  CircleCal.java
compile javac CircleCal.java
       CData.class
       Area.class
      Perimeter.class
      CircleCal.class
Run: java CircleCal
Hybrid Inheritance
----------------------
It is combination of any two types of inheritance.
example
------------
extends keyword inherit properties of single class.
Java implements multiple inheritance using interface.
In interface extends multiple interface.

Access Specifier
-------------------------
Access specifier provides visibility to variable or method(class member) in class.
Access specifiers are
  1. public
  2. private
  3. protected
  4.           default access

 int n1;   // default
 public int n1;  //public type access
 private int n1;  //private type access
 protected int n1; //protected type access.

public
---------
It is keyword in java.
public is used with class,variable and method.
public type is visible everywhere.
Public is also visible in other package.
a) public int n;
b) public void show()
 {

 }
c) public class My       //always save with My.java
   {

   }
Example1
public class Demo
{
   public static void main(String args[])
   {
       System.out.println("Hello");
   }
}
Example2
public class My
{
      void show()
      {
          System.out.print("Hi");
       }
}
class MDemo
{
   public static void main(String args[])
   {
     My ob=new My();
      ob.show();
       System.out.println("Hello");
   }
}
=================================================================================================
class Grocery
{
   int dalp;
   int ricep;
   void inputG(int d,int r)
   {
      dalp=d;
      ricep=r;
   }
   int totG()
   {
       return dalp+ricep;
   }
}
class Electronic extends Grocery
{
    int tvp;
    int washp;
    void inputE(int t, int w)
    {
       tvp=t;
       washp=w;
    }
    int totE()
    {
        return tvp+washp;
    }
}
class Cupon extends Electronic
{
  static String genC(int tot)
    {
        if(tot>40000)
          return "Voucher of Rs 2000 ";
        else if(tot>20000 && tot<40000)
          return "Voucher of Rs 1000";
        else
          return "No Voucher";
    }
}
class Customer 
{
   public static void main(String args[])
   {
      Electronic c1=new Electronic();
      c1.inputG(100,75);
      c1.inputE(10000,10000);
       int g=c1.totG();
       int e=c1.totE();
       System.out.println("Grocery Total: Rs"+g);
       System.out.println("Electoric Total: Rs"+e); 
       String cp=Cupon.genC(g+e);
       System.out.println(cp);                         
   }
}
=============================================================================================
Default: When no access modifier is specified for a class ,
method or data member – It is said to be having the default access modifier
by default.
The data members, class or methods which are not declared using 
any access modifiers i.e. having default access modifier are
accessible only within the same package.

Private: The private access modifier is specified using the keyword private.
The methods or data members declared as private are accessible only within
the class in which they are declared.
-Any other class of same package will not be able to access these members.
-Top level Classes or interface can not be declared as private because
a)private means “only visible within the enclosing class”.
b)protected means “only visible within the enclosing class and any subclasses”
private int n;   //private type instance variable
private void show() //private instance method
{

}
private class My //not accessable
{
}

class Demo
{
    private int n=10;
    public void show()
    {
         System.out.println("value of n="+n);
    }
   void disp()
    {
         System.out.println("value of n="+n);
    }

}
class MyClass
{
    public static void main(String args[])
    {
        Demo ob=new Demo();
        //System.out.println(ob.n);
        ob.show();
        ob.disp();
    }
}

Example2
-----------
class Demo
{
    private int n=10;
    public static void main(String args[])
    {
        Demo ob=new Demo();
        System.out.println(ob.n);    //10
    }
}
-private member can not be inherited.
class Data
{
   private int n1;
   int n2;
   void input(int n1,int n2)
   {
      this.n1=n1;this.n2=n2;
   }
}
class View extends Data
{
    void show()
    {
      // System.out.println("n1="+n1);  //not inherited
       System.out.println("n2="+n2);
    }
   public static void main(String args[])
   {
       View ob=new View();
       ob.input(10,100);
       ob.show();
   }
}

private access specifier is not allowed with class.
private class PDemo   //wrong modifier for class PDemo
{
}
private method is allowed but accessable within class.
example
class MDemo
{
   private void disp()
   {
       System.out.println("I am private disp()");
   }
    void show()
    {
       System.out.println("I am default show()");
       disp();
    }
}
class PDemo
{
    public static void main(String args[])
   {
       MDemo ob=new MDemo();
       ob.show();
   }
}

protected: The protected access modifier is specified using the keyword protected.
The methods or data members declared as protected are accessible 
within same package or sub/inherited classes in different package.
class MyClass
{
   protected MyClass()
   {
         System.out.println("i am constructor");
   }
   public static void main(String args[])
   {
      new MyClass();
   }
}

class BankA
{
  static void showBal()
  {
      System.out.print("Balance");
   }
   void addAmt()
   {
     System.out.print("Add Amt");
   } 
   private BankA()
   {
         System.out.println("i am constructor");
   }
}
class MyCust
{
     public static void main(String args[])
   {
      BankA.showBal();
   }
}



   
public: The public access modifier is specified using the keyword public.
-The public access modifier has the widest scope among all other access modifiers.
-Classes, methods or data members which are declared as public are accessible 
from every where in the program. 
Public class is also accessable in different package.
There is no restriction on the scope of a public data members.

The Java access modifiers private and protected cannot be assigned to a class. 
Only to constructors, methods and fields inside classes. 
Classes can only have the default (package) 
and public access modifier assigned to them
=====================================================================================================
find the output
  int []num={10,10+2,3-4,2*3,40/2};
  a) print num[0]
  b) print num[4]
  c) print num[2+1]
  d) print num[3-1]
  e) print num[3]*2
  f) print num[1*2]
  g) print num[1-1]+1
  h) print all elements of num array

find the output
float m[]={1.2f,3.4f,1.2f*2,3.9f/3,3.4f+1.6f} ;
a) print all the elements
b) print m[1]
c) print m[1+1]
d) print m[1/1]
e) print m[4]-1
g) print m[3-0]
==================================================================================================
Accessing constructor in Inheritance
---------------------------------------
Constructor can not be inherited.
Execution sequence of constructor in inheritance.
Execution of Default constructor
-----------------------------
class Base
{
    Base()
    {
       System.out.println("Base Constructor");
    }
}
class Derived extends Base
{
    Derived()
     {
         System.out.println("Derived Constructor");
     }
   public static void main(String args[])
   {
      Derived ob=new Derived();
   }
}

First execute Base class constructor then Derived class constructor.

class MBase
{
    MBase()
    {
       System.out.println("MBase Constructor");
    }
}
class MDerived extends Base
{
   public static void main(String args[])
   {
      MDerived ob=new MDerived();
   }
}
First execute MBase constructor 

Execution sequence of Constructor in Multilevel Inheritance
------------------------------------------------------------
class Base
{
   int n;
    Base()
    {
        System.out.println("Base constructor");
    }
}
class SBase extends Base
{
    SBase()
    {
       n=10;
        System.out.println("SBase constructor");
    }
}
class Derived extends SBase
{
     Derived()
    {
       n=50;
        System.out.println("Derived constructor");
    }
   public static void main(String args[])
   {
        Derived ob=new Derived();
          System.out.print(ob.n);
   }
}

output
Base constructor
SBase constructor
Derived constructor50
Execution of parameter constructor in Inheritance
-------------------------------------------------
Parameter constructor is not executed automatically in base class.
Derived class constructor is used to call base class constructor.
super is keyword used to call base class constructor.
super is non-static.
During constructor calling, super must be first statement.
super is also used to access instance variable and method of base class.
super is used to access overrided method of base class.

class DemoB
{
    int n;
    DemoB(int n)
    {
           this.n=n;
        System.out.println("I am parameter constructor of Base");
    }
}
class DemoD extends DemoB
{
   int num=10;
    public static void main(String args[])
    {
      DemoD ob =new DemoD();
       System.out.print(ob.num+" "+ob.n);
    }
}
output: Compilation error
 Parameter constructor of base doesnot invoked automatically.
class DemoB
{
    int n;
    DemoB(int n)
    {
           this.n=n;
        System.out.println("I am parameter constructor of Base");
    }
}
class DemoD extends DemoB
{
   int num=10;
    DemoD()
    {
       super(num);
       System.out.println("I am default constructor of DemoD");
    }
    public static void main(String args[])
    {
      DemoD ob =new DemoD();
       System.out.print(ob.num+" "+ob.n);
    }
}

Method Overriding
-------------------------
 Polymorphism
   1) Static polymorphism => method overloading
   2) Dynamic polymorphism=> method overriding
Dynamic polymorphism is implemented using Method overriding.
Method overriding is possible in Inheritance.
Method signature should be same in base and derived class.
class Base
{
   void show()
   {

   }
}
class Derived extends Base
{
   void show()
   {

   }

}
During run time base class show() method is overrided by derived class show method.
Example
-----------
class My
{
   public void show()
   {
       System.out.println("I am show of My");
   }
}
class MyD extends My
{
   public void show()
   {
       System.out.println("I am show of MyD");
   }
 public static void main(String args[])
  {
      MyD ob=new MyD();
     ob.show();
  }
}

program to call overrided method
-------------------------------------
class My
{
   public void show()
   {
       System.out.println("I am show of My");
   }
}
class MyD extends My
{
   public void show()
   {
      super.show();
       System.out.println("I am show of MyD");
   }
 public static void main(String args[])
  {
      MyD ob=new MyD();
     ob.show();
  }
}
=============================================================================================
final
------------
It is keyword in java.
It is used with variable,method and class.
1) use with variable
   The contents of final variable is fixed.
   You can not modify the contents.
    final int n;
        n=10;      //correct
        n=20;     //incorrect
        n++;      //incorrect  n=n+1
        n=n+1;    //incorrect
   or final int n=10;
       n=20;  //incorrect
example
-----------
class FDemo
{
   public static void main(String args[])
   {
      final int n;
      n=10;
      System.out.println(n);
   }
}
2)final with method
--------------------
final method can not be overrided.
class My
{
    final void show()
     {
        System.out.print("I am show of My");
     }
}
class MyDemo extends My
{
    void show()
     {
        System.out.print("I am show of MyDemo");
     }
   public static void main(String args[])
   {
       MyDemo ob=new MyDemo();
       ob.show();
   }
}
Output
------------
compilation error: final method can not be overrided.

3) final with class
-----------------------
final class can not be inherited.
final class My
{

}
class Demo extends My  //My can not be inherited due to final type 
{

}

example
-------
final class Favorite
{
   final static String food="Paneer";
}
class Student 
{
    public static void main(String args[])
    {
      System.out.print(Favorite.food);
    }
}

example
------------
final class My
{
  final void show()
   {
     System.out.println("Show");
   } 
}
class MyD
{
   public static void main(String args[])
   {
     My ob=new My();
     ob.show();
   }
} 
   
abstract
-----------------
It is also keyword in java.
It is used with class and method.
abstract method is always declare with abstract class.
abstract method does not have body. It is defined in sub/inherited class.
You can not create object of abstract class.
Contents of abstract class is accessed using object of sub class.
abstract method always end with semicolon.
  abstract void show();
  public abstract void disp();

example
-----------
abstract class Method
{
   abstract void input();
   abstract void show();
   void myDisp()
   {

   }
}
class Customer extends Method 
{
   void input()
   {
      System.out.println("Input method");
   }
   void show()
   {
       System.out.println("Input method");

   }
   void disp()
   {

  }
   public static void main(String args[])
   {
      Customer ob=new Customer();
       ob.input(); 
       ob.show();
       ob.disp();
       ob.myDisp(); 
   } 
}

you can also keep normal method inside abstract class.
Normal method is accessed using object of inherited class.

abstract class Value
{
   static void show()
   {
        System.out.print("I am static show");
   }
  abstract void disp();
}
class VDemo 
{
   public static void main(String args[])
   {
       Value.show();
   }
}
output
-------------
I am static show

final abstract class is not possible[Bad combination of modifier].
=============================================================================================================
Homework[12Oct2020]
-----------------------------
Q1 fill in the blanks with suitable access modifier and return type
    class MyValue
    {
        private static float pi=3.142f;
        .........getPi()
         {
            return pi;
         }
    }
   class Circle extends MyValue   //put main() method in Circle class
    {
         private int r;
         ...........getR(int r)
          {

          }
         ............calArea()
         {

         }
    }
Q2. 
    class BankIns
    {
        static final String name="State Bank of India";
        private final float sr=3.5f;
        private final float fr=6.5f;
        .........getSRate()
         {

         }
        ...........getFRate()
         {

         }      
    }
    class Customer extends BankIns   //main() method in Customer
    {
        float irest,amt;
        ............calInterest(float p,float t)
        {

        }
    }
Q3. Fill in the blanks
abstract class Bank
{
   abstract float getRateOfInterest();    
}    
class SBI extends Bank
{   
   .......sbir=6.5f 
   ......... ...........()
    {
      return sbir;
    }    
}    
class PNB extends Bank
{    
  ..........pnbr=7.0f
  .......... getRateOfInterest()
    {
     return pnbr;
    }    
}    
  
class BankCustomer     //print rate of interest of SBI and PNB
{    
   public static void main(String args[])
    {    
    }
} 
Q4. Create an abstract class 'Parent' with a method 'message'. 
It has two subclasses each having a method with the same name 'message' 
that prints "This is first subclass" and "This is second subclass" respectively. 
Call the methods 'message' by creating an object for each subclass.
Q5.Create an abstract class 'Bank' with an abstract method 'getBalance'.
$100, $150 and $200 are deposited in banks A, B and C respectively.
 'BankA', 'BankB' and 'BankC' are subclasses of class 'Bank', each having a method named 'getBalance'. 
Call this method by creating an object of each of the three classes.
Q6. We have to calculate the percentage of marks obtained in three subjects
 (each out of 100) by student A and in four subjects (each out of 100) by student B.
 Create an abstract class 'Marks' with an abstract method 'getPercentage'. 
It is inherited by two other classes 'A' and 'B' each having a method with the 
same name which returns the percentage of the students. 
The constructor of student A takes the marks in three subjects as its parameters
 and the marks in four subjects as its parameters for student B.
 Create an object for each of the two classes and print the percentage of marks for both the students.
Q7.Create an abstract class 'Animals' with  abstract methods animalSound().
 Now create a class 'Cats' with a method 'animalSound()' which prints "Cats meow" and a class 'Dogs' with a method 'animalSound()' which prints "Dogs bark", both inheriting the class 'Animals'.
 Now create an object for each of the subclasses and call their respective methods in MyPet class.
Q8. 
 abstract class MDetails
  {
      protected String name;
      protected String branch;
      protected String email;
      abstract void input(String n,String B,String e);
      abstract void show();
  }    
  class BStudent
  {
       ..........input(...............)
       {

       }
     .........show()
    {}
     public static void main(String args[])
     {
          BStudent s1=new BStudent();
          s1.input("Ramesh","CSe","ramesh@gmail.com");
          BStudent s2=new BStudent();
          s2.input("Ritesh","IT","ritesh@gmail.com");
     }
  }
Q9.
 abstract class MyAbs
 {
      abstract void showA();
      abstract void showB();
 }
 abstract class ShowA extends MyAbs
 {
       void showA()
       {
          System.out.println("I am showA method");
       }
 }
class ShowB extends ShowA
 {
       void showB()
       {
          System.out.println("I am showB method");
       }
     public static void main(String args[])
     {
          ShowB ob=new ShowB();
          ob.showA(); ob.showB();
     }
 }
=======================================================================================
String
================
String is predefined class of java.lang package.
It stores string data in variable. It is combination of list of characters.
String is denoted by "" double quotes.
String object have immutable. Immutable means cant modify contents of object.

   String s="Hello"; //You cant modify contents of s. s is immutable.
   String s="Hello"+"\n"+"student";
   System.out.println(s);  //Hello nextline student
String manipulation is possible using string class.
class StDemo
{
   public static void main(String args[])
    {
         String s="Hello "+'\n'+'A'+"Hi"+10+(20-5)+10.7f+10/2;
         System.out.println(s);
    }
}

String class have predefined methods.
 1. length()  => count number of letters in string.
 2. toUpperCase() => return string in uppercase
 3. toLowerCase() => return string in lowercase
 4. charAt()   => return character according to index argument
 5. substring() => return list of characters according to index
 6. split()   => split string according to delimeter.
 7. equals() => compares two string and return boolean value
 8. equalsIgnoreCase() =>compares two string and return boolean [ignore case]
 9. trim(); => remove leading and trailing space 
 10. concat() => join multiple strings
 11. indexOf() => to get index of searching string
 12. lastIndexOf() => to get last index of searching string. 
etc
All above method is worked with object of string class.

class LenDemo
{
   public static void main(String args[])
   {
       System.out.println("Length="+args[0].length()):
   }
}
save with LenDemo.java
compile: javac LenDemo.java
run: java LenDemo trident

class StrLen
{
   public static void main(String args[])
   {
      String name="Trident academy";
       System.out.println("Length="+name.length());  //Length=15
   }
}

Example
------------
class StrUp
{
   public static void main(String args[])
   {
      String name="Trident academy";
       System.out.println(name.toUpperCase()); //TRIDENT ACADEMY
       System.out.println(name);   //Trident academy
   }
}
example
class StrD
{
   public static void main(String args[])
   {
      String name="Trident academy".toUpperCase();
       System.out.println(name);   //TRIDENT ACADEMY
   }
}

example
------------
class StrLw
{
   public static void main(String args[])
   {
      String name="TRIDENT";
       System.out.println(name.toLowerCase()); 
   }
}

example
-----------
class StrChar
{
   public static void main(String args[])
   {
      String name="welcome";
       System.out.println(name.charAt(0));  //w
       System.out.println(name.charAt(1));  //e 
   }
}

java StrFun welcome
output w e l c o m e

class StrFun
{
   public static void main(String args[])
   {
      String name=args[0];
      for(int i=0;i<name.length();i++)
        System.out.print(name.charAt(i)+" "); 
   }
}
save with StrFun.java
compile: javac StrFun.java
run: java StrFun welcome
w
 e
l
 c
o
 m
e

WeLcOmE
class StrCap
{
   public static void main(String args[])
   {
      String name=args[0];
      int n;
      for(int i=0;i<name.length();i++)
       {
         n=(int)(name.charAt(i));
        if(i%2==0)
         System.out.print((char)(n-32)); 
        else
         System.out.print(name.charAt(i));
   }
}
=========================================================================
Dynamic Method Dispatch
---------------------------
Dynamic method dispatch is a mechanism by which a call to an overridden method
is resolved at runtime. This is how java implements runtime polymorphism. 
When an overridden method is called by a reference,
java determines which version of that method to execute based on 
the type of object it refer to. In simple words the type of object 
which it referred determines which version of overridden method will be called.

class Parent
{
   void show(){}
}
class Child extends Parent
{
   void show(){}
}

Parent p=new Parent();
 p.show();   //call show() method of Parent class
Parent ob=new Child();  //upcasting
 ob.show();  //call show() method of Child class

When Parent class reference variable refers to Child class object,
it is known as Upcasting. 
In Java this can be done and is helpful in scenarios where multiple child classes 
extends one parent class.
In those cases we can create a parent class reference and assign child class
 objects to it.
Example
----------
class Game
{
 	public void type()
 	{  
 		System.out.println("Indoor & outdoor"); 
 	}
}
class Cricket extends Game
{
 	public void type()
 	{  
 		System.out.println("outdoor game"); 
	}

 	public static void main(String[] args)
 	{
   		Game gm = new Game();
   		Cricket ck = new Cricket();
   		gm.type();
   		ck.type();
   		gm = ck;	//gm refers to Cricket object
   		gm.type();	//calls Cricket's version of type
 	}
}
output
----------
Indoor & outdoor
Outdoor game
Outdoor game

Example
-------------
class Rectangle
{
	float l=8.0f,b=4.0f;
	float area;
	public void area()
	{
		area=l*b;
		System.out.println("Area of rectangle: "+area);
	}
}
class Square extends Rectangle
{
	public void area()   //overridden method
	{
		area=l*l;
		System.out.println("Area of square: "+area);
	}
}
class Triangle extends Rectangle
{
 
	public void area()     //overridden method
	{
		area=(b*l)/2;
		System.out.println("Area of triangle: "+area);
	}
}
public class ShapeArea
{
   public static void main(String args[])
    {
		Rectangle r=new Rectangle();
		r.area();
		r=new Square();       //superclass reference referring to subclass Square object so,at run time it will call Square area()
		r.area();
		r=new Triangle();    //superclass reference referring to subclass Triangle object so,at run time it will call triangle area()     
		r.area();
    }
}
==================================================================================
Homework[14 Oct2020]
--------------------------
Q1. command line input: abcd
a97b98c99d100
Q2. command line input:examination
eaiaio
Q3. command line input:examination
EXaMInATiON
Q4.command line input: Trident
tnedirT
Q5. String str="This is java programming";
This
is
java
programming
Q6. String str="This is java programming";
THIS
is
JAVA
programming
Q7. String str="welcome";
wlcm
Q8. String str="welcome";
wElcOmE
Q9. String str="This is java program";
This si java margorp
Q10. Use Dyanmic method dispatch
Employee
  da=50%
  grossSalary()
Manager
  basic=25000
  grossSalary()
Developer
   basic=20000
   grossSalary()
SalarySlip
======================================================================================
split()
-------------
This method is used to split string according to delimeter.
It returns String object.
example
  String st="This";
  String res[]=st.split("");  //split each letter
  System.out.print(res.length()); //4

class SpL
{
    public static void main(String args[])
     {
          String st="This is java";
          String res[]=st.split(" ");
          for(int i=0;i<res.length;i++)
            System.out.println(res[i]);
         
     }
}

Remove space from sentence
-------------------------------
Input="This is java programming"
output=Thisisjavaprogramming

class RemoveSp
{
    public static void main(String args[])
     {                   
          String st="This is java program", rstr="";
          String res[]=st.split(" ");
          for(int i=0;i<res.length;i++)
             rstr=rstr+res[i];
          System.out.println(rstr);
     }
}

program to print alternate word in reverse form
class AltRev
{
    public static void main(String args[])
     {                   
          String st="This is java program", rstr="";
          String res[]=st.split(" ");
          for(int i=0;i<res.length;i++)
          {
              if(i%2!=0)
               for(int j=res[i].length-1;j>=0;j--)
                 System.out.print(res[i].charAt(j));
              else
                System.out.print(" "+res[i]+" ");
          }
       }
}


String n1=" Welcome";  
String n2=" Welcome ";
String n3="Hello ";
System.out.print(n3.trim()); //Hello
System.out.print(n2.trim());  //Welcome

indexOf()
----------------
It returns first index of searching string.
 String st="Examination";
  System.out.print(st.indexOf("a"));  //2

lastIndexOf()
-----------------
It returns last index of searching string.
 String st="employee";
  System.out.print(st.lastIndexOf("e"));  //7

concat()
-------------
It combines multiple string.
String st1="Hello";
String st2="Student";
 String res=st1.concat(st2);
 System.out.print(res); //HelloStudent
==============================================================================
Homework[17Oct2020]
---------------------------------
Q1. Program to print following
   input=>welcome
   output=>WeLcOmE
Q2. program to print following
    input=>example
    output
    e
    xa
    mple
Q3. program to print following
    input=>my name is java
    output=>mY namE iS javA
Q4. program to print following
    input=>ramesh@gmail.com
    output=> 
    ramesh
    gmail.com
Q5. program to print following
    input=>
    abcf
    output=>a1b2c3f6
Q6. program to check string is palindrome or not
Q7. program to calculate interest
    abstract class CalInt
    {
       final float sr=3.0f,fr=65.f
       abstract void interest();
    }    
    class Savings[p,t]
    class Fixed[p,t]
    class Customer
Q8. program to print following
    abstract class Series
    {
       abstract void fseries(int,int);
       abstract void rseries(int,int);
    }    
    class PrintSeries
Q9. program to print following
   input=>abcd
   output=>979899100
Q10. program to decode following string
   input =>abcl
   output =>cdeo
===============================================================================
StringBuffer
---------------
It is also predefined class of java.lang package.
StringBuffer object is mutable object.
Mutable means you can modify contents of object.
 example
-----------
 StringBuffer s=new StringBuffer("Student");
   System.out.println(s);  //Student

StringBuffer class also have predefined methods.
1. append() //you can add all datatype to existing object.
    
class StDemo
  {
    public static void main(String args[])
    {
     StringBuffer s=new StringBuffer("Student");
     s.append("Hello");
     System.out.println(s);  //StudentHello
     s.append(10);
     System.out.println(s);  //StudentHello10
     s.append(10.9);
     System.out.println(s);  //StudentHello1010.9
   }
}

2. reverse() : It is used to reverse the content of StringBuffer object.
class StrRev
  {
    public static void main(String args[])
    {
     StringBuffer s=new StringBuffer("Student");
      s.reverse();
     System.out.println(s);  //tnedutS
   }
}
   
3. insert() : This method is used to insert string at particular index.
         
class MyStr
 {
       public static void main(String args[])
      {
 
        StringBuffer s=new StringBuffer("I java");
         s.insert(2,"like ");
         System.out.print(s);  //I like java
      }
}
    
This is java
T@h@i@s@ @i@s@ @j@a@v@a@



4. deleteCharAt()
    It is used to delete single character from StringBuffer object 
according to index.
class DemoDel
{
  public static void main(String args[])
  {
    StringBuffer s=new StringBuffer("Student");
    s.deleteCharAt(1);
   System.out.print(s);   //Sudent
  }
}

class DelStr
 {
       public static void main(String args[])
      {
 
        StringBuffer s=new StringBuffer("Welcome");
        for(int i=0;i<s.length();i++)
         if(i%2!=0)
          s.deleteCharAt(i);
         System.out.print(s);  //Wloe
      }
}
delete(int,int)
 It is used to delete list of characters in string using index value.
  class DelRange
  {
   public static void main(String args[])
    {
      StringBuffer s=new StringBuffer("welcome");
      s.delete(1,4);
      System.out.println(s); //wome
    }
}

5. length()
  It is used to count number of characters in object
          StringBuffer s=new StringBuffer("Welcome");
        System.out.println(s.length());  //7

6. delete(int,int)
    It is used to delete value in range.
             StringBuffer s=new StringBuffer("Welcome");
         s.delete(1,4)
        System.out.println(s);  //Wome
          
class DelRange
 {
       public static void main(String args[])
      {
 
        StringBuffer s=new StringBuffer("Welcome");
          s.delete(2,5);
         System.out.print(s); //delete 2,3,4=> weme 
      }
}
7. indexOf()
   Find the index of first occurence of the searching string
   
class SrchStr
 {
       public static void main(String args[])
      {
 
        StringBuffer s=new StringBuffer("This is a java");
          System.out.print(s.indexOf("is")); // 2
      }
}
8. lastIndexOf()
   This method is used to find last occurence of searching index.
class Srch
 {
      public static void main(String args[])
      {
 
        StringBuffer s=new StringBuffer("This is a java. java is oop based");
        System.out.print(s.lastIndexOf("is")); // 5
      }
}
  
9. codePointAt()
  This method is used to find the ASCII code of particular index.

class PAscii
 {
      public static void main(String args[])
      {
 
        StringBuffer s=new StringBuffer("ABCD");
        System.out.print(s.codePointAt(0)); // 65
      }
}
====================================================================================================
[4:09 pm, 20/10/2020] Akash Cse B: Package
--------------
It is feature of java.
Package solve the naming conflict in java.
Package combine logically related class file in folder.
package keyword is used in class declaration.
Naming convention of package is small letter.
There are two types of package.
 1) predefined package
 2) user defined package

Predefined package
----------------------
java have vast number of predefined package.
Predefined package contains many classes.
predefined package is accessed using import or fullyqualified path.
example of predefined package
-------------------------------
java.lang
java.util
java.awt.event
java.sql
java.applet
java.net

import is keyword in java.
It is used to visible contents of package.
import statement is written before class declaration.
At a time single package or class is visible.

import java.lang.*;   //visible all contents of lang folder
import java.awt.event.*;  //visible all contents of event folder/package
import java.awt.*;        //visible all contents of awt package/folder
import java.util.*;  //visible all the contents of util package/folder
import java.util.Scanner; //Visible Scanner class only

Scanner
------------
It is predefined class to take user input.
It is part of java.util package.
Scanner class is connected with predefined stream System.in.
System.in is connected with keybord.
Scanner class have predefined method to take input.
1)next()    //it takes String as input(single word only)
2)nextLine() //it takes String as input(sentence)
3)nextInt()  //It takes integer as input
4)nextFloat() //It takes float as input
5)nextDouble()  //It takes double as input
6)nextBoolean()  //It takes boolean as input
7)nextByte()
8)nextShort()
etc
All above method works with object of Scanner class.
program to take two integer as input and print
-----------------------------------
import java.util.Scanner;
class InputTwo
{
   public static void main(String args[])
   {
       Scanner sc=new Scanner(System.in);
       System.out.print("Enter first number:");
       int n1=sc.nextInt();
       System.out.print("Enter second number:");
       int n2=sc.nextInt();
      System.out.print("You have entered "+n1+" & "+n2);
   }
}

Above program using fully qualified path
----------------------------------------
package content is accessed without using import statement
Package content is accessed with full path.
Fully Qualified statement for Scanner
    java.util.Scanner sc=new java.util.Scanner(System.in);

class Input
{
   public static void main(String args[])
   {
       java.util.Scanner sc=new java.util.Scanner(System.in);
       System.out.print("Enter full Name:");
       String n=sc.nextLine();
       System.out.print("Welcome "+n);
  }
}

program to print current date and time of your system[Fully Qualified]
--------------------------------------------------------
class PrintDT
{
   public static void main(String args[])
   {
       java.util.Date d=new java.util.Date();
       System.out.print(d);
  }
}
program to print current date and time of your system[import statement]
--------------------------------------------------------
import java.util.Date;
class PDate
{
   public static void main(String args[])
   {
       Date d=new Date();
       System.out.print(d);
  }
}
===========================================================================================
Homework[19-Oct-2020]
------------------------------------------
Q1. program to print current date and time five times using loop
Q2. program to accept 3 integer as input and print their sum.
Q3. program to take name and college name as input and print.
Q4. program to accept 4 float numbers and find sum.
Q5. program to accept 1 float and 1 int and print their sum.
Q6. program to print series according to user input.
   import java.util.Scanner;
   class PSeries
   {
      public static void main(String args[])
      {
         Scanner sc=new Scanner(System.in);
         System.out.print("Enter the range:");
         int n=sc.nextInt();
         for(int i=1;i<=n;i++)
           System.out.print(" "+i);
      }
   }
Q7. program to accept two range and print series.
     Enter starting range and ending range: 10  15
     output
      10 11 12 13 14 15
Q8. program to accept number and print following output.
     Enter a number : 5    output=> 25 
     Enter a number: 4     output=> 64
Q9. program to accept number and print each digit in separate line.
     Enter a number: 36
     output:
      digit=>3
      digit=>6
Q10. program to accept len and bredth to find area,peri of rectangle.
Q11. program to accept float number and separate exponent & decimal
     import java.util.*;
     class Exp
      {
          public static void main(String args[])
          {
             Scanner sc=new Scanner(System.in);
             System.out.print("Enter a float number:");
             float n=sc.nextFloat();
             System.out.println((int)n);
             int v=(int)n;
             System.out.println(n-v);
          }
      }
Q12. program to accept sentence as input and count vowel and consonant.
Q13. program to enter four sentence and print in whatsapp messaging format.
Hello
Hi what's up
I am fine
what about you
output
---------
Hello
	Hi what's up
I am fine
	I am fine
	Thank you
===========================================================================================================
[4:09 pm, 20/10/2020]  
Package
--------------
It is feature of java.
Package solve the naming conflict in java.
Package combine logically related class file in folder.
package keyword is used in class declaration.
Naming convention of package is small letter.
There are two types of package.
 1) predefined package
 2) user defined package

Predefined package
----------------------
java have vast number of predefined package.
Predefined package contains many classes.
predefined package is accessed using import or fullyqualified path.
example of predefined package
-------------------------------
java.lang
java.util
java.awt.event
java.sql
java.applet
java.net

import is keyword in java.
It is used to visible contents of package.
import statement is written before class declaration.
At a time single package or class is visible.

import java.lang.*;   //visible all contents of lang folder
import java.awt.event.*;  //visible all contents of event folder/package
import java.awt.*;        //visible all contents of awt package/folder
import java.util.*;  //visible all the contents of util package/folder
import java.util.Scanner; //Visible Scanner class only

Scanner
------------
It is predefined class to take user input.
It is part of java.util package.
Scanner class is connected with predefined stream System.in.
System.in is connected with keybord.
Scanner class have predefined method to take input.
1)next()    //it takes String as input(single word only)
2)nextLine() //it takes String as input(sentence)
3)nextInt()  //It takes integer as input
4)nextFloat() //It takes float as input
5)nextDouble()  //It takes double as input
6)nextBoolean()  //It takes boolean as input
7)nextByte()
8)nextShort()
etc
All above method works with object of Scanner class.
program to take two integer as input and print
-----------------------------------
import java.util.Scanner;
class InputTwo
{
   public static void main(String args[])
   {
       Scanner sc=new Scanner(System.in);
       System.out.print("Enter first number:");
       int n1=sc.nextInt();
       System.out.print("Enter second number:");
       int n2=sc.nextInt();
      System.out.print("You have entered "+n1+" & "+n2);
   }
}

Above program using fully qualified path
----------------------------------------
package content is accessed without using import statement
Package content is accessed with full path.
Fully Qualified statement for Scanner
    java.util.Scanner sc=new java.util.Scanner(System.in);

class Input
{
   public static void main(String args[])
   {
       java.util.Scanner sc=new java.util.Scanner(System.in);
       System.out.print("Enter full Name:");
       String n=sc.nextLine();
       System.out.print("Welcome "+n);
  }
}

program to print current date and time of your system[Fully Qualified]
--------------------------------------------------------
class PrintDT
{
   public static void main(String args[])
   {
       java.util.Date d=new java.util.Date();
       System.out.print(d);
  }
}
program to print current date and time of your system[import statement]
--------------------------------------------------------
import java.util.Date;
class PDate
{
   public static void main(String args[])
   {
       Date d=new Date();
       System.out.print(d);
  }
}
 Date
----------
It is predefined class to print current date and time of your system.
It is available in java.util package.
It is access in user class using import and fully qualified path.

import java.util.Date       //import statement
or
java.util.Date ob=new java.util.Date();  //fully qualified path

Date class have predefined methods to print date,time etc.
1) getHours()     //return hour
2) getMinutes()  //return minutes
3) getSeconds() //returns second
4) getMonth()  //returns month number[0-jan,1-Feb]
5) getDay()   //day number of current date[1-mon 2-tue]
6) getYear()  //print year 2020=>120 2019=>119 
7) getDate()   //current date of your system[21]
etc
All above method is worked with Date object.
program to print Date
------------------
class Pdt
{
   public static void main(String args[])
   {
       java.util.Date d=new java.util.Date();
       System.out.println("Today is "+d.getDate());
       System.out.println("Today is "+d.getDay());
       System.out.println(d.getYear());
    }
}
program to print current time of your system
-----------------------------------------------
class Ptim
{
   public static void main(String args[])
   {
       java.util.Date d=new java.util.Date();
       System.out.print(d.getHours()+":");
       System.out.print(d.getMinutes()+":");
       System.out.print(d.getSeconds());
    }
}

program to take input for 1d array
--------------------------------------
import java.util.Scanner;
class ArrIn
{
   public static void main(String args[])
   {
      int num[]=new int[4];
      Scanner sc=new Scanner(System.in);
      System.out.print("Enter 4 elements:");
      for(int i=0;i<4;i++)
         num[i]=sc.nextInt();
     System.out.println("You have entered :");
           for(int i=0;i<4;i++)
         System.out.print( num[i]+" ");
     }
}
program to take input for 2d array
------------------------------------
import java.util.Scanner;
class MatIn
{
   public static void main(String args[])
   {
      int mat[][]=new int[2][];
      Scanner sc=new Scanner(System.in);
      System.out.print("Enter for elements 2X3:");
      for(int i=0;i<2;i++)
       {
           mat[i]=new int[3];
           mat[i][0]=sc.nextInt();
           mat[i][1]=sc.nextInt();
           mat[i][2]=sc.nextInt();
        }            
      for(int i=0;i<mat.length;i++)
       {
         for(int j=0;j<mat[i].length;j++)
            System.out.print(mat[i][j]+"   ");
        System.out.println();
       }
  }
}
program to accept character as input
--------------------------------------
import java.util.Scanner;
class CharIn
{
     public static void main(String args[])
     {
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter character:");
         char ch=sc.next().charAt(0);
       System.out.println("You have entered :"+ch);
   }
}

 Homework[21-Oct2020]
--------------------------------
Q1. program to take vowel as input and print in reverse form
Q2. program to print current date in following format
     22-Oct-2020
Q3. program to print current time of your system.
Q4. program to accept input for 3X3 matrix and print
Q5. program to accept input for 3X3 matrix and print all diagonals
Q6. program to accept input for 3X3 matrix and print upper triangle matrix
Q7. program to accept input for 3X3 matrix and print lower triangle matrix
Q8. program to accept 10 numbers and print smallest number
Q9. program to accept 10 float numbers and print biggest number
Q10 program to accept 10 numbers and print in sorted form.
Q11. program to accept elements for 3X3 and print transpose of matrix.
[10:12 pm, 21/10/2020] Akash Cse B: Q12 program to accept input and print 
  Enter date: 22-Oct-2020
  22-10-2020
[10:12 pm, 21/10/2020] Akash Cse B: Q13  Go through about Math class and their methods
[10:22 pm, 21/10/2020] Akash Cse B: import java.util.Scanner;
class OtpGen
{
  public static void main(String arg[])
   {
     Scanner sc=new Scanner(System.in);
      int otp=(int)(100000*Math.random());
       System.out.println("OTP is "+otp);
       System.out.print(" Write otp:");
       int uotp=sc.nextInt();
       if(otp==uotp)
        System.out.println("You have entered correct OTP ");
       else
        System.out.println("Wrong OTP... ");
     }
}
 Character input
----------------
Scanner sc=new Scanner(System.in);
System.out.print("Enter a character:");
  char ch=sc.next().charAt(0);

  Enter a character:abc

AWT[Abstract Window Tootkit]
--------------------------------
It is predefined package for GUI application.
AWT package contains predefined Container and component class.
Container class add object of component class.
Container classes are:
  1) Frame
  2) Dialog
  3) Applet [applet package]

Frame
-----------
It is predefined container class.
It is used to create window.
Window have control box[minimize,maximize and close]
By default, close button is disabled in Frame.
Frame is created using constructor.

example
---------
    Frame f=new Frame();   //titleless window
    Frame f=new Frame("My Window");  //Window with title -My Window
Frame class contains predefined method
---------------------------------------
1) setSize(w,h)    //set the size of window
2) setVisible(boolean)  //It provides visibility to frame window
3) setBackground()      //Set the background color
4) setForeground()     //set the font color in window
5) setTitle(String)    //set the title of the window
6) setCursor()         //set the cursor in window
7) setResizable(boolean)  //fix the size of frame window
8) setLocation(x,y)    //provide initial position for window 
etc

Bydefault frame is invisible.
There are two techniques to create frame.
a) Use Frame class directly.
b) Inherit Frame in your class

program to create window with size[300X200]
-------------------------------------------
import java.awt.*;
class MyWin 
{
   public static void main(String args[])
   {
       Frame f=new Frame();
       f.setSize(300,200);
       f.setVisible(true);
   }
}

Window with Title
---------------------
import java.awt.*;
class MyWin 
{
   public static void main(String args[])
   {
       Frame f=new Frame("My Window");
       f.setSize(300,200);
       f.setVisible(true);
   }
}

Window with Red color
------------------------
import java.awt.*;
class RedWin 
{
   public static void main(String args[])
   {
       Frame f=new Frame("My Window");
       f.setSize(300,200);
       f.setBackground(Color.red);
       f.setLocation(510,250);
       f.setVisible(true);
   }
}

write a program to create red and green window[300x200] side by side
-----------------------------------------------------------
import java.awt.*;
class TwoWin
{
   public static void main(String args[])
   {
       Frame f=new Frame("Red Window");
       f.setSize(300,200);
       f.setBackground(Color.red);
       f.setLocation(40,50);
       f.setVisible(true);
           Frame f1=new Frame("Green Window");
       f1.setSize(300,200);
       f1.setBackground(Color.GREEN);
       f1.setLocation(350,50);
       f1.setVisible(true);
     }
}


program to create window using Inheritance
---------------------------------------------
import java.awt.*;
class Win extends Frame
{
   Win(int x,int y,Color c)
   {
       setSize(300,200);
       setBackground(c);
       setLocation(x,y);
       setVisible(true);
    }
   public static void main(String args[])
   {
       Win w1=new Win(10,40,Color.red);
       Win w2=new Win(320,40,Color.blue);
    }
}



class Demo
{
   static
    {
        System.out.println("Good Morning Student");
    }
    Demo()
    {
       System.out.println("Today is Monday");
    }
    public static void main(String args[])
    {
       Demo ob=new Demo();
        System.out.println("How are you?");
    }
}
 Static vs Instance block
----------------------------
Static
Static blocks are also called Static initialization blocks in java.
Static block executes when class is loaded in java.
static blocks executes before instance blocks in java.
Only static variables can be accessed inside static block in java
static blocks can be used for initializing static variables or calling any static method in java.
this keyword cannot be used in static block in java.

Instance
Instance blocks are also called instance initialization blocks in java
Instance block executes when instance of class is created in java.
Also known as non-static initialization block in java.
instance blocks executes after static blocks in java.
Static and non-static variables (instance variables) can be accessed inside instance block in java.
instance blocks can be used for initializing instance variables or calling any instance method in java.
this keyword can be used in instance block in java.

example
-----------
class Btest
{
   static
    {
        System.out.println("I am static block");
    }
    {
        System.out.println("I am instance/non Static block");
    }
    Btest()
    {
        System.out.println("I am Constructor");
    }
    public static void main(String args[])
    {
       Btest ob=new Btest();
    }
}

output
-----------
I am static block
I am instance/non Static block
I am Constructor
======================================================================
 Shortcut Keys System!! 

CTRL+A. . . . . . . . . . . . . . . . . Select All
CTRL+C. . . . . . . . . . . . . . . . . Copy
CTRL+X. . . . . . . . . . . . . . . . . Cut
CTRL+V. . . . . . . . . . . . . . . . . Paste
CTRL+Z. . . . . . . . . . . . . . . . . Undo
CTRL+B. . . . . . . . . . . . . . . . . Bold
CTRL+U. . . . . . . . . . . . . . . . . Underline
CTRL+I . . . . . . . . . . . . . . . . . Italic
F1 . . . . . . . . . . . . . . . . . . . . . . Help
F2 . . . . . . . . . . . . . . . . . . . . . Rename selected object
F3 . . . . . . . . . . . . . . . . . . . . . Find all files
F4 . . . . . . . . . . . . . . . . . . . . . Opens file list drop-down in dialogs
F5 . . . . . . . . . . . . . . . . . . . . . Refresh current window
F6 . . . . . . . . . . . . . . . . . . . . . Shifts focus in Windows Explorer
F10 . . . . . . . . . . . . . . . . . . . . Activates menu bar options
ALT+TAB . . . . . . . . . . . . . . . . Cycles between open applications
ALT+F4 . . . . . . . . . . . . . . . . . Quit program, close current window
ALT+F6 . . . . . . . . . . . . . . . . . Switch between current program windows
ALT+ENTER. . . . . . . . . . . . . . Opens properties dialog
ALT+SPACE . . . . . . . . . . . . . . System menu for current window
ALT+¢ . . . . . . . . . . . . . . . . . . opens drop-down lists in dialog boxes
BACKSPACE . . . . . . . . . . . . . Switch to parent folder
CTRL+ESC . . . . . . . . . . . . . . Opens Start menu
CTRL+ALT+DEL . . . . . . . . . . Opens task manager, reboots the computer
CTRL+TAB . . . . . . . . . . . . . . Move through property tabs
CTRL+SHIFT+DRAG . . . . . . . Create shortcut (also right-click, drag)
CTRL+DRAG . . . . . . . . . . . . . Copy File
ESC . . . . . . . . . . . . . . . . . . . Cancel last function
SHIFT . . . . . . . . . . . . . . . . . . Press/hold SHIFT, insert CD-ROM to bypass auto-play
SHIFT+DRAG . . . . . . . . . . . . Move file
SHIFT+F10. . . . . . . . . . . . . . . Opens context menu (same as right-click)
SHIFT+DELETE . . . . . . . . . . . Full wipe delete (bypasses Recycle Bin)
ALT+underlined letter . . . . Opens the corresponding menu
PC Keyboard Shortcuts
Document Cursor Controls
HOME . . . . . . . . . . . . . . to beginning of line or far left of field or screen
END . . . . . . . . . . . . . . . . to end of line, or far right of field or screen
CTRL+HOME . . . . . . . . to the top
CTRL+END . . . . . . . . . . to the bottom
PAGE UP . . . . . . . . . . . . moves document or dialog box up one page
PAGE DOWN . . . . . . . . moves document or dialog down one page
ARROW KEYS . . . . . . . move focus in documents, dialogs, etc.
CTRL+ > . . . . . . . . . . . . next word
CTRL+SHIFT+ > . . . . . . selects word
Windows Explorer Tree Control
Numeric Keypad * . . . Expand all under current selection
Numeric Keypad + . . . Expands current selection
Numeric Keypad – . . . Collapses current selection
¦ . . . . . . . . . . . . . . . . . . Expand current selection or go to first child
‰ . . . . . . . . . . . . . . . . . . Collapse current selection or go to parent
Special Characters
‘ Opening single quote . . . alt 0145
’ Closing single quote . . . . alt 0146
“ Opening double quote . . . alt 0147
“ Closing double quote. . . . alt 0148
– En dash. . . . . . . . . . . . . . . alt 0150
— Em dash . . . . . . . . . . . . . . alt 0151
… Ellipsis. . . . . . . . . . . . . . . . alt 0133
• Bullet . . . . . . . . . . . . . . . . alt 0149
® Registration Mark . . . . . . . alt 0174
© Copyright . . . . . . . . . . . . . alt 0169
™ Trademark . . . . . . . . . . . . alt 0153
° Degree symbol. . . . . . . . . alt 0176
¢ Cent sign . . . . . . . . . . . . . alt 0162
1⁄4 . . . . . . . . . . . . . . . . . . . . . alt 0188
1⁄2 . . . . . . . . . . . . . . . . . . . . . alt 0189
3⁄4 . . . . . . . . . . . . . . . . . . . . . alt 0190
PC Keyboard Shortcuts
Creating unique images in…
 Homework[29Oct2020] 
----------------------
Q1. program to design window with size 200 X 300 and set following
    Title=> MyWin
    background=> blue
    location=> 100[x axis], 110[y axis]
Q2. program to design window with following attribute.
    Title=> Document
    background=> gray
    location=> center
    size=> 400[width],300[height]
Q3. program to design two window with size 300 X 300
   import java.awt.*;
   class MyWin 
   {
      public static void main(String args[])
      {
         Frame f1=new Frame("Window1");
         f1.setSize(300,300);
         f1.setBackground(Color.orange);
         f1.setLocation(50,50);
         f1.setVisible(true);
         Frame f2=new Frame("Window2");
         f2.setSize(300,300);
         f2.setBackground(Color.green);
         f2.setLocation(360,50);
         f2.setVisible(true);
      }
   }
Q4 program to design 3 windows with 200 X200 in diagonal manner
     window1 with orange color
     window2 with white color
     window3 with green color
Q5 program to arrange 5 windows in bottom of your screen.
    Use different color with 200 X 200 size.
Q6 program to set four windows in each corner of your screen.
    Different color with size 200 X 200.
Q7 program to arrange four windows in all corner of screen.
Q8 program to arrange three windows in vertical manner.
Q9 program to design seven color window in overlapping manner.
Q10 program to design tri color window and arrange in vertical form
 import java.awt.*;
class WinV extends Frame
{
    WinV()
    {
       setSize(300,300);
       setBackground(new Color(238,130,238));  
       setVisible(true);
    }
   public static void main(String args[])
   {
      WinV ob=new WinV();
   }
}

Example
----------
import java.awt.*;
class WinM extends Frame
{
    WinM(int r,int g, int b)
    {
       setSize(300,300);
       Color c=new Color(r,g,b);
       setBackground(c);  
       setVisible(true);
    }
   public static void main(String args[])
   {
      WinM ob=new WinM(238,130,238);
   }
}

setTitle()
--------------
It is used to change title of the window.
It is always pass String type of value.
import java.awt.*;
class Win extends Frame
{
   Win()
   {
       setSize(300,300);
       setTitle("My Window");
       setVisible(true);
   }
  public static void main(String args[])
  {
    Win ob=new Win();
  }
}
program to pass win title using command line
---------------------------------------------
import java.awt.*;
class WinC extends Frame
{
   WinC(String t)
   {
       setSize(300,300);
       setTitle(t);
       setVisible(true);
   }
  public static void main(String args[])
  {
    WinC ob=new WinC(args[0]);
  }
}
save WinC.java
compile javac WinC.java
run java WinC mywindow
program to print current date and time in window title
-------------------------------------------------------
import java.awt.*;
class WinD extends Frame
{
   WinD()
   {
       setSize(300,300);
       setTitle(""+new java.util.Date());
       setVisible(true);
   }
  public static void main(String args[])
  {
    WinD ob=new WinD();
  }
}
setCursor()
--------------
It is used to set cursor for window.
program to set hand cursor for window
--------------------------------------
import java.awt.*;
class WinCr extends Frame
{
   WinCr()
   {
       setSize(300,300);
       setCursor(Frame.HAND_CURSOR);
       setVisible(true);
   }
  public static void main(String args[])
  {
    WinCr ob=new WinCr();
  }
}
Frame class have following Cursor
----------------------------------
  Frame.DEFAULT_CURSOR;
  Frame.CROSSHAIR_CURSOR;
  Frame.TEXT_CURSOR;
  Frame.WAIT_CURSOR;
  Frame.SW_RESIZE_CURSOR;
  Frame.SE_RESIZE_CURSOR;
  Frame.NW_RESIZE_CURSOR;
  Frame.NE_RESIZE_CURSOR;
  Frame.N_RESIZE_CURSOR;
  Frame.S_RESIZE_CURSOR;
  Frame.W_RESIZE_CURSOR;
  Frame.E_RESIZE_CURSOR;
  Frame.HAND_CURSOR;
  Frame.MOVE_CURSOR;

setResizable(boolean)
------------------------
It is used fixed the size of window.
import java.awt.*;
class WinS extends Frame
{
   WinS()
   {
       setSize(300,300);
       setResizable(false);
       setVisible(true);
   }
  public static void main(String args[])
  {
    WinS ob=new WinS();
  }
}

setUndecorated(boolean)
-----------------------------
It is used to remove decoration of window[remove title bar and border].
import java.awt.*;
class WinDc extends Frame
{
   WinDc()
   {
       setSize(300,300);
       setLocation(50,70);
       setBackground(Color.blue);
       setUndecorated(true);
       setVisible(true);
   }
  public static void main(String args[])
  {
    WinDc ob=new WinDc();
  }
}


Dialog
------------
It is predefined container class of awt package.
It contains only close button in control box.
Dialog is create with the help of Frame object.
By default close button is disabled.
example
--------------
import java.awt.*;
class WinDi
{
   public static void main(String args[])
  {
    Frame f=new Frame();
    Dialog d=new Dialog(f);
    d.setSize(300,200);
    d.setVisible(true);
  }
}

setLayout()
---------------
It is used to set layout for window.
By default layout of window is BorderLayout.
setLayout(null);  //remove layout from window
setLayout(new FlowLayout()); //it is used to set layout type-FlowLayout

setBounds(x,y,w,h)
----------------------
It is predefined method to set bounds for component object.
layout must be null.

Button
---------------
It is component class of awt package.
It is used to create a button.
Constructor is used to create button.
add() method is used to add component object in container.

Button b=new Button();   //titleless button
Button b=new Button("OK");  //Button with OK title
Button b=new Button("+");

program to design window with OK button[Layout is default]
----------------------------------------
import java.awt.*;
class WinB extends Frame
{
  WinB()
  {
    setSize(300,200);
     Button b=new Button("OK");
     add(b);
    setVisible(true);
 
   }
   public static void main(String args[])
   {
     WinB ob=new WinB();
    }
}

import java.awt.*;
class Bdemo extends Frame
{
  Bdemo()
  {
    setSize(300,200);
    setLayout(null);
     Button b=new Button("OK");
    
     b.setBounds(100,90,100,20);
     add(b);
    setVisible(true);
 
   }
   public static void main(String args[])
   {
     Bdemo ob=new Bdemo();
    }
}

program to create two button in window
------------------------------------------
import java.awt.*;
class TwoB extends Frame
{
  TwoB()
  {
    setSize(300,200);
    setLayout(null);
     Button b1=new Button("OK");
     Button b2=new Button("Cancel");
     b2.setBackground(Color.red);
     b1.setBounds(100,75,100,20);
     b2.setBounds(100,105,100,20);
     add(b1);add(b2);
    setVisible(true);
 
   }
   public static void main(String args[])
   {
     TwoB ob=new TwoB();
    }
}
Homework[30 Oct2020]
------------------------
Q1. program to design five undecorated window on screen[4 corner + 1 center]
Q2. program to design window with six different color button[Titleless]
Q3. program to design window with three horizontal button[Ok,Cancel, Apply]
Q4. program to design window with following button[+ - X / % ]
Q5. program to design window with wait cursor.
Q6 program to design window with hand cursor.
Q7. program to design seven color undecorated window with overlapping manner.
Q8. program to design window with arranged four button in corner.
====================================================================================================
Button
------------
It is used to create button in window
Button b1=new Button("Ok");
Button b2=new Button("Cancel");

import java.awt.*;
class WinB extends Frame
{
   WinB()
   {
       setSize(400,300);
       Button b1=new Button("Ok");
       Button b2=new Button("Cancel");
       setLayout(null);
       b1.setBounds(150,100,70,20);
       b2.setBounds(150,130,70,20);
       add(b1); add(b2); 
       setVisible(true);
   }
   public static void main(String args[])
   {
      WinB ob=new WinB();
   }
}

Label
--------------
It is used to create heading in window.
It is part of awt package.
Constructor is used to create heading.

Label lb=new Label("Enter a number");
Label l1=new Label();  //titleless label
lb.setBackground(Color.blue);   //change background of label
lb.setForeground(Color.yellow);  //change font color of label

add() method is used to add label in window.
setBounds() is used to set position and size of the window.

Example
-----------
program to print welcome message in window

import java.awt.*;
class LDemo extends Frame
{
   LDemo()
   {
       setSize(400,300);
       Label l1=new Label("Welcome");
       Label l2=new Label("Student");
       setLayout(null);
       l1.setBounds(150,100,90,20);
       l2.setBounds(150,130,90,20);
       l2.setBackground(Color.black);
       l2.setForeground(Color.white);
       add(l1); add(l2); 
       setVisible(true);
   }
   public static void main(String args[])
   {
      LDemo ob=new LDemo();
   }
}

Font
--------
It is predefined class to change font,size and style.
Constructor is used to change font.
                 fontname style    size
Font f=new Font("Arial", Font.BOLD,60);
setFont() is method to add font type to component object.

import java.awt.*;
class FLDemo extends Frame
{
   FLDemo()
   {
       setSize(400,300);
       Label l1=new Label("Welcome");
       Button b=new Button("OK");
       setLayout(null);
       Font f=new Font("Arial",Font.BOLD,50);
       l1.setBounds(150,100,200,100);
       b.setBounds(150,210,150,60);
        b.setFont(new Font("Arial",Font.BOLD,30));
       l1.setFont(f);
       add(l1);add(b); 
       setVisible(true);
   }
   public static void main(String args[])
   {
      FLDemo ob=new FLDemo();
   }
}

TextField
---------------
It is used to design single line input field.
Constructor is used to create input field.
It is also part of awt package.

TextField t1=new TextField();
TextField t2=new TextField("Enter name");

It is also used to create password field.
setEchoChar() method is used to set displaying character.

TextField pass=new TextField();
 pass.setEchoChar('*');

program to design window with input and password field.
-------------------------------------------------------
import java.awt.*;
class IDemo extends Frame
{
   IDemo()
   {
       setSize(400,300);
       TextField pass=new TextField();
       pass.setEchoChar('*');
       TextField t=new TextField("Enter name");
       setLayout(null);
       pass.setBounds(150,100,100,20);
       t.setBounds(150,130,100,20);
       add(pass);add(t); 
       setVisible(true);
   }
   public static void main(String args[])
   {
      IDemo ob=new IDemo();
   }
}

program to design window with label, input field and Button
----------------------------------------------------------
import java.awt.*;
class WDemo extends Frame
{
   WDemo()
   {
       setSize(400,300);
       Label l=new Label("Enter name")
       TextField t=new TextField();
       Button b=new Button("Login");
       setLayout(null);
       l.setBounds(30,100,100,20);
       t.setBounds(140,100,100,20);
       b.setBounds(140,130,80,20);
       add(l);add(t); add(b);
       setVisible(true);
   }
   public static void main(String args[])
   {
      WDemo ob=new WDemo();
   }
}
 Homework[2Nov2020]
----------------------
Q1. Design Login Window[300X200]
      Enter Username : input field
      Enter Password : input field
                  SignIn[Button] SignUp [Button]
Q2. Design Registeration window[400x300]
       Name :	 Input field
       Regno:    Input field
       Email:	 Input field
       Phone:	 Input field
                Register[Button]
Q3. Design Indian flag using Label in window[300x200]
Q4. Design window with seven color label[300x300]
Q5. Design Dialog with three button[Ok,cancel and apply]
Q6. Design all dice[1,2,3,4,5,6] structure in window 
Q7. Design following using dialog window
      Do you want to save? [Label]
       Yes  [Button]  No[Button]
Q8. Design dialog with Ok and cancel button.
import java.awt.*;
class DiaBut
{
   public static void main(String args[])
    {
        Frame f=new Frame();
        Dialog d=new Dialog(f);
        d.setSize(200,100);
        Button b1=new Button("Ok");
        Button b2=new Button("Cancel");
        d.setLayout(null);
        b1.setBounds(50,50,60,20);
        b2.setBounds(110,50,60,20);
        d.add(b1);d.add(b2);
        d.setVisible(true);
    }
}
============================================================================
 Checkbox
------------
It is used to create checkbox and radio button.
Checkbox constructor is used to create.
In checkbox, multiple option is selected at a time.

Checkbox c1=new Checkbox("English");
Checkbox c2=new Checkbox("Hindi");
Checkbox c3=new Checkbox("Odia");
add() method is used to add checkbox in container.
setBounds() method is used to set bounds for c1,c2 and c3.

example
-----------
import java.awt.*;
class CheckDemo extends Frame
{
    CheckDemo()
    {
        setSize(300,300);
	Checkbox c1=new Checkbox("English");
	Checkbox c2=new Checkbox("Hindi");
	Checkbox c3=new Checkbox("Odia");
         setLayout(null);
         c1.setBounds(50,60,100,20);
         c2.setBounds(50,90,100,20);
         c3.setBounds(50,120,100,20); 
         add(c1);add(c2);add(c3);
        setVisible(true);
    }
   public static void main(String args[])
   {
      CheckDemo ob=new CheckDemo();
   }
}
Radiobutton
----------------
It is also created using Checkbox and CheckboxGroup class.
It is used to display option for MCQ and Gender field
Checkbox constructor is used to create.
CheckboxGroup object is used to group for single selection among multiple options.
example
-------------
 program to create gender option in frame.
---------------------------------------
import java.awt.*;
class Gender extends Frame
{
    Gender()
    {
        setSize(300,300);
        CheckboxGroup cg=new CheckboxGroup();
	Checkbox c1=new Checkbox("Male",cg,false);
	Checkbox c2=new Checkbox("Female",cg,false);
	Checkbox c3=new Checkbox("Others",cg,false);
         setLayout(null);
         c1.setBounds(50,60,100,20);
         c2.setBounds(50,90,100,20);
         c3.setBounds(50,120,100,20); 
         add(c1);add(c2);add(c3);
        setVisible(true);
    }
   public static void main(String args[])
   {
      Gender ob=new Gender();
   }
}

Choice
---------
It is predefined class to design drop down menu in window.
add() method is used to add options in Choice object.
add() method is also used to add Choice object in container.

Choice c=new Choice();
c.add("1");
c.add("2");
c.add("3");
c.add("4");

Example
import java.awt.*;
class Drop extends Frame
{
    Drop()
    {
        setSize(300,300);
     Choice c=new Choice();
	c.add("1");
	c.add("2");
	c.add("3");
	c.add("4");

      setLayout(null);
         c.setBounds(50,60,100,20);
         add(c);
        setVisible(true);
    }
   public static void main(String args[])
   {
      Drop ob=new Drop();
   }
}
 Homework[6Nov2020]
--------------------------
Q1. program to design login form
Q2. program to design month selection field using choice
Q3. program to design subject regform
     name input-TextField
     regno input-textfield
     Branch input-choice
     subject choose-Checkbox
     Gender input-radiobutton
     Submit-Button
Q4. program to design date of birth field
     date- choice
     month-choice
     year-choice
     Ok - Button
Q5. program to design food order form.
     Enter name - input [TextField]
     Enter mobile-input[TextField]
     Paneer -Checkbox
     Chicken -Checkbox
     Roti -Checkbox
     Rice -Checkbox
     Sweet -Checkbox
     Order -Button
Q6. program to design MCQ form
    Question1 What is name of java compiler? -Label
    java- radiobutton
    javac-radiobutton
    javap-radiobutton
    javad-radiobutton
    Next-button
Q7. program to design gender input form.
    Choose your Gender- label
    Male- Radiobutton
    Female-Radiobutton
    Others-Radiobutton
    ok-Button
Q8. program to design Movie ticket booking form
    Choose Movie - Label
    3 Idiots-Radiobutton
    PK -Radiobutton
    Dhamaal- Radiobutton
    Timings-choice[9-12,12-3,3-6,6-9,9-12]
    Seats- choice[1,2,3,4,5]
    Book-Button
================================================================
program to add year in choice using loop.
-------------------------------------------
import java.awt.*;
class DropY extends Frame
{
    DropY()
    {
        setSize(300,300);
     Choice c=new Choice();
     for(int i=1970;i<=2020;i++)
	c.add(""+i);
	
      setLayout(null);
         c.setBounds(50,60,100,20);
         add(c);
        setVisible(true);
    }
   public static void main(String args[])
   {
      DropY ob=new DropY();
   }
}
TextArea
-------------
It is used to create multiline input field.
Constructor is used to create TextArea.
TextArea ta=new TextArea()
width and height is controlled using setBounds().
TextArea ta=new TextArea("enter comment");

TextArea is used to create comment field,address field in form.
Example
----------
import java.awt.*;
class MyAddr extends Frame
{
    MyAddr()
    {
        setSize(300,200);
        Label l=new Label("Enter Address");
        TextArea ta=new TextArea();
        setLayout(null);
        l.setBounds(50,50,150,20);
        ta.setBounds(50,80,150,100);
        add(l); add(ta);
        setVisible(true);
    }
    public static void main(String args[])
    {
         new MyAddr();
    }
}

List
--------
It is used to create list box.
Constructor is used to create list box.
It is similar to Choice but all options are visible.
Multiple selection is possible.
add() method is used to add items in list.
setBounds() is used to set x and y axis.
List l=new List();

import java.awt.*;
class College extends Frame
{
    College()
    {
        setSize(300,200);
        Label l=new Label("Choose Address");
        List ls=new List();
         ls.add("Trident");
          ls.add("Silicon");
         ls.add("C V Raman");
         ls.add("KIIT");
        setLayout(null);
        l.setBounds(50,50,150,20);
        ls.setBounds(50,80,150,80);
        add(l); add(ls);
        setVisible(true);
    }
    public static void main(String args[])
    {
         new College();
    }
}

MenuBar
---------------
It is predefined class to create MenuBar in window.
setMenuBar() method is used to set menubar.
It is always displayed on top of the window.
MenuBar object is add object of Menu.
add() method is used.
Menu
---------
It is also predefined class to create Menu for Menubar.
Menu m1=new Menu("File");

MenuItem
-----------
It is also predefined class to create items for Menu.
 MenuItem m11=new MenuItem("New");
add() method is used to add menu item to Menu object.
m1.add(m11);

program to create menu in frame window
---------------------------------------
import java.awt.*;
class MenuDemo extends Frame
{
    MenuDemo()
    {
       setSize(300,300);
        MenuBar mb=new MenuBar();
        Menu m1=new Menu("File");
        Menu m2=new Menu("Edit");
        MenuItem m11=new MenuItem("New");
        MenuItem m12=new MenuItem("Open");
        m1.add(m11);
        m1.add(m12);
        mb.add(m1);
        mb.add(m2);
        setMenuBar(mb);
       setVisible(true);
    }
    public static void main(String args[])
    {
      MenuDemo ob=new MenuDemo();
    }
}

paint()
--------------
It is predefined method.
it is used to draw mathematical shape,image on frame window.
It is always pass reference of Graphics class.
Signature of paint() method is

  public void paint(Graphics g)
repaint() method is used to invoke paint() method.

Graphics class is also part of awt package.
Graphics class have predefined method to draw.
1) drawRect(x,y,w,h)
2) drawOval(x,y,w,h)
3) fillRect(x,y,w,h)
4) fillOval(x,y,w,h)
5) drawString(string,x,y)
6) drawLine(x1,y1,x2,y2)
7) drawImage()
8) drawArc()// six integer argument
etc

paint() always used when your class inherits Frame.
if any changes in frame,paint() method is inovked.
program to show execution of paint() method
------------------------------------------
import java.awt.*;
class PaintE extends Frame
{
    PaintE()
    {
       setSize(300,300);
       setVisible(true);
    }
   public void paint(Graphics g)
   {
     System.out.print(" painted.. ");
   }
  public static void main(String args[])
  {
      PaintE ob=new PaintE();
   }
}

program to draw Rectangle on frame window
-----------------------------------------
import java.awt.*;
class RectD extends Frame
{
    RectD()
    {
       setSize(300,300);
       setVisible(true);
    }
   public void paint(Graphics g)
   {
       g.drawRect(50,60,200,100);
   }
  public static void main(String args[])
  {
      RectD ob=new RectD();
   }
}

program to draw Rectangle on frame window[ fill color red]
-----------------------------------------
import java.awt.*;
class Rect extends Frame
{
    Rect()
    {
       setSize(300,300);
       setVisible(true);
    }
   public void paint(Graphics g)
   {
       g.setColor(Color.red);
       g.fillRect(50,60,200,100);
       g.setColor(Color.green);
       g.fillRect(80,90,200,100);
   }
  public static void main(String args[])
  {
      Rect ob=new Rect();
   }
}
==================================================================================================
Homework[7Nov2020]
--------------------------
Q1 program to design font window
Q2 program to design notepad
Q3.program to design calculator
Q4. program to design feedback form of product
     Sony LED TV  -Label
     feedback    - TextArea
     Submit    - Button
Q5. program to design like and dislike form.
     Pizza - Label
     like - radiobutton
   dislike-radiobutton
    Ok -Button
Q6. program to display name of 10 best college of India using list
     list
     OK -button
Q7. program to choose favorite color using radiobutton.
Q8. Choose election contastant attribute using checkbox.
     contastant name -Label
      Party -Label
       attributes -multiple checkboxes
       Submit-Button
Q9. Design student entry form for hostel.
   name 
   regno
   branch -radiobutton
   room -
   floor
   email
   mobile
========================================================================================
drawString()
-------------------
It is used to draw string on the screen.
It is going to pass three arguments.
It is part of Graphics class.
program to display college name
-----------------------------
import java.awt.*;
class DispName extends Frame
{
   DispName()
   {
       setSize(300,300);
      
       setVisible(true);
   }
   public void paint(Graphics g)
   {
      g.setColor(Color.red);
      g.drawString("Trident", 50,100);
   }
   public static void main(String args[])
   {
       DispName ob=new DispName();
   }
}
drawImage()
-----------------
It is used to display image on Frame window.
It is also part of Graphics class.
Image class is used.
drawImage() pass following arguments:
  -Object of Image
  -x axis
  -y axis
  -width of Image
  -height of image
  -current class object(this)
setIconImage() method is used to set icon image of your window.
import java.awt.*;
class ImgDemo extends Frame 
{
   Image im;
    ImgDemo()
    {
       setSize(400,300);
       im=Toolkit.getDefaultToolkit().getImage("avatar3.PNG");
       setIconImage(im);
       setVisible(true);
    }
    public void paint(Graphics g)
    {
        g.drawImage(im,100,80,200,170,this);
    }
    public static void main(String args[])
    {
      ImgDemo ob=new ImgDemo();
    }
}

Applet
--------------
It is predefined class of java.applet package.
It is used to create GUI application.
Applet program is also run on browser.
Browser must be java enabled.
Applet based program inherit properties of Applet class.
Applet program doesnot require main() method.
javac command compile applet program.
appletviewer command runs applet program.
public keyword is used in class.
HTML code is used to define size of applet window.
appletviewer command reads html code.
HTML code is written in comment section so compiler ignores that code.
Applet program does not have constructor.
Close button is enabled in applet window.
Applet window also have status bar and menubar.
Applet is type of container window.
Default layout of applet window is FlowLayout.
you can also add awt component in applet window.
example
--------------
program to design applet window with 300x200
import java.applet.Applet;
public class MyApp extends Applet
{

}
//<applet code="MyApp" width="300" height="200"></applet>

save with MyApp.java
compile javac MyApp.java
run appletviewer MyApp.java

Applet class have predefined methods.
1) init()
2) start()
3) stop()
4) destroy()
Execution sequence of above method is called Applet Life Cycle.
init()
------------
It is predefined method of Applet class.
It is executed once in life span of applet program.
Execution sequence is first.
All declaration,initialization are done in init() method.
Your code is override init() method of Applet.
Signature of init() method is 
  public void init()
   {}
program to create blue applet window
--------------------------------------
import java.awt.*;
import java.applet.Applet;
public class MyWin extends Applet
{
    public void init()
    {
        setBackground(Color.blue);
    }
}
//<applet code="MyWin" width="300" height="300"></applet>

save with MyWin.java
compile javac MyWin.java
run appletviewer MyWin.java
program to design ok and cancel button in Applet window
-------------------------------------------------------
import java.awt.*;
import java.applet.Applet;
public class MyCom extends Applet
{
   Button b1,b2;
    public void init()
    {
        b1=new Button("OK");
        b2=new Button("Cancel");
        add(b1);
        add(b2);
    }
}
//<applet code="MyCom" width="300" height="300"></applet>
save with MyCom.java
complie javac MyCom.java
run appletviewer MyCom.java

2)start()
------------------
It is also predefined method of Applet class.
It is executed many times in applet life cycle.
It is executed when
   -Applet is opened
   -Applet is restored/maximize
Signature of start() method is 
 public void start()
  {

  }
program to show execution sequence of init and start method
-----------------------------------------------------------
import java.applet.Applet;
public class My extends Applet
{
    public void init()
    {
       System.out.println("init is executed..");
    }
    public void start()
    {
       System.out.println("start is executed..");
    }
    
}
//<applet code="My" width="300" height="300"></applet>

3) stop()
It is predefined method of Applet class.
It is executed many times in applet life cycle.
It is invoked when
   - Applet is minimize
   - Applet is closed
Signature of stop() method is
  public void stop()
  {

  }
example
import java.applet.Applet;
public class AMethod extends Applet
{
    public void init()
    {
       System.out.println("init is executed..");
    }
    public void start()
    {
       System.out.println("start is executed..");
    }
    public void stop()
    {
       System.out.println("stop is executed..");
    }
}
//<applet code="AMethod" width="300" height="300"></applet>
save with AMethod.java
compile javac AMethod.java
Run appletviewer AMethod.java
 
4) destroy()
---------------
It is predefined method of Applet class.
It is executed once in applet life cycle.
It is executed when close is clicked.
Close button first call stop then destroy.
destroy() method removes object from the memory.
signature of destroy
  public void destroy()
  {

   }
program for applet life cycle
----------------------------------
import java.applet.Applet;
public class ApCycle extends Applet
{
    public void init()
    {
       System.out.println("init is executed..");
    }
    public void start()
    {
       System.out.println("start is executed..");
    }
    public void stop()
    {
       System.out.println("stop is executed..");
    }
    public void destroy()
    {
        System.out.println("Destroyed...");
    }    
}
//<applet code="ApCycle" width="300" height="300"></applet>
save with ApCycle.java
compile javac ApCycle.java
run appletviewer ApCycle.java

program to show execution of applet life cycle with paint() method
------------------------------------------------------------------
import java.applet.Applet;
import java.awt.*;
public class ApCycleP extends Applet
{
    public void init()
    {
       System.out.println("init is executed..");
    }
    public void start()
    {
       System.out.println("start is executed..");
    }
    public void stop()
    {
       System.out.println("stop is executed..");
    }
    public void destroy()
    {
        System.out.println("Destroyed...");
    }
    public void paint(Graphics g)
    {
       System.out.println("painted..");
    }    
}
//<applet code="ApCycleP" width="300" height="300"></applet>
========================================================================================================
 Homework[9Nov2020]
--------------------------
Q1. program to add 10 favorite cartoon character in window.
Q2. program to add photo of 10 flowers in window.
Q3. program to add 5 gif photo to window.
Q4. program to design Identity card.
Q5. program to add 10 college photo in window.
Q6. program to facebook home page
Q7. program to design login page using applet.
Q8. program to design register form using applet.
Q9. program to add Flag of 10 country in applet window.
Q10. program to add 10 software company logo in window.
================================================================================================
Write program for following
-------------------------------
Ramesh[]={"Rohit","Kamal","Amit","Umesh","Sita","Zoya","Babita"}
Suresh[]={"Sita","Somesh","Gita","Rohit"}
1) print friends of Ramesh
   All=> Rohit,Kamal,Amit,Umesh,Sita,Zoya,Babita
   Comman friends=>Rohit,Sita
   Suggested friend=>Somesh,Gita
2) print friends of Suresh
   All=>Sita,Somesh,Gita,Rohit
   Comman friends=>Sita,Rohit
   Suggested friend=> Kamal,Amit,Umesh,Zoya,Babita
=======================================================================================================
Userdefined package
------------------------
package keyword is used with class declaration
package based class must be public otherwise not visible.
package name is written in small letters.
package store logically related class file in folder/directory.
package content is accessed using fully qualified path or import statement.

package my;         
public class Demo     //stores in my package
{
   public void show()
   {
       System.out.println("I am show() method of my package");
   }
}
save with Demo.java
compile javac -d . Demo.java

User class is used to access contents of Demo class[my package]
import my.Demo;
class User      //stores in default package
{
  public static void main(String args[])
   {
       Demo ob=new Demo();
       ob.show();
   }
}

protected member is accessed to other package using inheritance
---------------------------------------------- ------------------
package my;
public class MDemo
{
    protected void disp()
    {
       System.out.println("I am disp of MDemo[my package]");
    }
}

save with MDemo.java
compile javac -d . MDemo.java

Protected member is not visible in other package so use inheritance
-------------------------------------------------------------------
class MUser extends my.MDemo
{
    public static void main(String args[])
    {
      MUser ob=new MUser();
      ob.disp();
    }
}

Add another class in my package
--------------------------------------
package my;
public class Prog
{
  public void disp()
  {
    System.out.println("I am disp() of my");
  }
}
save with Prog.java
compile javac -d . Prog.java

-d => create new folder according to package name in current directory
. => represents current working directory

Access the contents of Userdefined package
------------------------------------------
1) using fully qualified path
2) using import statement

1)using fully qualified path
-------------------------------
In this technique, class name is written with package name.

class SUser    //it is stored in default package
{
   public static void main(String args[])
   {
        my.Prog ob=new my.Prog();
        ob.disp();
   }
}

save with SUser.java
compile javac SUser.java
run java SUser

Access static class member to other package
---------------------------------------------
package sdata;
public class Data
{
    public static int n=10;
    public static void main()
    {
         System.out.println("I am static main() of userdefined package sdata");
    } 
} 

save with Data.java
compile javac -d . Data.java

Access.java class is going to use contents of Data.java
--------------------------------------------------------
class Access
{
   public static void main(String args[])
   {
      sdata.Data.main();
      System.out.println("Value of n="+sdata.Data.n);
   }
}

2) access contents of my package using import statement
-------------------------------------------------------
import my.Prog;
import my.Demo;
import sdata.Data;
class MUsr
{
   public static void main(String args[])
   {
        Prog ob=new Prog();
        ob.disp();
        Demo ob1=new Demo()
        ob1.show();
        Data.main();
   }
}
save with MUsr.java
compile javac MUsr.java
run java MUsr

Subpackage
----------------
Package within package is called subpackage.
It is created using 
   package pack.spack;   //spack subpackage is created under pack package
   package p.pa.pb.pc;   //p=>pa=>pb=>pc
program to add DemoP.java file in subpackage
--------------------------------------------
package pack.spack;
public class DemoP
{
     public void myDetails()
     {
         System.out.println("Trident");
         System.out.println("Ramesh");
         System.out.println("Bhubaneswar");
     }
}

save with DemoP.java
compile javac -d . DemoP.java

program to access contents of subpackage
--------------------------------------------
Access using import or fully qualified path.

import pack.spack.DemoP;
class MyUser
{
   public static void main(String args[])
   {
        DemoP ob=new DemoP();
         ob.myDetails();
   }
}

save with MyUser.java
compile javac MyUser.java
run java MyUser

program to add following classes in different package
------------------------------------------------------
IData.java   =>integer package
  n1=10
  n2=20
  showI()
FData.java  =>flt package
  n1=5.5
  n2=9.4
  showF()
Calculate.java
    sum()   find the sum of n1,n2

package integer;
public class IData
{
   public int n1=10;
   public int n2=20;
   public void showI()
   {
       System.out.println("n1="+n1+" n2="+n2);
   }
}
save with IData.java
compile javac -d . IData.java

package flt;
public class FData
{
     public float n1=5.5f,n2=9.4f;
    public void showF()
    {
       System.out.println("n1="+n1+" n2="+n2);
    }   
}
save with FData.java
compile javac -d . FData.java

Calculate.java file access the content of integer.IData and flt.FData class
----------------------------------------------------------------------------
class Calculate
{
   public static void main(String args[])
   {
      integer.IData ob1=new integer.IData();
      flt.FData ob2=new flt.FData();
      System.out.println("Result="+(ob1.n1+ob1.n2+ob2.n1+ob2.n2));     
   }
}

program to add Input.java  in inio package
----------------------------------------------------------
package inio;
import java.util.Scanner;
public class Input 
{
    public void inData()
    {
         Scanner sc=new Scanner(System.in);
          System.out.print("Enter two value to find sum:");
          int n1=sc.nextInt();
          int n2=sc.nextInt();
         System.out.println("Result="+(n1+n2));
    }
}
save with Input.java
compile javac -d . Input.java

UAccess.java
---------------
class UAccess
{
    public static void main(String args[])
    {
       inio.Input ob=new inio.Input();
        ob.inData();         
    }
}
==================================================================================================
Homework[11Nov2020]
--------------------
Q1. program to add in pakcage and access via default package
  MData.java  =>data package
   -showE()  //show educational details    
   -showP()  //show personal details
  User.java => default package / keep main method
Q2. program to add in package and access 
  Data.java => data package
   n1=10,n2=20
  Calculate.java =>default package/ keep main method
   -sum()   //calculate addition of n1 and n2
   -multi() //calculate multiplication of n1 and n2
Q3. program to add in package and access
  SerData.java => data package
   -sr=10,er=100
  Series.java => default package/ keep main method
    -fseries()   //print sr to er
    -rseries()   //print er to sr
Q4. program to add in package and access(fully qualified path)
    Circle.java =>shape package
     -r=4,pi=3.142
     -calPeri()
     -calArea()
    Triangle.java=>shape package
     -b=10,h=7
     -calArea()
    Rectangle.java=>shape package
     -l=10,w=5
     -calPeri()
     -calArea()
   Shape.java => default package /keep main method
    access all above method
Q5. program to add in package and access(fully qualified path)
    CAlpha.java => alphabet package
     -showAlpha()  //print A to Z
    SAlpha.java => alphabet package
     -showAlpha()  //print a to z
   Alphabet.java => default package
     access showAlpha() methods
Q6. program to access contents of two different package
     IData.java => indata package
       n1=10,n2=20,n3=100
      showI()  //show n1,n2 and n3
     FData.java => fldata package
      n1=2.5,n2=8.5
      showF()   //show n1 and n2
     SumData.java => default package /keep main
       sumD()       
Q7. program to keep class in subpackage and access
   CData.java => my.college package
     dispCollege() // display college details
   Student.java => my.college package
     -studDetails() //display student details
   Btech.java => default package /keep main method
============================================================================
 Interface
-------------------
It is feature of java.
It makes rule for developer.
Interface contains abstract method and final variable.
Declaration is similar to class but can not instantiate.
Naming convention[camel case] is similar to class.
User defined class is implements interface.
All abstract method should be overrided by class.
syntax
-------
interface name
{
  abstract method;
  final variable;
}
example
-----------
interface HRule
{
    void inoutRule();  //public abstract void inoutRule();
    abstract void foodingRule();
    public abstract void playingRule();
    int n=10;    //public final int n=10;
}
interface is implemented to class using implements keyword.
class Student implements HRule
{
    public void inoutRule(){}
    public void foodingRule(){}
    public void playingRule(){}

}
Inheritance is possible in interface.
Multiple inheritance is implemented in java using interface.

interface ProgRule
{
   void inData();
   void outData();
}
save with ProgRule.java
compile javac ProgRule.java

Programmer class implements ProgRule to develop any program
------------------------------------------------------------
import java.util.Scanner;
class Programmer implements ProgRule
{
   int n1,n2;
   public void inData()
   {
       Scanner sc=new Scanner(System.in);
       System.out.print("Enter value for n1 and n2:");
       n1=sc.nextInt();  n2=sc.nextInt();
   }
   public void outData()
   {
      System.out.println("You have entered n1="+n1+" n2="+n2);
   }
   public static void main(String args[])
   {
      Programmer ob=new Programmer();
      ob.inData();
      ob.outData();
   }    
}

program to access variable contents from interface
------------------------------------------------
interface CircleValue
{
   float pi=3.142f;
   int r=5;
   void circleArea();
}
save with CircleValue.java
compile javac CircleValue.java

Circle class implements interfacee CircleValue
----------------------------------------------
class Circle implements CircleValue
{
   public void circleArea()
   {
       System.out.println("Area of circle="+pi*r*r);
   }
   public static void main(String args[])
   {
       Circle ob=new Circle();
       ob.circleArea();
   }
}
save with Circle.java
compile javac Circle.java
run java Circle

interface with inheritance
-----------------------------
extends keyword is used for inheritance.
In interface, extends keyword inherit properties of multiple interface.
syntax
-----------Single level inheritance
Q1 interface CollegeRule
{}
interface HostelRule extends CollegeRule
{}

class HostelStudent implements HostelRule
{}
-----------------------------------Multilevel inheritance
Q2 interface CollegeRule
{}
interface ClassRule extends CollegeRule
{}
interface StudRule extends ClassRule
{}

class Student implements StudRule
{
    //Student class follows all the rules of CollegeRule,ClassRule and StudRule
}
--------------------------Multiple inheritance
Q3 interface ClassRule
{}
interface LabRule
{}
interface FirstSemRule extends ClassRule,LabRule
{}

class Student implements FirstSemRule
{
  //Student class must be follow rules of ClassRule,LabRule and FirstSemRule
}


interface with user defined package
--------------------------------------
Interface is also added to userdefined package.
Package based interface is accessed using import or fullyqualified path.
package keyword is used in declaration.

package mypack;
public interface Rule
{
   void inData();
   void outData();
}
save- Rule.java
compile- javac -d . Rule.java

Use package based interface in class[import statement]
---------------------------------------------------------
import mypack.Rule;
class Myclass implements Rule
{
   public void inData(){}
   public void outData(){}
   public static void main(String args[]){}
}
Use package based interface in class[fullyqualified path]
---------------------------------------------------------
class Myclass implements mypack.Rule
{
   public void inData(){}
   public void outData(){}
   public static void main(String args[]){}
}

example
-------------------
package mypack;
public interface MRule
{
    void show();
    void dPrint();
}
save with MRule.java
compile javac -d . MRule.java


class MyProg implements mypack.MRule
{
   public void show()
   {
     System.out.println("Name :Ramesh\nBranch:CSE");
   }
   public void dPrint()
   {
     System.out.println(new java.util.Date());
   }
   public static void main(String args[])
   {
       MyProg ob=new MyProg();
       ob.show();
       ob.dPrint();
   }
}

save with MyProg.java
compile javac MyProg.java
run java MyProg
==========================================================================================
Homework[17Nov2020]
----------------------------
Q1. Implements FirstYearRule.java[dressCode(),classRule()] to Student class
Q2. Implements ProgRule.java[codingStyle(),namingRule()] to Programmer class
Q3. Implements SeriesRule and SeriesRange to Series class
     interface SeriesRule
     {
          void printS();
     } 
     interface SeriesRange
     {
         int sr=1;
         int er=10;
     }
     class Series implements SeriesRule,SeriesRange   //keep main
      {}
Q4. Implements CircleRule[calArea(),pi=3.142] to class CircleArea
Q5. Implements BankRule[calInterest(),day=30,roi=7]to Customer class
Q6. Implements AnimalRule[animalSound()] to Cat,Dog,Cow class
Q7.
 interface ClassRule
{}
interface LabRule
{}
interface FirstSemRule extends ClassRule,LabRule
{}

class Student implements FirstSemRule
{
  //Student class must be follow rules of ClassRule,LabRule and FirstSemRule
}
==========================================================================================
Exception Handling
---------------------
It is code to handle runtime abonormal situations.
Exception handling code is used to print approriate message 
before termination of the program.
Following keyword is used in Exception handling.
-----------------------------------------------
1)try	
The try keyword is used to specify a block where 
we should place exception code.
The try block must be followed by either catch or finally. 
It means, we can't use try block alone.
2)catch
The catch block is used to handle the exception.
It must be preceded by try block which means we can't use 
catch block alone.
It can be followed by finally block later.
3)finally
The finally block is used to execute the important code of the program.
It is executed whether an exception is handled or not.
It is optional block.
4)throw
The throw keyword is used to throw an exception.
5)throws	
The throws keyword is used to declare exceptions. 
It doesn't throw an exception.
It specifies that there may occur an exception in the method.
It is always used with method signature.
syntax of Exception handling code
-------------------------------------
try
{
}
catch(class)
{
  handling message
}
--------------------------
try
{
}
finally
{
}
---------------------------
try
{
}
catch(class)
{
}
finally
{
}
-------------------
try
{

}
catch(class)
{}
catch(class)
{}

------------------------------
Example to handle number divided by zero
class Number
{
   public static void main(String args[])
   {
       try
        {
           System.out.println(10/2);
           System.out.println(10/0);
           System.out.println(10/5);
        }
        catch(ArithmeticException e)
        { System.out.println("Can not be divided by zero"+e);}
   }
}
program to handle Mismatch exception
---------------------------------------
import java.util.Scanner;
class Input 
{
   public static void main(String args[])
   {
        Scanner sc=new Scanner(System.in);
       System.out.print("Enter value:");
     try{
       int n=sc.nextInt();
       System.out.print(n);
       }
      catch(InputMismatchException e)
      {System.out.print("Wrong input");}
   }
}
program to show execution of finally block
--------------------------------------------
class MyProg
{
   public static void main(String args[])
   {
       try
        {
             System.out.println(10/2);
             //System.out.println(10/0);
        }
       catch(ArithmeticException e)
       { System.out.print("can not be divided by zero");}
       finally
       {System.out.println("Thank you");}
   }
}
program to handle array index out of bounds exception
-----------------------------------------------------
class MyIndex
{
   public static void main(String args[])
   {
       int num[]={11,22};
      try
      {
        System.out.println(num[1]);
        System.out.println(num[3]);
      }
      catch(ArrayIndexOutOfBoundsException e)
      {
          System.out.println("Array index is not found");
      }
   }
}
===========================================================================================================
 finally
-----------------
It is keyword in java.
It is used in exception handling.
finally block is compulsory in terms of execution.
It is written after try or catch block.
Neccessory action is performed in finally block.
Database connection is closed using finally block.
try
{
}
finally
{
}
---------------
try
{
}
catch()
{
}
finally
{
}
program to show the execution of finally block
----------------------------------------------
class MyProg
{
   public static void main(String args[])
   {
       try
        {
           System.out.println("Result="+10/2);
           System.out.println("Result="+10/0);
       }
       finally
       {
           System.out.println("Thank You");
       }
   }
}
program to show execution of finally with catch block
-----------------------------------------------------
class MyP
{
   public static void main(String args[])
   {
       try
        {
           System.out.println("Result="+10/2);
           System.out.println("Result="+10/0);
       }
       catch(ArithmeticException e)
       {
         System.out.println("Can not be divided by zero");
       }
       finally
       {
           System.out.println("Thank You");
       }
   }
}
Generic catch block
-------------------------
It handles all types of exception.
catch block is used Exception class.
Exception is parent class so handles all types of Exception.
syntax
------
try
{
}
catch(Exception e)  //generic catch block
{
}
program to handle index out of bounds and number divided by zero using generic catch
--------------------------------------------------------------------------------------
class MyGen
{
   public static void main(String args[])
   {
      int num[]={10,2,0};
       try
        {
           System.out.println("Result="+num[0]/num[1]);
           System.out.println("Result="+num[3]/num[1]);
           System.out.println("Result="+num[0]/num[2]);

       }
       catch(Exception e)
       {
         System.out.println("wrong syntax");
       }
       finally
       {
           System.out.println("Thank You");
       }
   }
}
Generic catch block does not specify appropriate message for handling.

try with Multiple catch block
------------------------------
It handles multiple type of Exception using catch block.
try
{}
catch()
{}
catch()
{}
catch()
{}

program to handles number divided by zero and index out of bounds exception
-----------------------------------------------------------------------------
class MyCal
{
   public static void main(String args[])
   {
      int num[]={10,2,0};
       try
        {
           System.out.println("Result="+num[0]/num[1]);
           System.out.println("Result="+num[0]/num[1]);
           System.out.println("Result="+num[0]/num[2]);
       }
       catch(ArithmeticException e)
       {
         System.out.println("Can not be divided by zero");
       }
       catch(ArrayIndexOutOfBoundsException e)
       {
         System.out.println("Array index is not found..");
       }
   }
}
=========================================================================================

User defined Exception
========================
You can create a userdefined exception.
Java builtin exception can handle common type of exception.
Userdefined exception can create with help of Exception class.
Inherit the properties of Exception class in your user defined class.
throw and throws keyword is used in handling.
---------------------------------------------------

class NegativeNoException extends Exception
{
    NegativeNoException(int a)
    {
        System.out.println("NegativeNoException");
    }
}

save with NegativeNoException.java
compile javac NegativeNoException.java
--------------------------------------------------
class CheckRoll
{
   void showRoll(int r) throws NegativeNoException
   {
      if(r<0)
         throw new NegativeNoException(r);
     System.out.println("Valid roll number "+r);
   }
   public static void main(String args[])
   {
     CheckRoll s=new CheckRoll();
      try
       {
           s.showRoll(10);
           s.showRoll(-7);
       }
       catch(NegativeNoException e)
       {
           System.out.println("Not valid roll number");
       }
   }
}
------------------------------------------
save with CheckRoll.java
compile javac CheckRoll.java
run java CheckRoll
===========================================================================
Event Handling
========================
Event
 When the state of the component or object is changed an event is generated.
To handle an event, java has provided a package known as java.awt.event
Each event is an object of predefined class in java.
When we click on a Button an ActionEvent object is generated.

Event handling
-----------------
It is a mechanism through which we can handle the event generated by the program.
Event handling is divided into two parts
1) Source
2) Listener interface

Source 
------------
It is component which generates an event by the user interaction at the time of
program execution.
example: Button,List,TextField,TextArea,Choice,Window,Mouse etc.

Listener
-------------
It is predefined interface in java which provides a mechanism to execution a block
of code at the time of event generation.
Listener interface contains abstract method for action work.

Source            Event(Class)        Listener Interface
--------------    -----------------------------------------
Button           ActionEvent          ActionListener
                                         -public void actionPerformed(ActionEvent)
Mouse           MouseEvent            MouseListener
                                      -public void mouseClicked(MouseEvent)
                                      -public void mousePressed(MouseEvent)
                                      -public void mouseReleased(MouseEvent)
				      -public void mouseEntered(MouseEvent)
                                      -public void mouseExited(MouseEvent)


program to handle event for button
--------------------------------------
import java.awt.*;
import java.awt.event.*;
class MyWin extends Frame implements ActionListener
{
   Button b;
   MyWin()
   {
      setSize(400,300);
      b=new Button("ClickMe");
      setLayout(null);
      b.setBounds(150,100,100,20);
       add(b);
      b.addActionListener(this);
      setVisible(true);
   }
   public void actionPerformed(ActionEvent e)
   {
         System.out.println("I am clicked..");
   }
   public static void main(String args[])
   {
      MyWin ob=new MyWin();
   }   
}

program to print current date and time of your system using button click
-----------------------------------------------------------------------

import java.awt.*;
import java.awt.event.*;
class MyDT extends Frame implements ActionListener
{
   Button b;
   MyDT()
   {
      setSize(400,300);
      b=new Button("DateTime");
      setLayout(null);
      b.setBounds(150,100,100,20);
       add(b);
      b.addActionListener(this);
      setVisible(true);
   }
   public void actionPerformed(ActionEvent e)
   {
         System.out.println(new java.util.Date());
   }
   public static void main(String args[])
   {
      MyDT ob=new MyDT();
   }   
}

Example
---------------
program to print hello and hi student using two buttons.

import java.awt.*;
import java.awt.event.*;
class MyMSG extends Frame implements ActionListener
{
   Button b1,b2;
   MyMSG()
   {
      setSize(400,300);
      b1=new Button("Hello");
      b2=new Button("Hi");
      setLayout(null);
      b1.setBounds(150,100,100,20);
      b2.setBounds(150,130,100,20);
       add(b1);
       add(b2);
      b1.addActionListener(this);
      b2.addActionListener(this);
      setVisible(true);
   }
   public void actionPerformed(ActionEvent e)
   {
         System.out.println(e.getActionCommand()+" Student");
    }
   public static void main(String args[])
   {
      MyMSG ob=new MyMSG();
   }   
}

getSource()
-----------------
This is predefined method to return object of component class in event handling.
It returns object.

getActionCommand()
------------------
This is predefined method to return label of Component class in event handling.
It returns string .

program to change background color of window using button click.
-------------------------------------------------------------------

import java.awt.*;
import java.awt.event.*;
class ColChange extends Frame implements ActionListener
{
   Button b; int i=0;
   ColChange()
   {
      setSize(400,300);
      b=new Button("Red");
      setLayout(null);
      b.setBounds(150,100,100,20);
       add(b);
      b.addActionListener(this);
      setVisible(true);
   }
   public void actionPerformed(ActionEvent e)
   {
       if(e.getSource()==b)
        if(i%2==0)
         setBackground(Color.black);
         else
         setBackground(Color.white);
     i++;
   }
   public static void main(String args[])
   {
      ColChange ob=new ColChange();
   }   
}
program to resize window using button click
-------------------------------------------
import java.awt.*;
import java.awt.event.*;
class SizeChange extends Frame implements ActionListener
{
   Button b;
   SizeChange()
   {
      setSize(400,300);
      b=new Button("Red");
      setLayout(null);
      b.setBounds(150,100,100,20);
       add(b);
      b.addActionListener(this);
      setVisible(true);
   }
   public void actionPerformed(ActionEvent e)
   {
       if(e.getSource()==b)
         setSize(600,400);
   }
   public static void main(String args[])
   {
      SizeChange ob=new SizeChange();
   }   
}

MouseListener
---------------------
It is predefined interface to handle mouse activity[click,press,release ,enter and exited]

This listener contains following abstract method.
1) public void mouseClicked(MouseEvent)
2) public void mousePressed(MouseEvent)
3) public void mouseReleased(MouseEvent)
4) public void mouseEntered(MouseEvent)
5) public void mouseExited(MouseEvent)

program to show execution of above action work using MouseListener
------------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
class Mouse extends Frame implements MouseListener
{
   Mouse()
   {
      setSize(400,300);
      addMouseListener(this);
      setVisible(true);
   }
   public void mouseClicked(MouseEvent e)
   {
      System.out.println("x="+e.getX()+" Y="+e.getY());
    }
   public void mousePressed(MouseEvent e)
   {
        System.out.println("Pressed..");
    }
   public void mouseReleased(MouseEvent e)
   {
       System.out.println("Released..");
    }
   public void mouseEntered(MouseEvent e)
   {
       System.out.println("Entered..");
    }
   public void mouseExited(MouseEvent e)
   {
      System.out.println("Exited..");
    }
   public static void main(String args[])
   {
      Mouse ob=new Mouse();
   }   
}
 

getX()
--------------
It is predefined method to print x axis  
getY()
--------------------
It is predefined method to print y axis
Method is part of MouseEvent class.
===================================================================================
Homework[15Dec2020]
-------------------------
Q1 program to design window with three button [red,green,blue].
Q2 program to design window with seven color buttons .
Q3 program to design window with all digit buttons.
Q4 program to print vowel and consonant using buttons.
Q5 program to print date using button
Q6 program to print time using button
Q7 program to print education and hobbies using two buttons
Q8 program to shift window using left ,right,top and bottom buttons.
Q9 program to resize window using two buttons.
Q10 program to invisible using button [setVisible(false)]
=========================================================================
program to apply MouseListener and ActionListener to window
-------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
class WinBM extends Frame implements ActionListener,MouseListener
{
   Button b;
   WinBM()
   {
      setSize(400,300);
      b=new Button("OK");
      setLayout(null);
      b.setBounds(100,100,100,30);
      add(b);
      b.addActionListener(this);
      addMouseListener(this); 
      setVisible(true);
   }
   public void actionPerformed(ActionEvent e)
   {
           setBackground(Color.white);
   }
   public void mouseClicked(MouseEvent e)
   {
      System.out.println("x="+e.getX()+" Y="+e.getY());
    }
   public void mousePressed(MouseEvent e)
   {
        System.out.println("Pressed..");
    }
   public void mouseReleased(MouseEvent e)
   {
       System.out.println("Released..");
    }
   public void mouseEntered(MouseEvent e)
   {
       setBackground(Color.blue);
    }
   public void mouseExited(MouseEvent e)
   {
       setBackground(Color.yellow);
    }
   public static void main(String args[])
   {
      WinBM ob=new WinBM();
   }
}

Label
------------
getText() : fetch string from label
setText(): set string to the label

TextField
----------------
setText()  : set text to the input field
getText()  : get string from input field

Button
--------------
getActionCommand() : get button name
setLabel() : set button name

program to print message on label after button click.
-----------------------------------------------------
import java.awt.*;
import java.awt.event.*;
class ButLab extends Frame implements ActionListener
{
   Button b;
   Label l;
   ButLab()
   {
       setSize(400,300);
       b=new Button("Click");
       l=new Label();
       setLayout(null);
       b.setBounds(100,70,100,20);
       l.setBounds(70,100,150,20);
       b.addActionListener(this);
       add(b);add(l);
       setVisible(true);
   }
   public void actionPerformed(ActionEvent e)
   {
        l.setText("Button is clicked..");
   }
   public static void main(String args[])
   {
      ButLab ob=new ButLab();    
   }
}

program to change background color of label using button click.
----------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
class LabCol extends Frame implements ActionListener
{
   Button b;
   Label l;
   LabCol()
   {
       setSize(400,300);
       b=new Button("Click");
       l=new Label("");
       setLayout(null);
       b.setBounds(100,70,100,20);
       l.setBounds(70,100,150,20);
       b.addActionListener(this);
       add(b);add(l);
       setVisible(true);
   }
   public void actionPerformed(ActionEvent e)
   {
        l.setBackground(Color.red);
   }
   public static void main(String args[])
   {
      LabCol ob=new LabCol();    
   }
}

program to fetch TextField value and display with label
-------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
class Greet extends Frame implements ActionListener
{
   Button b;
   Label l,l1;
    TextField t;
   Greet()
   {
       setSize(400,300);
       b=new Button("Click");
       l=new Label("Enter Name");
        l1=new Label();
       t=new TextField();
       setLayout(null);
       l.setBounds(40,50,100,20);
       t.setBounds(150,50,100,20);
       b.setBounds(100,90,100,20);
       l1.setBounds(70,120,150,20);
       b.addActionListener(this);
       add(b);add(l);add(t);add(l1);
       setVisible(true);
   }
   public void actionPerformed(ActionEvent e)
   {
        l1.setText("Welcome "+t.getText());
   }
   public static void main(String args[])
   {
      Greet ob=new Greet();    
   }
}

program to change Button label according to click
----------------------------------------------------
import java.awt.*;
import java.awt.event.*;
class MyProg extends Frame implements ActionListener
{
   Button b;
   int i=0;
   MyProg()
   {
      setSize(400,300);
      b=new Button(""+i);
      setLayout(null);
      b.setBounds(150,100,100,20);
       add(b);
      b.addActionListener(this);
      setVisible(true);
   }
   public void actionPerformed(ActionEvent e)
   {
      i++;
      b.setLabel(""+i);     
   }
   public static void main(String args[])
   {
      MyProg ob=new MyProg();
   }   
}

program to open a new window using button click
------------------------------------------------
import java.awt.*;
class Red extends Frame
{
    Red()
    {
       setSize(300,300);
       setBackground(Color.red);
       setUndecorated(true);
       setVisible(true);
    }
} 
save with Red.java
compile javac Red.java

import java.awt.*;
import java.awt.event.*;
class MyWin extends Frame implements ActionListener
{
   Button b;
   MyWin()
   {
      setSize(400,300);
      b=new Button("Red");
      setLayout(null);
      b.setBounds(150,100,100,20);
       add(b);
      b.addActionListener(this);
      setVisible(true);
   }
   public void actionPerformed(ActionEvent e)
   {
       setVisible(false);
       new Red();
    }
   public static void main(String args[])
   {
      MyWin ob=new MyWin();
   }   
}

KeyListener
------------------
It is predefined interface to listen activity of keyboard.
Keyboard activity always returns object of the KeyEvent class.
This listener contains three abstract methods.
 1) public void keyTyped(KeyEvent)
 2) public void keyPressed(KeyEvent)
 3) public void keyReleased(KeyEvent)

program to show execution of above method using event handling
--------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
class KeyAct extends Frame implements KeyListener
{
    KeyAct()
     { 
      setSize(300,300);
      addKeyListener(this);
      setVisible(true);
     }
     public void keyTyped(KeyEvent e)
      {  System.out.println("Typed..");}
     public void keyPressed(KeyEvent e)
      {System.out.println("pressed..");}
     public void keyReleased(KeyEvent e)
     {System.out.println("Released..");}
    public static void main(String args[])
    {
       KeyAct ob=new KeyAct();
    }
}

getKeyChar()
---------------------
It returns pressing character[typing character]
This method is part of KeyEvent class.

program to print pressing character using event handling
--------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
class KeyP extends Frame implements KeyListener
{
    KeyP()
     { 
      setSize(300,300);
      addKeyListener(this);
      setVisible(true);
     }
     public void keyTyped(KeyEvent e)
      {  System.out.println("Typed.."+e.getKeyChar());}
     public void keyPressed(KeyEvent e)
      {}
     public void keyReleased(KeyEvent e)
     {}
    public static void main(String args[])
    {
       KeyP ob=new KeyP();
    }
}
===========================================================================
 Homework[20Dec2020]
---------------------
Q1 program to perform following operation using keypress event.
    o => Frame background orange
    r => Frame background red
    c => frame background cyan
    y => Frame background yellow
    d => print date and time in cmd[Sytem.out.println(new java.util.Date());]
    b=> Blue Background
    B=> Black Background
    g=> Green background
    p=> pink background
 Q2 program to design color box with 8 color button.
    Button click change the color of label.
Q3. program to design window with zoomin and zoomout.
    Change window size according to button click.
Q4. program to design window with left and right button.
     change window position using button click[use setLocation() method].
Q5. program to design window with three button [red,green ,blue]
    Button click change color of button.
Q6. program to print current date and time using button on label
Q7. program to design color identifying app
Q8. program to check login data
Q9. program to open seven color window using seven button
Q10 program to print x axis and y axis in label
======================================================================================
MouseMotionListener
---------------------
It is predefined listener interface of java.awt.event package.
This listener contains two abstract method to handle mousemove and dragged.
1. public void mouseMoved(MouseEvent)
2. public void mouseDragged(MouseEvent)
Example
----------
import java.awt.*;
import java.awt.event.*;
class MouseMv extends Frame implements MouseMotionListener
{
   Label l;
   int x=50,y=70;
   MouseMv()
   {
      setSize(300,300);
      l=new Label();
      setLayout(null);
      l.setBounds(100,70,100,20);
       add(l);
      setLocation(x,y);
     addMouseMotionListener(this);  
     setVisible(true);      
   }
   public void mouseMoved(MouseEvent e)
   {
    System.out.println("X="+e.getX()+" Y="+e.getY());
     l.setText("X="+e.getX()+" Y="+e.getY());
       if(e.getX()==e.getY())
        setBackground(Color.blue);
       else if(e.getX()>e.getY())
        setBackground(Color.yellow);
       else if(e.getX()<e.getY())
        setBackground(Color.orange);
    }
   public void mouseDragged(MouseEvent e)
   {
    System.out.println("Dragged..");
   }
   public static void main(String args[])
   {
      MouseMv ob=new MouseMv();
   }
}

WindowListener
--------------------
It is predefined listener to track window activity.
This listener contains seven abstract method.
 public void windowOpened(WindowEvent)
 public void windowClosed(WindowEvent) 
 public void windowClosing(WindowEvent)
 public void windowActivated(WindowEvent)
 public void windowDeactivated(WindowEvent)
 public void windowIconified(WindowEvent)
 public void windowDeiconified(WindowEvent)

program to trace window activity using WindowListener
-----------------------------------------------------
import java.awt.*;
import java.awt.event.*;
class WinAct extends Frame implements WindowListener
{
   int x=50,y=70;
   WinAct()
   {
      setSize(300,300);
      setLocation(x,y);
      addWindowListener(this);  
     setVisible(true);      
   }
    public void windowOpened(WindowEvent e)
    {
          System.out.println("Opened..");
    }
 public void windowClosed(WindowEvent e)
   {} 
 public void windowClosing(WindowEvent e)
   {
        System.exit(0);
   }
 public void windowActivated(WindowEvent e)
   {     System.out.println("Activated..");}
 public void windowDeactivated(WindowEvent e)
   {     System.out.println("Deactivated..");}
 public void windowIconified(WindowEvent e)
   {
            System.out.println("Minimized..");
  }
 public void windowDeiconified(WindowEvent e)
  {}

    public static void main(String args[])
   {
      WinAct ob=new WinAct();
   }
}

Multple listenter can be used with single window
====================================================
import java.awt.*;
import java.awt.event.*;
class BDemo extends Frame implements MouseMotionListener,ActionListener
{
   public void mouseMoved(MouseEvent e)
    {}
   public void mouseDragged(MouseEvent e)
   {}
   public void actionPerformed(ActionEvent e)
   {}
}


import java.awt.*;
import java.awt.event.*;
class ColorBB extends Frame implements ActionListener,WindowListener
{
    Button b1,b2,b3,b4,b5,b6,b7,b8;
    Label l;
    ColorBB()
     {
        setSize(400,300);
        b1=new Button();
        b1.setBackground(Color.red);
        b2=new Button();
        b2.setBackground(Color.yellow);
	b3=new Button();
        b3.setBackground(Color.cyan);
        b4=new Button();
        b4.setBackground(Color.black);
	b5=new Button();
        b5.setBackground(Color.orange);
        b6=new Button();
        b6.setBackground(Color.blue);
	b7=new Button();
        b7.setBackground(Color.pink);
        b8=new Button();
        b8.setBackground(Color.green);
         l=new Label();
        setLayout(null);
        b1.setBounds(20,80,80,20);
        b2.setBounds(20,110,80,20);
	b3.setBounds(20,140,80,20);
        b4.setBounds(20,170,80,20);
	b5.setBounds(20,200,80,20);
        b6.setBounds(20,230,80,20);
	b7.setBounds(20,260,80,20);
        b8.setBounds(20,290,80,20);
        l.setBounds(110,100,200,100);
        b1.addActionListener(this);
        b2.addActionListener(this);
	 b3.addActionListener(this);
        b4.addActionListener(this);
	b5.addActionListener(this);
        b6.addActionListener(this);
	 b7.addActionListener(this);
        b8.addActionListener(this);
        addWindowListener(this);
        add(b1);add(b2);add(b3);add(b4);add(b5);add(b6);add(b7);add(b8);add(l);
      setVisible(true);
     }
    public void actionPerformed(ActionEvent e)
    {
          if(e.getSource()==b1)
          {
             l.setBackground(Color.red);
          }
         else if(e.getSource()==b2)
         {
            l.setBackground(Color.yellow);
         }
	else if(e.getSource()==b3)
         {
            l.setBackground(Color.cyan);
         }
	else if(e.getSource()==b4)
         {
            l.setBackground(Color.black);
         }
	else if(e.getSource()==b5)
         {
            l.setBackground(Color.orange);
         }
	else if(e.getSource()==b6)
         {
            l.setBackground(Color.blue);
         }
	else if(e.getSource()==b7)
         {
            l.setBackground(Color.pink);
         }
	else if(e.getSource()==b8)
         {
            l.setBackground(Color.green);
         }
    }
       public void windowOpened(WindowEvent e)
    {
          System.out.println("Opened..");
    }
 public void windowClosed(WindowEvent e)
   {} 
 public void windowClosing(WindowEvent e)
   {
        System.exit(0);
   }
 public void windowActivated(WindowEvent e)
   {     System.out.println("Activated..");}
 public void windowDeactivated(WindowEvent e)
   {     System.out.println("Deactivated..");}
 public void windowIconified(WindowEvent e)
   {
            System.out.println("Minimized..");
  }
 public void windowDeiconified(WindowEvent e)
  {}

   public static void main(String args[])
   {
      ColorBB ob=new ColorBB();
   }
}
================================================================================================
ItemListener
---------------------
It is predefined listener of event package.
It is used to listen activity of Checkbox and Radiobutton.
This listener contains 1 abstract method.
    public void itemStateChanged(ItemEvent)
Checkbox activity throws object of ItemEvent.
getItem() is predefined method returns name of the selected checkbox.

program to show event handling with checkbox
----------------------------------------------
import java.awt.*;
import java.awt.event.*;
class CheckB extends Frame implements ItemListener
{
    Checkbox c1,c2;
    CheckB()
    {
          setSize(400,300);
          c1=new Checkbox("English");
          c2=new Checkbox("Hindi");
          c1.addItemListener(this);
          c2.addItemListener(this);
         setLayout(null);
         c1.setBounds(50,60,100,20);
         c2.setBounds(50,90,100,20);
         add(c1);add(c2);
        setVisible(true);
    }
   public void itemStateChanged(ItemEvent e)
   {
          System.out.println((String)e.getItem())
   }
   public static void main(String args[])
   {
      CheckB ob=new CheckB();        
   }
}
=======================================================
Event handling with Radiobutton
-----------------------------------
ItemListener is used in radio button.
Radio button is created using Checkbox and CheckboxGroup class.
addItemListener() method is applied with object of Checkbox.

example
--------------
import java.awt.*;
import java.awt.event.*;
class Radio extends Frame implements ItemListener
{
   Checkbox c1,c2;
   CheckboxGroup cg;
    Radio()
    {
       setSize(300,300);
      cg=new CheckboxGroup();
       c1=new Checkbox("Red",cg,false);
       c2=new Checkbox("Green",cg,false);
       setLayout(null);
       c1.setBounds(60,60,100,20);
       c2.setBounds(170,60,100,20);
       add(c1);add(c2);
       c1.addItemListener(this);
       c2.addItemListener(this);
       setVisible(true);
     }
    public void itemStateChanged(ItemEvent e)
    {
       System.out.println((String)e.getItem());
     }
   public static void main(String args[])
   {
         Radio ob=new Radio();
   }
}

TextListener
--------------------
It is used to provide action to input box.
This listener contains 1 abstract method.
public void textValueChanged(TextEvent);
It is always listen object of TextEvent.

import java.awt.*;
import java.awt.event.*;
class TextT extends Frame implements TextListener
{
   TextField t;
    TextT()
    {
       setSize(300,300);
       t=new TextField();
       setLayout(null);
       t.setBounds(60,60,100,20);
       add(t);
       t.addTextListener(this);
       setVisible(true);
     }
    public void textValueChanged(TextEvent e)
    {
       System.out.println(t.getText());
     }
   public static void main(String args[])
   {
         TextT ob=new TextT();
   }
}

-----------------------------------------------
program to take input from TextField and added to TextArea.

import java.awt.*;
import java.awt.event.*;
class TextI extends Frame implements TextListener
{
   TextField t;
   TextArea ta;
    TextI()
    {
       setSize(300,300);
       t=new TextField();
       ta=new TextArea();
       setLayout(null);
       t.setBounds(60,60,100,20);
       ta.setBounds(50,100,200,150);
       add(t); add(ta);
       t.addTextListener(this);
       setVisible(true);
     }
    public void textValueChanged(TextEvent e)
    {
       ta.append(t.getText());
     }
   public static void main(String args[])
   {
         TextI ob=new TextI();
   }
}

FocusListener
-----------------------
It is predefined listener of event package.
It is used to trace activity of in and out inside TextField and TextArea.
This listener contains two abstract method.
 1)public void focusGained(FocusEvent)
 2)public void focusLost(FocusEvent)
focusGained() is called when cursor in.
focusLost() is called when cursor out.
program to change lower string to upper string inside TextField
---------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
class TextB extends Frame implements FocusListener
{
   TextField t;
   Button b;
    TextB()
    {
       setSize(300,300);
       t=new TextField();
       b=new Button("Ok");
       setLayout(null);
       t.setBounds(60,60,100,20);
       b.setBounds(50,100,200,150);
       add(t); add(b);
       t.addFocusListener(this);
       setVisible(true);
     }
    public void focusGained(FocusEvent e)
    {
     t.setText("");
     }
    public void focusLost(FocusEvent e)
    {
       t.setText(t.getText().toUpperCase());
    }

   public static void main(String args[])
   {
         TextB ob=new TextB();
   }
}
======================================================================S
Homework[24Dec2020]
---------------------
Q1 program to trace keys in Frame to perform following:
  a) Press A => prints Apple in Label
  b) press b => change background to blue
  c) press o => change background to orange
  d) press f => to show Indian Flag using Label[three label] 
     release f=> Remove Flag from Frame
  e) press + => increase width and height of Frame
  f) press - => decrease width and height of Frame
Q2 program to mouse activity in frame
   a) mouse click prints x and y axis
   b) mouse double click change window color to Red
   c) mouse enter and exit change background color to black & white
   d) Mouse click prints x axis and y axis in Label
Q3. program to design window with following button.
   a) Detail Button=> prints name,email,address and mobileno in label
   b) Album Button=> show your photos in separate window
   c) Education Button=> show education details in Label
   d) Favourite button=> show favorite food  in separate window
Q4.program to show different image of santa using button click
Q5 program to change background color using radiobutton.
Q6 program to change following option using FocusListener.
    Name input=> convert to capital
    email input=> convert to small
    password input=> check length
Q7 program to input data in TextField and separate number,small,capital letter in TextField
Q8 program to input data in TextFied and print total char,total capital letter,total small letter,vowel,consonant in label    
    use TextListener
Q9 program to display floating x and y axis inside window. use MouseMotionListener
Q10 program to display different emoji of Santa using button and mouse click
=========================================================================================
Adapter class
------------------
Java provides adapter classes for the listener interface. These classes already
overiden the abstract method of listener interface.
It reduces the overhead of a programmer who always facing to overide the method
of the listener interface.
Adapter classes only available for listener interface containing more than one abstract method.
All adapter classes are available in event package.

Interface			Adapter class
--------------------------------------------------
MouseListener			MouseAdapter
MouseMotionListener		MouseMotionAdapter
KeyListener			KeyAdapter
WindowListener			WindowAdapter
FocusListener			FocusAdapter

Adapter classes are used in event handling.
There are two techniques to handle event via adapter class.
1) using inner class
2) using annanoumous object.

Inner class: class within class is called inner class.

class My
{
    My()
    {
        In ob1=new In();
          ob1.show();
    }
     void showM()
     {
          System.out.println("I am showM of My");
     }
    class In
    {
         void show()
         {
          System.out.println("I am show of In");
         }
    }
   public static void main(String args[])
   {
       My ob=new My();
       ob.showM();
   }
}

1) Event handling using Inner class
-------------------------------------
Inner class extends feature of Adapter class.
Override neccessary method for event handling.
addXXXX() method use the object of inner class.
implements listener is not used with your class.

program to change background color of window using mouseclick method.
---------------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
class MyClick extends Frame
{
     MyClick()
     {
         setSize(400,300);
          MClick ob=new MClick();
         addMouseListener(ob);
         setVisible(true);
     }
     class MClick extends MouseAdapter
      {
         public void mouseClicked(MouseEvent e)
          {
            setBackground(Color.red);
          }
      }
    public static void main(String args[])
    {
      MyClick ob1=new MyClick();
    }
}

program to enable keypress,keyrelease and windowclosing via adapter class.
----------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
class MyWin extends Frame
{
     MyWin()
     {
         setSize(400,300);
          WinC ob=new WinC();
         addKeyListener(new WinP());
         addWindowListener(ob);
         setVisible(true);
     }
     class WinC extends WindowAdapter
      {
         public void windowClosing(WindowEvent e)
          {
             System.exit(0);
          }
      }
     class WinP extends KeyAdapter
     {
            public void keyPressed(KeyEvent e)
            {
               setBackground(Color.black);
            }
            public void keyReleased(KeyEvent e)
            {
               setBackground(Color.white);
            }
     }
    public static void main(String args[])
    {
      MyWin ob1=new MyWin();
    }
}


2)Annonymous Inner class
----------------------------
It is also use inner class but they donot have class and object name.
A class declaration without class name.
It is used in event handling.

program to close window using adapter class.
------------------------------------------
import java.awt.*;
import java.awt.event.*;
class WinCl extends Frame
{
     WinCl()
     {
         setSize(400,300);
        addWindowListener(new WindowAdapter()
        { 
         public void windowClosing(WindowEvent e)
          {
             System.exit(0);
          }
      });
         setVisible(true);
     }
     public static void main(String args[])
    {
      WinCl ob1=new WinCl();
    }
}
===========================================================================
Homework[28Dec2020]
-----------------------
Q1 program to add photo in window. Activate + and - button for zoom
Q2 program to event handling with choice.
import java.awt.*;
import  java.awt.event.*;
class ChoiceE extends Frame implements ActionListener
{
     Choice c;
       Button b;
     Label l;
     ChoiceE()
      {
        setSize(400,300);
          c=new Choice();
           l=new Label();
         b=new Button("OK");
         setLayout(null);
         c.setBounds(50,50,100,20); b.setBounds(160,50,80,20);
         l.setBounds(50,150,100,20);
        c.add("C++"); c.add("Java"); c.add("C");
        add(c);add(b);add(l);   
       b.addActionListener(this);
        setVisible(true);
      }
     public void actionPerformed(ActionEvent e)
     {
         l.setText("Selected "+c.getItem(c.getSelectedIndex()));
     }
    public static void main(String args[])
    {
      ChoiceE ob=new ChoiceE();
    }
}

Q3 program to change background color of window using choice.
Q4 program to design MCQ window and next button
Q5 program to use single button to print all shapes[Square,rectangle,circle]
Q6 program to handle mousepress ,move and keypress via adapter class
Q7 program to handle gained, mouseclick and windowclosing via adapter class.
Q8 program to blink two windows using sleep()
============================================================================
import java.awt.*;
import java.awt.event.*;
import java.awt.*;
class Question
{
   String qt;
   String op1,op2,op3,op4,ans;
   Question(String q,String o1,String o2,String o3,String o4,String an)
   {
        qt=q;op1=o1;op2=o2;op3=o3;op4=o4;ans=an;
   }
}
class AMCQ extends Frame implements ActionListener,ItemListener
 {
     Label l,res,head;
     int r=0,i=0;
     Checkbox b1,b2,b3,b4;
      CheckboxGroup cg;
     Button b9;
     String ans="";
     String cans="";
     Question que[];
     AMCQ()
     {
       setSize(600,400);
        setLayout(null);
       head=new Label("MCQ");
       res=new Label("Result="+0);
       cg=new CheckboxGroup();
       l=new Label();
       b1=new Checkbox("",cg,false);
       b2=new Checkbox("",cg,false);
       b3=new Checkbox("",cg,false);
       b4=new Checkbox("",cg,false);
	b9=new Button("Next");
       head.setBounds(100,30,100,20);
       res.setBounds(250,30,150,20);
       l.setBounds(50,50,200,30);
       b1.setBounds(50,90,100,30);
       b2.setBounds(160,90,100,30);
       b3.setBounds(50,130,100,30);
       b4.setBounds(160,130,100,30);
       	b9.setBounds(260,250,100,30);
	     
       add(b1);add(b2);add(b3);add(b4);add(l);add(b9);add(res);
	b1.addItemListener(this);
        b2.addItemListener(this);
        b3.addItemListener(this);
        b4.addItemListener(this);
	b9.addActionListener(this);
	setVisible(true);
       loadQue();
       repaint();
   }
    void loadQue()
    {
        que=new Question[4];
        que[0]=new Question("What is name of java compiler?","java","javac","javad","javap","javac");
        que[1]=new Question("What is name of java interpreter?","java","javac","javad","javap","java");
        que[2]=new Question("What is full form of JVM?","java video machine","java virtual machine","java van machine","none","java virtual machine");
        que[3]=new Question("What is public?","variable","keyword","method","none","keyword");
    }
    public void paint(Graphics g)
    {
           cg.setCurrent(null);
           cans=que[i].ans;
           l.setText(que[i].qt);
           b1.setLabel(que[i].op1);
           b2.setLabel(que[i].op2);
           b3.setLabel(que[i].op3);
           b4.setLabel(que[i].op4);
     }
   public void actionPerformed(ActionEvent e)
	{
          if(e.getSource()==b9)
	  {
             if(ans.equals(que[i].ans))
               r++;
               res.setText("Result="+r);
              
              if(i==que.length)
                res.setText("Result="+r);
               else
                 i++;
               repaint();	
	   }
         }
  public void itemStateChanged(ItemEvent e)
  {
       ans=(String)e.getItem();
 }	
  public static void main(String args[])
  {
   AMCQ ob=new AMCQ();
  }
}
=====================================================================================
Homework[30Dec2020]
----------------------
Q1 program to change font color of textfield using focusLost()
Q2 program to count letter,vowel and consonant using textValueChanged() method.
Q3 program to design color preview box
     Red = input box[0-255]- validated using focuslost
    Green= input box[0-255]-validated using focuslost
    Blue = input box[0-255]-validated using focuslost
    Label => show color preview
    Button
=======================================================================================
Multithreading
-----------------------
It is feature of java.
Multiple processes are run concurrently. Each process is controlled using thread.
Server program is used multithreading to handle request and response.

process
---------
Smallest unit of code that can be executed independently in own address space.

Multiprocessing
-----------------
A processor which can execute more than one process at a
 time is known as multiprocessing.

Multithreading
-----------------
Multiple sequential flow of control within a program is known as multithreading.

java provides predefined class and interface to create thread.
There are two techniques to create thread.
  1. Using Thread class
  2. Using Runnable interface
Thread and Runnable is part of java.lang package.
java.lang package is default package in java.

Thread class
-----------------
It is predefined class to create user defined thread.
Inherit the properties of Thread class in your class.
Thread class have predefined method.
  1 run()  => defines working of thread.
  2 start() => call the run method or start working of thread.
  3 sleep()
  4 getName()
  5 setName()
  6 currentThread()
  7 getPriority()
  8 setPriority()
Example
------------
   program to create two thread which prints small and capital alphabet.

 class SAlpha extends Thread
  {
     public void run()
     {
          for(char i='a';i<='z';i++)
            System.out.print(" "+i);
     }
  }
  class CAlpha extends Thread
  {
     public void run()
     {
          for(char i='A';i<='Z';i++)
            System.out.print(" "+i);
     }
  }
class MyClass
{
    public static void main(String args[])
    {
       SAlpha t1=new SAlpha();
       CAlpha t2=new CAlpha();
       t1.start();
       t2.start();
    }

}


Save with MyClass.java
compile javac MyClass.java
    CAlpha.class
    SAlpha.class
    MyClass.class   //main() method
Run java MyClass

program to print 1 to 26 and A to Z using two different thread.
 
class Number extends Thread
{
     public void run()
     {
          for(int i=1;i<=26;i++)
            System.out.print(" "+i);
     }
}
class Alpha extends Thread   
{
     public void run()
     {
          for(char i='A';i<='Z';i++)
            System.out.print(" "+i);
     }
}
class MyProg
{
    public static void main(String args[])
    {
       Number t1=new Number();
       Alpha t2=new Alpha();
        t2.start();
        t1.start();
    }
}

start()
-----------
It is predefined method of Thread class.
It is used to call run method of userdefined thread.
It is used with object of userdefined thread.
 
sleep()
---------
It is predefined method of Thread class.
It is used to suspend working of thread according to time.
sleep() method always pass time in milliseconds.
   1000ms=>1sec
It throws checked exception so always used inside try block.
It throws InterruptedException.

program to print 1 to 10 numbers using thread and printing interval is 1sec.
----------------------------------------------------------------------------
class PNumber extends Thread
{
   public void run()
   {
      try
       {
        for(int i=1;i<=10;i++)
         {
            System.out.print("\r "+i);
            sleep(1000);
         }
       }
       catch(InterruptedException e){}
   }
}
class MySeries
{
     public static void main(String args[])
    {
       PNumber t=new PNumber();
        t.start();
    }
} 


==========================
main() is also thread.

program to print 1 to 10 numbers using Main thread.
class Series
{
    public static void main(String args[])
    {
       try
       {
        for(int i=1;i<=10;i++)
         {
            System.out.print("\r "+i);
            Thread.sleep(1000);
         }
       }
       catch(InterruptedException e){}

    }
} 

program to blink
-------------------
class BlinkStr
{
    public static void main(String args[])
    {
       try
       {
        while(true)
         {
            System.out.print("\rWelcome ");
            Thread.sleep(500);
            System.out.print("\r       ");
            Thread.sleep(500);
         }
       }
       catch(InterruptedException e){}

    }
} 

Thread programming
-------------------------
program to blink label
-----------------------------
import java.awt.*;
class BlinkL extends Frame
{
   Label l;
   BlinkL()
   {
       setSize(300,300);
       l=new Label();
       setLayout(null);
       l.setBounds(60,80,100,100);
       l.setBackground(Color.red);
      add(l);
      setVisible(true);
      blink();
   }
   void blink() 
    {
      try{
         while(true)
         {
             l.setVisible(false);
             Thread.sleep(1000);
             l.setVisible(true);
             Thread.sleep(1000);
         }
       }catch(InterruptedException e) {}
    }
   public static void main(String args[])
   {
       BlinkL ob=new BlinkL();
   }
}

program to design count down window using thread
--------------------------------------------------
import java.awt.*;
class WinCount extends Frame
{
   Label l; Font f;
   WinCount()
   {
       setSize(300,300);
       l=new Label();
       setLayout(null);
        f=new Font("Arial",Font.BOLD, 100);
        l.setFont(f);  
       l.setBounds(60,80,200,200);
      add(l);
      setVisible(true);
      count();
   }
   void count() 
    {
      try{
          int i=10;
         while(i>=1)
         {
           if(i%2==0)
             setBackground(Color.red);
           if(i%2!=0)
               setBackground(Color.green);
             l.setText(""+i);
             Thread.sleep(1000);
             i--;
           
            if(i==0)
              setVisible(false);
         }
        }catch(InterruptedException e) {}
    }
   public static void main(String args[])
   {
       WinCount ob=new WinCount();
   }
}

program to reduce size of window using thread.
----------------------------------------------
import java.awt.*;
class WinSize extends Thread 
{
   Frame f;
   int w=400,h=400;
   WinSize()
    {
        f=new Frame("MyWindow");
        f.setSize(w,h);
        f.setVisible(true);
    }
   public void run()
   {
       try{
         while(true)
         {
             f.setSize(w-=7,h-=4);
               sleep(1000);
              if(w<=20||h<=20)
               f.setVisible(false);
         }
       }catch(InterruptedException e){}
   }
   public static void main(String args[])
   {
      WinSize ob=new WinSize();
      ob.start();       
   }
}
=============================================================
Homework [4Jan2021]
---------------------
Q1. Program to resize window using thread each second size is decreased by 5.
Q2. program to blink window using thread.
Q3. program to move window in left to right using thread.
Q4. program to print 65 to 90 and A to Z using two different thread.
Q5. program to blink two labels in window 
Q6. program to print countdown 10 to 1 inside window.
Q7. program to print 26 to 1 and Z to A using two different thread.
Q8. program to print table of 11 and table of 10 using two different thread.
Q9. program to print ten times 0 and ten times 1 using different thread.
Q10. program to print 5 times your name and 5 times title using different thread.
Q11. program to print table of 10 and printing interval is 1 sec using thread.
Q12. program to print all letter of input string with interval 1 sec
import java.util.*;
class PrintSt extends Thread
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter your name:");
        String s=sc.nextLine();
       try
        {
        for(int i=0;i<s.length();i++)
         {
            System.out.print(s.charAt(i));
            sleep(1000);
         }
       }catch(InterruptedException e){}
    }
}
==============================================================================
2 Using Runnable interface
-------------------------------------
It is technique to create thread.
Runnable is predefined interface of Thread class.
This interface contains abstract method that is run().
This technique is used when your class is inherited other class.
Example
-----------
program to print 1 to 10 number using thread use Runnable interface.

class PrintTen implements Runnable
{
   public void run()
   {
      for(int i=1;i<=10;i++)
       System.out.print(" "+i);
   }
   public static void main(String args[])
   {
        PrintTen ob=new PrintTen();
        Thread t=new Thread(ob);
        t.start();
   }
} 

class Name extends Thread
{
    for(int i=1;i<=10;i++)
      System.out.print("Ramesh ");
}
class Title extends Thread
{
       for(int i=1;i<=10;i++)
       System.out.print(" Singh ");
}
class RunT
{
    public static void main(String args[])
    {
        Name t1=new Name();
        Title t2=new Title();
        t1.start();
        t2.start();
    }
}

Method
------------------
currentThread()
  It is predefined method to print thread name,priority and group.
It is static method of Thread class.
program to print name of main thread ,group and priority.
-----------------------------------------------------
class MainT
{
     public static void main(String args[])
     {
          System.out.println(Thread.currentThread());
     }

}

output
--------
[Main,5,Main]

Thread name is Main, Default priority is 5 , Thread group is also Main

Example
-----------
  class My extends Thread
  {
     public void run()
     {
        System.out.println(currentThread());
          for(int i=1;i<=10;i++)
            System.out.print(" "+i);
     }
  }
  class MyT
   {
      public static void main(String args[])
      {
           My ob=new My();
          ob.setName("Series");
           ob.start();    
      }
  }
output
==============
By default, user defined thread name is thread 0.... 
[Series,5,Main]

setName()
----------
It is predefined method.
It is used to set userdefined name to thread.
It is always pass String type of argument.
        MyT ob=new MyT();
        ob.setName("Series");

getName()
--------------
It is used to fetch name of the thread.
Default name of thread is thread 0 incase of first thread.
getName() always return string type of value.

  class MyA extends Thread
  {
     public void run()
     {
        System.out.println(getName());
          for(char i='A';i<='G';i++)
            System.out.print(" "+i);
     }
  }
  class MyAlpha
   {
      public static void main(String args[])
      {
           MyA ob=new MyA();
           MyA ob1=new MyA();
           ob.start();    
           ob1.start();
      }
  }
 
getPriority()
----------------------
It is predefined method to fetch priority of thread.
Default priority of any thread is 5.
It is always return number.
It works with object of thread.

program to get priority of main thread.
-----------------------------------------
class T1 extends Thread
{
    public void run()
     {
        System.out.println("hello");
     }
}
class T2 extends Thread
{
    public void run()
     {
        System.out.println("Hi");
     }
}

class MainP
{
   public static void main(String args[])
   {
      T1 ob1=new T1();
      T2 ob2=new T2();
      ob1.setPriority(2);
       System.out.println(ob1.getPriority());
       System.out.println(ob2.getPriority());
   }
}

setPriority()
-----------------
It is predefined method to set priority to the thread.
The range of priority is 1 to 10.
  ob1.setPriority(2);  //set the priority to 2

MAX_PRIORITY  => 10
MIN_PRIORITY  =>1
NORM_PRIORITY =>5
All above priority is static variable of Thread class.
Default priority is mentioned.
  ob1.setPriority(Thread.MIN_PRIORITY);  //priority of ob1 becomes 1

program to print each letter of string after half second.
----------------------------------------------------------
class MyString extends Thread
{
   String n;  
   public void run()
   {
     try{
       for(int i=0;i<n.length();i++)
        {
            if(n.charAt(i)=='a'||n.charAt(i)=='e'||n.charAt(i)=='i'||n.charAt(i)=='o'||n.charAt(i)=='u')
             System.out.print((char)(n.charAt(i)-32));
             else
             System.out.print(n.charAt(i));
             sleep(500);
         }}catch(InterruptedException e){}
   }      
}
class MyS
{
    public static void main(String args[])
    {
      MyString ob=new MyString();
        ob.n="This is java program";
       ob.start();
    }
}
========================================================================================
Homework[7Jan2021]
-------------------------
Q1 program to move two window in opposite direction using two different thread
Q2 program to move two colored label in different direction using thread.
Q3 program to change background color of window using thread.
Q4 program to slide 5 photos of company logo   
Q5 program to display your biodata in window using thread[personal,Education,Hobbies]
Q6 program to design time slot [sec=>min=>hr]
==========================================================================================
[8:18 pm, 08/01/2021] Akash Cse B: IO package [input/output package]
===========
Java I/O stream is the flow of data that you can either read from,
 or you can write to.
It is used to perform read and write operations in file permanently.
 Java uses streams to perform these tasks.
 Java I/O stream is also called File Handling,
 or File I/O. It is available in java.io package.
Java.io package provides classes for system input and output through files,
 network streams, memory buffers, etc.
Some input-output stream will be initialized automatically by the JVM
 and these streams are available in System class as in, out, and err variable.
  System.out
  System.in
  System.err
System.out.print("Hello"); //It prints value in console/monitor
System.in.read()   //it takes input via keybord  
System.e…
[8:18 pm, 08/01/2021] Akash Cse B: Character
==============
BufferedReader is a Java class that reads text from the input stream.
 It buffers the characters so that it can get the efficient reading 
of characters, arrays, etc. It inherits the Reader class and
 makes the code efficient 
since we can read the data line-by-line with the readline() method. 
1) read()  => read char or int
2) readLine() => read string
program to read single character from keyboard
-----------------------------------------------
import java.io.*;
class InChar
{
   public static void main(String args[]) 
   {
       InputStreamReader i = new InputStreamReader(System.in);
       BufferedReader b = new BufferedReader(i);
       System.out.print("Enter a character:");
     try
      {
       char ch=(char)b.read();
       System.out.print(ch);
      }
     catch(Exception e){}
   }
}
program to take user input via BufferedReader class.
-------------------------------------------------------
import java.io.*;
class InputC
{
   public static void main(String args[]) 
   {
       InputStreamReader i = new InputStreamReader(System.in);
       BufferedReader b = new BufferedReader(i);
       System.out.print("Enter characters:");
     try
       {
        char ch;
        do
         {
          ch=(char)b.read();
          System.out.print(ch);
         }while(ch!='q');
       }
     catch(Exception e){}
   }
}
program to read string using BufferedReader class
=================================================
import java.io.*;
public class Example
{
  public static void main(String args[]) throws Exception
  {
    InputStreamReader i = new InputStreamReader(System.in);
    BufferedReader b = new BufferedReader(i);
    System.out.println("Enter Course");
    String course = b.readLine();
    System.out.pritln("Online" + course);
  }
} 
Example 2
------------
import java.io.*;
public class StExam
{
  public static void main(String args[]) throws Exception
  {
   InputStreamReader i = new InputStreamReader(System.in);
   BufferedReader b = new BufferedReader(i);
   String name = "";
   while(!name.equals("stop"))
    {
       System.out.println("Enter course:");
       name = b.readLine();
       System.out.println("Course is:" + name);
    }
   b.close();
   i.close();
  } 
}
--------------------------
program to find sum of two numbers using user input[BufferedReader]
===================================================================
import java.io.*;
public class SumTwo
{
  public static void main(String args[]) throws Exception
  {
   BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
   String num1,num2;
   System.out.print("Enter two numbers:");
       num1 = b.readLine();
       num2=  b.readLine();
    System.out.println("Sum:" + (Integer.parseInt(num1)+Integer.parseInt(num2)));
    b.close();
  } 
}
===============================================================================
FileInputStream
------------------
It is predefined class to read data from file.
read() is predefined method to read data.
read() method throws an IOException.
Incase of end of file, read() returns -1.
notepad demo.txt
demo.txt
 This is file program

ReadContent.java
import java.io.*;
class ReadContent
{
   public static void main(String args[])
    {
        
         try
          {
               FileInputStream f=new FileInputStream("demo.txt");
                int d=f.read();
                System.out.print((char)d);
                d=f.read();
                System.out.print((char)d);
                d=f.read();
                System.out.print((char)d);
               d=f.read();
                System.out.print((char)d);
               f.close();    
          }
          catch(IOException e)
          {System.out.println(e);}
    }

}


program to read contents using loop.
----------------------------------------
import java.io.*;
class ReadData
{
   public static void main(String args[])
    {
        try
          {
               FileInputStream f=new FileInputStream("ReadData.java");
                int d;
                  while((d=f.read())!=-1)
                  {
                   System.out.print((char)d);
                 }
                f.close();    
          }
          catch(IOException e)
          {System.out.println(e);}
    }
}



program to read data of file using userinput
------------------------------------------------
import java.io.*;
import java.util.*;
class ReadFile
{
   public static void main(String args[])
    {
       Scanner sc=new Scanner(System.in);
        System.out.print("Enter File name to read:");
        String fname=sc.next();
        try
          {
               FileInputStream f=new FileInputStream(fname);
                int d;
                  while((d=f.read())!=-1)
                  {
                   System.out.print((char)d);
                 }
                f.close();    
          }
          catch(IOException e)
          {System.out.println(e);}
    }
}
program to count all characters and space in file
-----------------------------------------------------
import java.io.*;
import java.util.*;
class CountFile
{
   public static void main(String args[])
    {
        int c=0;
       Scanner sc=new Scanner(System.in);
        System.out.print("Enter File name to count:");
        String fname=sc.next();
        try
          {
               FileInputStream f=new FileInputStream(fname);
                int d;
                  while((d=f.read())!=-1)
                  {
                   c++;
                 }
                System.out.print("Total Characters="+c);
                f.close();    
          }
          catch(IOException e)
          {System.out.println(e);}
    }
}

program to read contents and print in window
-----------------------------------------------
import java.awt.*;
import java.awt.event.*;
import java.io.*;
class MyReader extends Frame implements ActionListener
{
   TextField t; TextArea ta; Label l;
   Button b;
   MyReader()
   {
     setSize(400,300);
      l=new Label("Enter file name");
      t=new TextField(20);
      b=new Button("show");
      ta=new TextArea(10,20);
      setLayout(new FlowLayout());
      add(l); add(t);add(ta);add(b);
      b.addActionListener(this);
     setVisible(true);
   }
   public void actionPerformed(ActionEvent e1)
   {
      try
     {
        FileInputStream f=new FileInputStream(t.getText());
         int i;
         while((i=f.read())!=-1)
         {
             ta.append(""+(char)i);
             Thread.sleep(400);
         }
        
       f.close(); 
       }
       catch(Exception e){}    
   }
   public static void main(String args[])
   {
      MyReader ob=new MyReader();          
   }
}



FileOutputStream
-----------------
It is predefined class to create a new file in program directory.
write() is predefined method to write data in file.
Constructor is used to create new file.
FileOutputStream f=new FileOutputStream("demo.txt") //create new file
FileOutputStream f=new FileOutputStream("demo.txt",true); //open in append mode

program to write single character in new file.
----------------------------------------------
import java.io.*;
class WriteFile
{
   public static void main(String args[])
   {
         try
         {
            FileOutputStream f=new FileOutputStream("demoAlpha.txt") //create new file
            f.write('B');
            f.close();
         }
         catch(IOException e){}
   }  
}
program to write ABC in file
===============================
import java.io.*;
class WriteABC
{
   public static void main(String args[])
   {
         try
         {
            FileOutputStream f=new FileOutputStream("alpha.txt") //create new file
            f.write('A');
            f.write('B');
            f.write('C');
            f.close();
         }
         catch(IOException e){}
   }  

}

program to append X in alpha.txt file
--------------------------------------
import java.io.*;
class AppX
{
   public static void main(String args[])
   {
         try
         {
            FileOutputStream f=new FileOutputStream("alpha.txt",true) //append data file
            f.write('X');
            f.close();
         }
         catch(IOException e){}
   }  

}


program to write String  into new file.
----------------------------------------------
import java.io.*;
class WriteFileB
{
   public static void main(String args[])
   {
         String name="Trident Academy of Technology";
           byte []n=name.getBytes(); //convert to byte array
         try
         {
            FileOutputStream f=new FileOutputStream("demob.txt");
            f.write(n);
            f.close();
         }
         catch(IOException e){}
   }  
}
==========================================================================================
import java.util.*;
class Check
{
   public static void main(String args[])
   {
      Scanner sc=new Scanner(System.in);
      System.out.print("Enter string:");
      String s=sc.nextLine();
       String rstr[]=s.split(" ");
       for(String st:rstr)
       {
        System.out.print(" "+st+" ");
        checkCap(st); checkSm(st); checkM(st);
        System.out.println();
       }
    }
  static void checkCap( String st)
   {
    char c;     int f=0;
      for(int i=0;i<st.length();i++)
      {
        c=st.charAt(i);
         if(c>='a'&&c<='z')
           f=1;       
      }
    if(f==0)
       System.out.print("-Capital");
   }
    static void checkSm( String st)
   {
    char c;     int f=0;
      for(int i=0;i<st.length();i++)
      {
        c=st.charAt(i);
         if(c>='A'&&c<='Z')
           f=1;       
      }
    if(f==0)
       System.out.print("-Small");
   }
   static void checkM(String st)
   {
       char c;     int f=0,f1=0;
      for(int i=0;i<st.length();i++)
      {
         c=st.charAt(i);
         if(c>='A'&&c<='Z')
           f=1;
         if(c>='a'&&c<='z')
          f1=1 ;      
      }
    if(f==1&&f1==1)
       System.out.print("-Mixed");
   }
  
}
===========================================================================================
import java.io.*;
class WinCreate
{
  public static void main(String args[])
  {
     String fc=""; int i;
     try
     {
        FileInputStream f=new FileInputStream(args[0]);
         while((i=f.read())!=-1)
           fc+=""+(char)i;  
     }
     catch(IOException e){}
     String con[]=fc.split(" ");          
     String w="";
      String dm="";
     for(String r:con)
     {
          if(r.contains("X")||r.contains("x"))
               dm=r;
          if(r.equalsIgnoreCase("Frame"))
           w="Frame";
          if(r.equalsIgnoreCase("dialog"))
            w="Dialog";
     }
      String d[]=dm.split("X");
     new Win(w,Integer.parseInt(d[0]),Integer.parseInt(d[1]));
     System.out.print(d[0]+" "+d[1]+"  "+w);    
  }
}
==========================================================================
import java.awt.*;
class Win
{
   Win(String wt,int w, int h)
   {
         if(wt.equals("Frame"))
          {
              Frame f=new Frame();
              f.setSize(w,h);
              f.setVisible(true);
          }
         if(wt.equals("Dialog"))
         {
               Frame f=new Frame();
              Dialog d=new Dialog(f);
              d.setSize(w,h);
              d.setVisible(true);
          
         }
   }
}
===============================================================================
HomeWork[13Jan2020]
======================
Q1. program to read myfile.txt and print each letter in separate line
Q2. program to read myfile.txt and print each word in separate line.
Q3. program to read myfile.txt and print vowel.
Q4. program to read myfile.txt and print consonant.
Q5. program to read myfile.txt and print content without space.
     Thisisjavaprogramming
Q6. program to read myfile.txt and print contents in capital letter.
    THIS IS JAVA PROGRAMMING
  import java.io.*;
  class PrintCap
   {
      public static void main(String args[])
       {
         try{
           FileInputStream f=new FileInputStream("myfile.txt");
           int n;
             while((n=f.read())!=-1)
             {
                  if((char)n>='a'&&(char)n>='z')
                    System.out.print((char)(n-32));
                  else
                    System.out.print((char)n);
             }
          }
          catch(IOException e){}
       }
   }
Q7 program to read contents of the file and write to new file
Q8 program to read contents of the file and write content to another file in capital.
Q9 program to read contents and separate in capcontent.txt and smallcontent.txt
Q10 program to read contents and separate capital, small, number in different file.
=================================================================================================
File   =>java.io package
==========
It is predefined class of java.io package.
It works with file and directory.
 The File class contains several methods for working with the path name, 
deleting and renaming files, creating new directories,
 listing the contents of a directory, and 
determining several common attributes of files 
and directories.
Methods
===========
1. getName() => name of current Directories/folders
2. delete() => delete file or directory
3. isFile() => return true in case of file
4. isDirectory() =>return true in case of directory/folder
5. list()=>  List[file/directory] the contents of directory
6. mkdir() => make directory
7. exists() => if file/directory exist returns true
8. mkdirs() => create multiple directories.
9. getPath()
10. getAbsolutePath() return path in string 
11. getAbsoluteFile(): Return path in object

import java.io.*;
class CheckFile
{
   public static void main(String args[])
   {

    String path="C://Users//RAHUL//Desktop//javaprog//day1//FileP.java";
    File f=new File(path);
    System.out.println(f.isFile()); //current folder name
   }
}

list()
 It is predefined method of File class.
 It returns String array.
 We can list the contents of directory or folder.
import java.io.*;
class DirList
{
   public static void main(String args[])
   {
    String path="C:/Users/RAHUL/Desktop/javaprog";
    File f=new File(path);
    String res[]=f.list();
    for(String val:res)
      System.out.println(val);
  }
}
=========================================================================================
File   =>java.io package
==========
It is predefined class of java.io package.
It works with file and directory.
 The File class contains several methods for working with the path name, 
deleting and renaming files, creating new directories,
 listing the contents of a directory, and 
determining several common attributes of files 
and directories.
Methods
===========
1. getName() => name of current Directories/folders
2. delete() => delete file or directory
3. isFile() => return true in case of file
4. isDirectory() =>return true in case of directory/folder
5. list()=>  List[file/directory] the contents of directory
6. mkdir() => make directory
7. exists() => if file/directory exist returns true
8. mkdirs() => create multiple directories.
9. getPath()
10. getAbsolutePath() return path in string 
11. getAbsoluteFile(): Return path in object

import java.io.*;
class CheckFile
{
   public static void main(String args[])
   {

    String path="C://Users//RAHUL//Desktop//javaprog//day1//FileP.java";
    File f=new File(path);
    System.out.println(f.isFile()); //current folder name
   }
}

list()
 It is predefined method of File class.
 It returns String array.
 We can list the contents of directory or folder.
import java.io.*;
class DirList
{
   public static void main(String args[])
   {
    String path="C:/Users/RAHUL/Desktop/javaprog";
    File f=new File(path);
    String res[]=f.list();
    for(String val:res)
      System.out.println(val);
  }
}

  String []name={"Sunit","Suman","Ekta","Saurav","Tejaswani"};
  for(String val:name)
    System.out.println(val);
  int num[]={10,20,30};
  for(int val:num)
   System.out.println(val);
  float marks[]={2.3f,4.5f,6.5f};
   for(float val:marks)
     System.out.println(val);





import java.io.*;
class CheckDir
{
   public static void main(String args[])
   {

    String path="C://Users//RAHUL//Desktop//javaprog//day1//";
    File f=new File(path);
    System.out.println(f.isDirectory()); //true
    System.out.println(f.isFile());   //false
   }
}

list()
------------
This method is used to list the contents of directory.
It returns String object array.
program to print contents of day1 directory
--------------------------------------------
import java.io.*;
class DirList
{
   public static void main(String args[])
   {

    String path="C://Users//RAHUL//Desktop//javaprog//day1//";
    File f=new File(path);
    String content[]=f.list();
    for(String val:content)
      System.out.println(val);
 }
}

delete()
------------
It is used to delete file from directory according to path
import java.io.*;
class DelFile
{
   public static void main(String args[])
   {

    String path="C://Users//RAHUL//Desktop//javaprog//day1//CheckDig.class";
    File f=new File(path);
     f.delete();
      System.out.println("File is deleted..");
 }
}

mkdir()
-------------
This method is used to create directory.
Path is required.
import java.io.*;
import java.util.*;
class DirC
{
   public static void main(String args[])
   {
    Scanner sc=new Scanner(System.in);
    System.out.print("Enter new directory name:");
    String d=sc.next();
    String path="C://Users//RAHUL//Desktop//javaprog//day3//"+d;
    File f=new File(path);
     f.mkdir();
      System.out.println(d+" directory is created..");
 }
}

mkdirs()
_____
This method is used to create multiple directories.
It is used to create nested directories.
  \demo\my\home  create three directories

import java.io.*;
class DirM
{
   public static void main(String args[])
   {
    String path="C://Users//RAHUL//Desktop//javaprog//day3//demo//my//home";
    File f=new File(path);
     f.mkdirs();
      System.out.println(" directories are created..");
 }
}
===================================================================================================
Homework[19Jan2021]
-----------------------------
Q1 program to create folder using frame.
Q2 program to create multiple folders and take input using frame
Q3 program to see the contents of folder in textarea .
Q4 program to see the contents of folder. print folder and file in separate textarea.
Q5 program to check whether the file exist or not
Q6 program to combine contents of two file in new file.
Q7 program to accept number and write in word format inside file.
Q8 program to accept name of three file in window and combine to new file.
   newfile.txt [writing order]
   1 line of file1
   1 line of file2
   1 line of file3
   2 line of file1
   2 line of file2
   2 line of file3
=========================================================================================
LineNumberReader
---------------------
LineNumberReader is a buffered character-input stream that keeps track
 of line numbers. It is a subclass of the BufferedReader,
 which provides additional methods setLineNumber() and getLineNumber() 
for setting and getting the current line number respectively.

Example
----------
import java.io.*;
class LineR
{
   public static void main(String args[])throws Exception
    {
       FileReader f=new FileReader("input.txt");
       LineNumberReader l=new LineNumberReader(f);
       String line=null;
      while((line=l.readLine())!=null)
        {
	 System.out.println(l.getLineNumber()+" "+line);
	}
    }
}


FilenameFilter
===============
Traverse and find all files with a certain extension only
 any do some operations on those files 
such as deleting them. This is more often required when 
you want to delete all log files from your log folder 
after certain time using your application program 
you can use FilenameFilter 
and override it’s accept(File targetDirectoty, String fileName) method,
to perform the file filtering on all files inside parameter directory.

Example to search file with char or string

import java.io.*;
public class Search
 { 
    public static void main(String[] args)
   {
      File dir = new File("E:\\jprog\\ioprog");
       class Sr implements FilenameFilter
       {
         String s;
         Sr(String s)
         {this.s=s;}
         public boolean accept (File dir, String name)
         { 
            return name.startsWith(s);
         } 
      }
       FilenameFilter filter = new Sr(args[0]);
       String[] children = dir.list(filter);
       for (int i = 0; i< children.length; i++)
        {
            String filename = children[i];
            System.out.println(filename);
       } 
   } 
}

Serialization and Deserialization
====================================
Serialization is a mechanism of converting the state of an object 
into a byte stream. 
Deserialization is the reverse process where the byte stream 
is used to recreate the actual Java object in memory. 
This mechanism is used to persist the object.
The byte stream created is platform independent.
So, the object serialized on one platform can be deserialized on
 a different platform.
It is mainly used to travel object's state on the network 
(which is known as marshaling).
Static member is not serialized.

    Serialization              Deserialization
 object => Bytestream => 1 File =>bytestream=>object
                         2 Memory
                         3 DB

To make a Java object serializable we 
implement the java.io.Serializable interface.
Serializable is a marker interface 
(has no data member and method). 
It is used to "mark" Java classes so that the objects
 of these classes may get a certain capability.

ObjectOutputStream class
The ObjectOutputStream class is used to write primitive data types,
 and Java objects to an OutputStream. Only objects that support 
the java.io.Serializable interface can be written to streams.
The ObjectOutputStream class contains writeObject()
 method for serializing an Object.

ObjectInputStream class
An ObjectInputStream deserializes objects and 
primitive data written using an ObjectOutputStream.
The ObjectInputStream class contains readObject() method 
for deserializing an object.
      
Transient Keyword
Java transient keyword is used in serialization. 
If you define any data member as transient,
 it will not be serialized.
 Student class, it has three data members id, name and age.
 If you serialize the object, all the values will be serialized but
 I don't want to serialize one value, e.g.
 age then we can declare the age data member as transient.
 transient int age;

Example
-----------
    class Stud implements Serializable
    {
       String name;int roll;
       Stud(String name,int roll)
       {
       this.name=name;this.roll=roll;
       }
    
   public static void main(String args[])
   {
       Stud s1=new Stud("Shivani",9);
       Stud s2=new Stud("Swati",30);
      try{
        FileOutputStream file = new FileOutputStream("data.txt"); 
         ObjectOutputStream out = new ObjectOutputStream(file);
             out.writeObject(s1);
             out.writeObject(s2);
            out.close();
            file.close();
  
          Stud d1=null;
          Stud d2=null;
            FileInputStream ofile = new FileInputStream("data.txt"); 
            ObjectInputStream in = new ObjectInputStream(ofile); 
            d1=(Stud)in.readObject();
            d2=(Stud)in.readObject();
            System.out.println("Name:"+d1.name);
            System.out.println("Roll:"+d1.roll);
            System.out.println("Name:"+d2.name);
            System.out.println("Roll:"+d2.roll);
            in.close();
            ofile.close();
          
         }
         catch(Exception e){} 
 }
}
==========================================================================================
Swing
--------------
javax.swing is predefined package in java.
This package is used to design GUI application.
It is different from awt[abstract window toolkit] package. 
swing package does not take the feature of OS.
swing based application is light weighted application.
swing supports PLAF(plugable look and feel).
It is more efficient and more flexible.
All component classes are defined inside swing package.
There are three containers in swing.
 1. JApplet
 2. JFrame
 3. JDialog
JApplet
------------
 It is predefined class to design window.
 Inherit the properties of JApplet class in user's class
 JApplet is sub class of Applet.
 HTML code is used to define width and height of the window.
 example
----------
  import javax.swing.*;
   public class MyApp extends JApplet
   {

   }
 //<applet code="MyApp" width="300" height="300"></applet>
save with MyApp.java
compile javac MyApp.java
run appletviewer MyApp.java

javac command is used to compile code.
appletviewer command is used to run applet program.
There are four predefined methods of JApplet
   1 public void init() =>execute once
   2 public void start() =>execute many times
   3 public void stop()  =>execute many times
   4 public void destroy() =>execute once
program to show execution sequence of init(),start(),stop() and destroy()[applet life cycle]
  import javax.swing.*;
   public class AppCycle extends JApplet
   {
        public void init()
        {System.out.println("Initialized..");}
        public void start()
        {System.out.println("Started..");}
        public void stop()
         {System.out.println("Stopped..");}
        public void destroy()
         {System.out.println("Destroyed..");}
   }
 //<applet code="AppCycle" width="300" height="300"></applet>


All declaration is done inside init() method.
Example
---------
Program to add awt button in JApplet window.

  import javax.swing.*;
  import java.awt.*;
   public class MyWin extends JApplet
   {
        Button b;
        JButton b1;
        public void init()
        {
          b=new Button("Apply");
          b1=new JButton("Apply");
          add(b);
          add(b1);
        }

   }
 //<applet code="MyWin" width="300" height="300"></applet>

example
------------
program to check execution sequence of init(),start(),stop() and destroy() in JApplet.
  import javax.swing.*;
   public class AppCycle extends JApplet
   {
      public void init()
       {
           System.out.println("I am initialized..");
       }
      public void start()
       {
           System.out.println("I am started..");
       }
      public void stop()
       {
           System.out.println("I am stopped..");
       }
     public void destroy()
       {
           System.out.println("I am destroyed..");
       }
   }
 //<applet code="AppCycle" width="300" height="300"></applet>


JFrame
-----------
JFrame is also predefined class of swing package. 
It creates window.
Constructor is used to create JFrame.

  JFrame f=new JFrame();   //window without title
  JFrame f=new JFrame("Win"); //window with title

Predefined method of JFrame
---------------------------
 1. setSize()  =>provide size of the window
 2. setVisible() => provide visibility to the window
 3. setTitle()  => provide title for window
 4. setLocation() =>provide x axis and y axis for window location
 5. setLayout() => set initial layout of window
 6. setBounds() => set the bounds of component object
 7. setResizable() => Prevent from resize
 8. setCursor()  => set initial cursor for window
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) :enable close button
setIconImage(Image image)=> set the image
getContentPane().setBackground(Color.BLUE): change background color.
etc
 cross button is enabled for visibility.
example
---------
  program to design JFrame window with 300 X300.
  import javax.swing.*;
   class MyFrame extends JFrame
   {
      MyFrame()
       {
         setSize(300,300);
         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         setVisible(true);
       }
      public static void main(String args[])
      {
         MyFrame ob=new MyFrame();
      }
   }

  program to design JFrame window with 300 X300 and Blue background.
--------------------------------------------------------------------
  import javax.swing.*;
  import java.awt.*;
   class BlueWin extends JFrame
   {
      BlueWin()
       {
         setSize(300,300);
         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         getContentPane().setBackground(Color.BLUE)
         setVisible(true);
       }
      public static void main(String args[])
      {
         BlueWin ob=new BlueWin();
      }
   }

Component class in swing
---------------------------
1. JButton
2. JLabel
3. JTextField
4. JRadioButton
5. JList
6. JTextArea
7. JCheckBox
8. JToggleButton
9. JPasswordField
etc
 

JButton : It is predefined class to design button. It is different
from awt button.It is part of javax.swing package.
JButton is able to add image.
Constructor is used to create button.
JButton b=new JButton();
JButton b=new JButton("Ok");
program to add ok and cancel button in JFrame window
-----------------------------------------------------
  import javax.swing.*;
  import java.awt.*;
   class WinB extends JFrame
   {
      JButton b2,b1;
      WinB()
       {
         setSize(300,300);
         setLayout(null);
         b1=new JButton("Ok");
         b2=new JButton("Cancel");
         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         b1.setBounds(50,90,100,20);
         b2.setBounds(160,90,100,20);
         add(b1);add(b2);
         setVisible(true);
       }
      public static void main(String args[])
      {
         WinB ob=new WinB();
      }
   }

JComboBox
------------
It is predefined class to design dropdown menu.
It is available in javax.swing package.
addItem() is predefined method to add item in combo box.
Ex
----
   JComboBox j=new JComboBox();
   j.addItem("Delhi");
   j.addItem("Mumbai");
   j.addItem("Bhubaneswar");

Example
---------
  program to design JFrame window with 300 X300.
  import javax.swing.*;
   class ComboD extends JFrame
   {
      ComboD()
       {
         setSize(300,300);
         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            JComboBox j=new JComboBox();
            j.addItem("Delhi");
            j.addItem("Mumbai");
            j.addItem("Bhubaneswar");
         setLayout(null);
         j.setBounds(100,80,100,20);  add(j);
         setVisible(true);
       }
      public static void main(String args[])
      {
         ComboD ob=new ComboD();
      }

   }

  or
    
    String it[]={"Delhi","Kolkata","Mumbai","Bhubaneswar"};
    JComboBox j=new JComboBox(it);
Action is given using ActionListener and ItemListener.

JList
--------
It represents list of text item.
It is used to create list box.
It is part of javax.swing package.
DefaultListModel class is used to create options in JList.
ex
----
    DefaultListModel <String>l=new DefaultListModel();
    l.addElement("Delhi");
    l.addElement("Mumbai");
    JList <String> city=new JList(l);
    city.setBounds(10,20,100,20);
    add(city);     
Multiple option can be selected in JList.
Example
----------
  import javax.swing.*;
   class ListD extends JFrame
   {
      ListD()
       {
         setSize(300,300);
         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
             DefaultListModel <String>l=new DefaultListModel();
	    l.addElement("Delhi");
    	    l.addElement("Mumbai");
            setLayout(null);
    	    JList <String> city=new JList(l);
           city.setBounds(10,20,100,20);
            add(city);     
          setVisible(true);
        }
      public static void main(String args[])
      {
         ListD ob=new ListD();
      }
   }

JToggleButton
----------------
It is predefined class to design toggle button.
In Toggle button, first click is on then off.
JToggleButton b=new JToggleButton();

  import javax.swing.*;
   class ButtonD extends JFrame
   {
      ButtonD()
       {
         setSize(300,300);
         JToggleButton b=new JToggleButton();
          setLayout(null);
           b.setBounds(10,20,100,50);
            add(b);     
          setVisible(true);
        }
      public static void main(String args[])
      {
         ButtonD ob=new ButtonD();
      }

   }

JRadioButton
--------------
It is used to create radio button on screen.
Gender field is designed using JRadioButton.
It works with object of ButtonGroup. It is used for making groups 
so single selection in multiple option.
  import javax.swing.*;
   class RadioD extends JFrame
   {
      RadioD()
       {
         setSize(300,300);
          JRadioButton b1=new JRadioButton("Male");
          JRadioButton b2=new JRadioButton("Female");
          ButtonGroup bg=new ButtonGroup();
          bg.add(b1);
          bg.add(b2);
          setLayout(null);
           b1.setBounds(20,20,100,20);
           b2.setBounds(20,50,100,20);
            add(b1);add(b2);     
          setVisible(true);
        }
      public static void main(String args[])
      {
         RadioD ob=new RadioD();
      }

   }

JPasswordField
------------------
It is used to design password input field in window.
Constructor is used to design.
Default character is displayed with dot.

  import javax.swing.*;
   class WinPass extends JFrame
   {
      WinPass()
       {
         setSize(300,300);
         JPasswordField p=new JPasswordField();
         setLayout(null);
         JLabel l=new JLabel("Password");
         l.setBounds(30,80,60,20);
         p.setBounds(100,80,100,20);
         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
          add(l); add(p);
         setVisible(true);
       }
      public static void main(String args[])
      {
         WinPass ob=new WinPass();
      }
   }
=============================================================================
Homework[27jan2021]
-----------------------
Q1. program to design login form using swing
Q2 program to design dob input form using swing.
Q3 program to design frame with three color button.
Q4 program to design applet with seven color button.
Q5 program to design frame with four color button. Buttons are used to change background of frame.
Q6 program to design registration form using frame.
Q7 program to design four buttons[2 awt button and 2 swing button] in frame
====================================================================================
Java Collections Framework
==========================
A collection is a data structure which contains  processes and
a set of data. The data stored in the collection is encapsulated
and the access to the data is only possible via predefined methods.
Flexible data structures in core Java library 
provides the collection framework.
Collections use internally arrays for there storage but
hide the complexity of managing the dynamic size from the developer. 
A class or interface whose declaration has one or more type parameters
is a generic class or interface.
Java collections should get parameterized with an type declaration. 
This enables the Java compiler to check if you try to use your 
collection with the correct type of objects.

Typical collections are: stacks, queues, deques, lists and trees.

Stack[LIFO]
-------
The Java Stack class represents a classical stack data structure,
where elements can be pushed to the top of the stack, and popped off 
from the top of the stack again later.

Queue[FIFO]
-------
The Java Queue interface represents a classical queue data structure,
where objects are inserted into one end of the queue, and taken off the 
queue in the other end of the queue. Insertion end is rear end.
Deletion end is called front end.

Deque
--------
The Java Deque interface represents a double ended queue, 
meaning a data structure where you can insert and remove
elements from both ends of the queue.


List
-------
List is predefined interface of java.util package.
ArrayList class and the LinkedList are implementations of the List interface.
The List interface is the base interface for collections which allows to 
store objects in a resizable container.

ArrayList
-------------
ArrayList is a part of collection framework and is present
in java.util package. It provides us dynamic arrays in Java. 
List is implemented in ArrayList.
It is slower than normal array.
ArrayList is initialized by a size, however the size can increase 
if collection grows or shrunk if objects are removed from the collection.
Java ArrayList allows us to randomly access the list.
ArrayList can not be used for primitive types, like int, char, etc.
We need a wrapper class[Integer,Float,Boolean] for such cases 
Methods of ArrayList
-----------------------
1 add()   => add element to the ArrayList
2 get(int) => get individual element from the ArrayList
3 isEmpty() => Check the list is empty or not
4 remove(int) => Remove element according to index.
5 clear() => clear the contents of arraylist.
6 subList(int,int)=> return sublist of the array.(1,3)=1,2
7 size() => Returns number of element inside ArrayList

ArrayList <String> name=new ArrayList(); //name can store only String value
ArrayList <Float> marks=new ArrayList(); //marks can store only float value
ArrayList data=new ArrayList();    //data can store any data type


program to design ArrayList for String  to store name
-----------------------------------------------------
import java.util.*;
class Name
{
   public static void main(String args[])
   {
       ArrayList <String>n=new ArrayList();
       n.add("Sunit");
       n.add("Saurav");
       n.add("Rohit");
       n.add("Tejaswani");
       n.add("Ekta");
       n.add("Suman");
      System.out.print(n);
   }
}

program to print inidividual element of ArrayList using get()
-----------------------------------------------------------------
import java.util.*;
class NameIn
{
   public static void main(String args[])
   {
       ArrayList <String>n=new ArrayList();
       n.add("Sunit");
       n.add("Saurav");
       n.add("Rohit");
       n.add("Tejaswani");
       n.add("Ekta");
       n.add("Suman");
      System.out.print(n.get(2));
      System.out.print(n.get(0));
   }
}
program to print all elements of ArrayList using loop
---------------------------------------------------------
import java.util.*;
class NameList
{
   public static void main(String args[])
   {
       ArrayList <String>n=new ArrayList();
       n.add("Sunit");
       n.add("Saurav");
       n.add("Rohit");
       n.add("Tejaswani");
       n.add("Ekta");
       n.add("Suman");
      for(int i=0;i<n.size();i++)
        System.out.println(n.get(i));
    }
}
program to print name in capital
import java.util.*;
class CapList
{
   public static void main(String args[])
   {
       ArrayList <String>n=new ArrayList();
       n.add("Sunit");
       n.add("Saurav");
       n.add("Rohit");
       n.add("Tejaswani");
       n.add("Ekta");
       n.add("Suman");
      for(int i=0;i<n.size();i++)
        System.out.println(n.get(i).toUpperCase());
    }
}
=====================================================================================================
JCheckBox
==============
It is predefined class to create checkbox.
Constructor is used to create JCheckBox.
JCheckBox c1=new JCheckBox("English");
JCheckBox c2=new JCheckBox("Hindi");
JCheckBox c3=new JCheckBox("Odia");

  import javax.swing.*;
  class MyC extends JFrame
  {
    JCheckBox c1,c2,c3;
     MyC()
      {
        setSize(400,300);
        c1=new JCheckBox("English");
        c2=new JCheckBox("Hindi");
        c3=new JCheckBox("Odia");
         setLayout(null);
         c1.setBounds(100,100,150,30);
         c2.setBounds(100,140,150,30);
         c3.setBounds(100,180,150,30);
        add(c1);add(c2);add(c3);
        setVisible(true);
      }
     public static void main(String args[])
     {
       MyC ob=new MyC();
     }
  }

JRadioButton
---------------
It is used to create radio button.
Single selection is possible among multiple options.
It works with object of ButtonGroup class.
ButtonGroup class makes group among all JRadioButton objects.

 JRadioButton r1=new JRadioButton("Male");
 JRadioButton r2=new JRadioButton("Female");
 ButtonGroup b=new ButtonGroup();
  b.add(r1);
  b.add(r2);
 r1.setBounds(100,80,100,20);
 r2.setBounds(100,110,100,20);
 add(r1);add(r2);

  import javax.swing.*;
  class MyRadio extends JFrame
  {
    JRadioButton c1,c2,c3;
    ButtonGroup b;
     MyRadio()
      {
        setSize(400,300);
       b=new ButtonGroup();
        c1=new JRadioButton("English");
        c2=new JRadioButton("Hindi");
        c3=new JRadioButton("Odia");
        b.add(c1);b.add(c2);b.add(c3);
         setLayout(null);
         c1.setBounds(100,100,150,30);
         c2.setBounds(100,140,150,30);
         c3.setBounds(100,180,150,30);
        add(c1);add(c2);add(c3);
        setVisible(true);
      }
     public static void main(String args[])
     {
       MyRadio ob=new MyRadio();
     }
  }

JPanel
========
It is predefined class of swing package.
It is used create page. It is added to frame window.
Panel behave like a container. You can add component object on panel.
Constructor is used to create panel.

JPanel p=new JPanel();
JButton b1=new JButton("Ok");
 p.add(b1); //b1 is added to panel p
 add(p);    //panel is added to JFrame container

program to appear three color panel according to button click.
--------------------------------------------------------------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
class MyApp extends JFrame implements ActionListener
{
    JPanel p1,p2,p3;
    JButton b1,b2,b3;
    MyApp()
    {
       setSize(500,500);
       b1=new JButton("Red");
       b2=new JButton("Blue");
       b3=new JButton("Yellow");
       p1=new JPanel();
       p2=new JPanel();
       p3=new JPanel();
       p1.setBackground(Color.red);
       p2.setBackground(Color.blue);
       p3.setBackground(Color.yellow);
       setLayout(null);
       b1.setBounds(50,50,80,20);
       b2.setBounds(140,50,80,20);
       b3.setBounds(230,50,80,20);
       add(b1);add(b2);add(b3);
       p1.setBounds(30,100,440,200);
       p2.setBounds(30,100,440,200);
       p3.setBounds(30,100,440,200);
       add(p1);add(p2);add(p3);
       p1.setVisible(false);
       p2.setVisible(false);
       p3.setVisible(false);
       b1.addActionListener(this);
      b2.addActionListener(this);
      b3.addActionListener(this);
      setVisible(true); 
    }
    public void actionPerformed(ActionEvent e)
    {
       if(e.getSource()==b1)
        { p1.setVisible(true);p2.setVisible(false);p3.setVisible(false);}
       else if(e.getSource()==b2)
        { p1.setVisible(false);p2.setVisible(true);p3.setVisible(false);}
       else if(e.getSource()==b3)
        { p1.setVisible(false);p2.setVisible(false);p3.setVisible(true);}
    }
   public static void main(String args[])
    {
       MyApp ob=new MyApp();
   }    
}

JCheckBox
==============
It is predefined class to design checkbox.
It defines multiple option.
You can select multiple option at a time.

 JCheckBox c1=new JCheckBox("English");
 JCheckBox c2=new JCheckBox("Hindi");
 JCheckBox c3=new JCheckBox("Odia");
 JCheckBox c4=new JCheckBox("Bengali");

example
 import javax.swing.*;
 class MyWin extends JFrame
 {
     MyWin()
     {
         setSize(400,300);
          JCheckBox c1=new JCheckBox("English");
	 JCheckBox c2=new JCheckBox("Hindi");
 	 JCheckBox c3=new JCheckBox("Odia");
 	 JCheckBox c4=new JCheckBox("Bengali");
         setLayout(null);
         c1.setBounds(50,80,100,20);
         c2.setBounds(50,110,100,20);
         c3.setBounds(50,140,100,20);
         c4.setBounds(50,170,100,20);
         add(c1);add(c2);add(c3);add(c4);
        setVisible(true);
     }
   public static void main(String args[])
    {
        MyWin ob=new MyWin();
    }
 } 

JRadioButton
----------------
It is used to create radio button.
It works with ButtonGroup object.
Multiple options are defined.
It is used to desing MCQ,gender field.
Constructor is used to create radio button.

JRadioButton c1=new JRadioButton("Male");
JRadioButton c2=new JRadioButton("FeMale");
JRadioButton c3=new JRadioButton("Other");
ButtonGroup b=new ButtonGroup();
  b.add(c1);b.add(c2); b.add(c3);

Example
---------
 import javax.swing.*;
 class MyRadio extends JFrame
 {
     MyRadio()
     {
         setSize(400,300);
       setLayout(null);
        JRadioButton c1=new JRadioButton("Male");
	JRadioButton c2=new JRadioButton("FeMale");
	JRadioButton c3=new JRadioButton("Other");
	ButtonGroup b=new ButtonGroup();
  	b.add(c1);b.add(c2); b.add(c3);
         c1.setBounds(50,80,100,20);
         c2.setBounds(50,110,100,20);
         c3.setBounds(50,140,100,20);
         add(c1);add(c2);add(c3);
       setVisible(true);
     }
   public static void main(String args[])
    {
        MyRadio ob=new MyRadio();
    }
 } 

JPasswordField
===============
It is used to design password field.
Password field display dot as a default.
Constructor is used to create password field.

 JPasswordField p=new JPasswordField();

JTextField
------------
It is used to design single line input field.
Constructor is used to create text field.

 JTextField t=new JTextField();

Example
-----------
 import javax.swing.*;
 import java.awt.*; 
class MyLogin extends JFrame
 {
     JLabel l1,l2;
     JTextField t;
     JPasswordField p; JButton b;
     MyLogin()
     {
       setSize(400,300);
       l1=new JLabel("User name");
       l2=new JLabel("Password");
        t=new JTextField();
       p=new JPasswordField();
       b=new JButton("Login");
       setLayout(null);
       l1.setBounds(30,60,150,20);
       t.setBounds(190,60,100,20);
       l2.setBounds(30,100,150,20);
        p.setBounds(190,100,100,20);
       b.setBounds(150,150,100,30);
       b.setBackground(Color.blue);
       add(l1);add(l2);add(t);add(p);add(b);
     setVisible(true);
   }
  public static void main(String args[])
  {
        MyLogin ob=new MyLogin();
  }
}

JToggleButton
-----------------
It is used to design toggle button.
Toggle means, first click on then off.
Constructor is used to create toggle button.

JToggleButton b=new JToggleButton();
JToggleButton b1=new JToggleButton("Ok");

 import javax.swing.*;
class MyDemo extends JFrame
 {
     JToggleButton b,b1;
     MyDemo()
     {
       setSize(400,300);
       b=new JToggleButton("Ok");
       b1=new JToggleButton();  
       setLayout(null);
       b1.setBounds(30,60,150,20);
       b.setBounds(150,150,100,30);
       add(b1);add(b);
     setVisible(true);
   }
  public static void main(String args[])
  {
        MyDemo ob=new MyDemo();
  }
}

JComboBox
------------
It is predefined class to design dropdown menu.
It is available in javax.swing package.
addItem() is predefined method to add item in combo box.
Ex
----
   JComboBox j=new JComboBox();
   j.addItem("Delhi");
   j.addItem("Mumbai");
   j.addItem("Bhubaneswar");

  or
    
    String it[]={"Delhi","Kolkata","Mumbai","Bhubaneswar"};
    JComboBox j=new JComboBox(it);
Action is given using ActionListener and ItemListener.


 import javax.swing.*;
class MyDrop extends JFrame
 {
     JComboBox b;
     MyDrop()
     {
       setSize(400,300);
       setLayout(null);
      String it[]={"Delhi","Kolkata","Mumbai","Bhubaneswar"};
      b=new JComboBox(it);
       b.setBounds(50,100,100,30);
       add(b);
     setVisible(true);
   }
  public static void main(String args[])
  {
        MyDrop ob=new MyDrop();
  }
}

JTextArea
==========
It is used to create multiline input field.
constructor is used to create input field.

 JTextArea t=new JTextArea();
 JTextArea t=new JTextArea(10,20); //first row then column
It is used to design feedback ,address,comment field.
Scroll bar is not available in JTextArea.
 
import javax.swing.*;
class MyAdd extends JFrame
 {
     JTextArea t;
     MyAdd()
     {
       setSize(400,300);
       setLayout(null);
      t=new JTextArea();
       t.setBounds(50,100,200,200);
       add(t);
     setVisible(true);
   }
  public static void main(String args[])
  {
        MyAdd ob=new MyAdd();
  }
}

JPanel
==========
 It is used to create panel.
Panel is like container. You can add component object in panel using add()method.
Panel is also added to Frame.
Constructor is used to create panel.

  JPanel p=new JPanel();

import java.awt.*;  
import javax.swing.*;
import java.awt.event.*;
class DemoP extends JFrame implements ActionListener
 {
     JPanel p1,p2; JButton b1,b2;
     DemoP()
     {
       setSize(400,300);
      p1=new JPanel();
       p2=new JPanel();
       b1=new JButton("Green");
       b2=new JButton("Blue");
       setLayout(null);
       p1.setBackground(Color.green);
       p2.setBackground(Color.blue);
       b1.setBounds(60,30,100,20);
        b2.setBounds(170,30,100,20);
       p1.setBounds(50,60,100,100);
       p2.setBounds(50,180,100,100);
       p1.setVisible(false);p2.setVisible(false);
       b1.addActionListener(this);
       b2.addActionListener(this);
       add(p1);add(p2);add(b1);add(b2);
     setVisible(true);
   }
  public void actionPerformed(ActionEvent e)
  {
      if(e.getSource()==b1)
       {
         p1.setVisible(true); p2.setVisible(false);
       }
      if(e.getSource()==b2)
       {
         p2.setVisible(true); p1.setVisible(false);
       }
  }
  public static void main(String args[])
  {
        DemoP ob=new DemoP();
  }
}



Add buttons in JPanel
-----------------------

  JPanel p=new JPanel();
  JButton b1=new JButton("Ok");
  JButton b2=new JButton("Cancel");
  setLayout(null);
  p.setLayout(null);
   p.setBounds(10,30,300,300);
  b1.setBounds(50,30,80,20);
  b2.setBounds(140,30,80,20);
  p.add(b1);
  p.add(b2);  




JList
-----------
It respresent list of text item.
It used to create listbox.
It is part of javax.swing package.
Multiple selection is possible using JList.
DefaultListModel class is used to create option for list.

 example
------------
 import javax.swing.*;
 class MyList extends JFrame
 {
   MyList()
   {
     setSize(400,300);
     DefaultListModel <String> l=new DefaultListModel();
     l.addElement("Delhi");
     l.addElement("Mumbai");
     l.addElement("Bhubaneswar");
     JList<String> city=new JList(l);
     setLayout(null);
     city.setBounds(100,60,100,100);
     add(city);
     setVisible(true);
   }
  public static void main(String args[])
   {
     MyList ob=new MyList();
   }
}

JTabbedPane
--------------
It is used to create tabbed pane.
It is also part of javax.swing package.
It manages a set of components by linking them to tabs.
JPanel is used for addition of the component in tab.
Steps to create JTabbedPane
---------------------------
1 create instance of JTabbedPane
2 add the content for tab
   content is created using JPanel.

Example
---------------
program to add two tab in JFrame.
import java.awt.event.*;
import javax.swing.*;
import java.awt.*;
class City extends JPanel
{
     City()
     {
        JButton b1=new JButton("Bhubaneswar");
        JButton b2=new JButton("Kolkata");
        add(b1);add(b2);
     }
}
class ColD extends JPanel implements ActionListener
{
   JButton b1,b2;
    ColD()
    {
        b1=new JButton("RED");
        b2=new JButton("GREEN");
        b1.setBackground(Color.red);
        b2.setBackground(Color.green);
        add(b1);add(b2);
    }
   public void actionPerformed(ActionEvent e)
   {
          if(e.getSource()==b1)
           setBackground(Color.red);
          else if(e.getSource()==b2)
           setBackground(Color.green);
   }
}
class MyTab extends JFrame
{
    JTabbedPane j;
    MyTab()
    {
        setSize(400,400);
        j=new JTabbedPane();
        j.addTab("Cities",new City());
        j.addTab("Colors", new ColD());
       add(j);
      setVisible(true);
    }
   public static void main(String args[])
   {
      MyTab ob=new MyTab();
   }
}


JOptionPane
============
It is predefined class to provide standard dialog box.
Dialog box may be message box,confirm box and input box.
It is child class of JComponent.
It works with object of Frame.

 import javax.swing.*;
 class MyDialog
  {
     public static void main(String args[])
     {
        JFrame f=new JFrame();
        JOptionPane.showMessageDialog(f,"Hello Student");
     }

 }
showMessageDialog(): it is predefined method to open dialog with one button.
It is always pass object of JFrame and string message.

showMessageDialog() it is predefined method to display warning message.
 import javax.swing.*;
 class MyWin
  {
     public static void main(String args[])
     {
        JFrame f=new JFrame();
        JOptionPane.showMessageDialog(f,"successful","alert",JOptionPane.WARNING_MESSAGE);
     }

 }

JOptionPane.showInputDialog()
------------------------------
It is predefined method to open input dialog box.
It takes input and return string type value.
 import javax.swing.*;
 class MyInput
  {
     public static void main(String args[])
     {
        JFrame f=new JFrame();
        String n=JOptionPane.showInputDialog(f,"Enter Name");
         JOptionPane.showMessageDialog(f,"Welcome "+n);
        
     }

 }

JOptionPane.showConfirmDialog()
---------------------------------
It is used to create confirm dialog box.
This dialog contains message with three buttons[yes,no,cancel].
All buttons return integer value[yes=>0,no=>1,cancel=>2]
 import javax.swing.*;
 class MyConfirm
  {
     public static void main(String args[])
     {
        JFrame f=new JFrame();
        int r=JOptionPane.showConfirmDialog(f,"Are you sure to exit?");
        System.out.println(r);  
     }

 }


Swing with Event Handling
---------------------------
program to enter color name and change background according to input.
--------------------------------------------------------------------
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
class ChangeB extends JFrame implements ActionListener
{
   JLabel l;
   JTextField t;
   JButton b;
    ChangeB()
    {
       setSize(400,400);
       l=new JLabel("Enter Color name");
       t=new JTextField();
       b=new JButton("Change");
       setLayout(null);
         l.setBounds(50,50,150,20);
         t.setBounds(210,50,100,20);
         b.setBounds(210,80,80,20);
       add(l);add(b);add(t);
       b.addActionListener(this);
      setVisible(true);
    }
   public void actionPerformed(ActionEvent e)
    {
          if(e.getSource()==b)
          {
              String c=t.getText().toUpperCase();
              if("RED".equals(c))
               getContentPane().setBackground(Color.red);
              else if("GREEN".equals(c))
               getContentPane().setBackground(Color.green);
          }
    }
   public static void main(String args[])
   {
      ChangeB ob=new ChangeB();      
   }
}

ComboBox day=new ComboBox();
 for(int i=1;i<=31;i++)
   day.addItem(""+i);
 String mon[]={"jan","Feb","Mar","Apr","May","June","July","Aug"}
ComboBox month=new ComboBox(mon);

ItemListener
-----------------
It is predefined listener interface to trace activity of RadioButton and drop down.
This listener contains only one abstract method.
Radiobutton and dropdown menu throw object of ItemEvent class.
  public void itemStateChanged(ItemEvent)

getSelectedItem(): It is predefined method to returns selected item of ComboBox and 
RadioButton.

Example of ComboBox event handling
----------------------------------
import javax.swing.*;
import java.awt.event.*;
class Drop extends JFrame implements ItemListener
{
   JComboBox c;
   JLabel l;
    Drop()
    {
         setSize(400,300);
         c=new JComboBox();
         l=new JLabel();
         c.addItem("Mumbai");
         c.addItem("Kolkata");
         c.addItem("Delhi");
         c.addItem("Bhubaneswar");
         setLayout(null);
         l.setBounds(70,130,150,30);
         c.setBounds(50,70,100,20);
         add(c);add(l);
         c.addItemListener(this);
         setVisible(true);
    }
   public void itemStateChanged(ItemEvent e)
    {
       if(e.getSource()==c)
        l.setText(c.getSelectedItem()+" Selected");
    }
   public static void main(String args[])
   {
      Drop d=new Drop();
   }
}

Event handling with RadioButton
-----------------------------------
import javax.swing.*;
import java.awt.event.*;
class RadioE extends JFrame implements ItemListener
{
   JRadioButton c1,c2,c3;
   ButtonGroup b;
   JLabel l;
    RadioE()
    {
         setSize(400,300);
         c1=new JRadioButton("Male");
          c2=new JRadioButton("FeMale");
         c3=new JRadioButton("Other");
         b=new ButtonGroup();
         b.add(c1);b.add(c2);b.add(c3);       
         l=new JLabel("Answer");
         setLayout(null);
         l.setBounds(70,200,150,30);
         c1.setBounds(50,70,100,20);
         c2.setBounds(50,100,100,20);
         c3.setBounds(50,130,100,20);
         add(c1);add(c2);add(c3);add(l);
         c1.addItemListener(this);c2.addItemListener(this);
         c3.addItemListener(this);
         setVisible(true);
    }
   public void itemStateChanged(ItemEvent e)
    {
        System.out.println(e.getItem()+" Selected");
    }
   public static void main(String args[])
   {
      RadioE d=new RadioE();
   }
}

WindowListener
-------------------
It is predefined listener to programmed window activity.
Window activity throw object of WindowEvent.
This listener contains 6 abstract method.
    public void windowOpened(WindowEvent );
    public void windowClosed(WindowEvent );
    public void windowClosing(WindowEvent );
    public void windowIconified(WindowEvent );
    public void windowDeiconified(WindowEvent );
    public void windowActivated(WindowEvent );
    public void windowDeactivated(WindowEvent );

program to track activity of window using WindowListener.
---------------------------------------------------------
import javax.swing.*;
import java.awt.event.*;
class WinP extends JFrame implements WindowListener
{
    WinP()
    {
       setSize(400,400);
       addWindowListener(this);
       setVisible(true);
    }
    public void windowOpened(WindowEvent e)
    {
          System.out.println("Opened");
     }
    public void windowClosed(WindowEvent e )
    {
          System.out.println("Closed");
     }
    public void windowClosing(WindowEvent e)
    {
          System.out.println("Closing");
          System.exit(0);    
     }
    public void windowIconified(WindowEvent e )
     {
          System.out.println("Iconfied");
     }
    public void windowDeiconified(WindowEvent e)
    {
          System.out.println("Deiconified");
     }
    public void windowActivated(WindowEvent e )
    {
          System.out.println("Activated");
     }
    public void windowDeactivated(WindowEvent e)
    {
          System.out.println("Deactivated");
     }

   public static void main(String args[])
   {
       WinP ob=new WinP();
   }
}

FocusListener
---------------------
It is used to trace activity of TextField and TextArea.
This listener contains two abstract method.
  1. public void focusGained(FocusEvent)
  2. public void focusLost(FocusEvent)
TextField and TextArea returns object of TextEvent.
Focus gained means cursor enter into textbox[TextField and TextArea].
Focus lost means cursor exit from textbox.

example
----------
program to track cursor in and out of TextBox

import javax.swing.*;
import java.awt.event.*;
class MyText extends JFrame implements FocusListener
{
    JTextField t1,t2;
    MyText()
    {
       setSize(400,400);
        t1=new JTextField();
        t2=new JTextField();
        t1.addFocusListener(this);
        t2.addFocusListener(this);
        setLayout(null);
        t1.setBounds(100,100,100,30);
        t2.setBounds(100,140,100,30);
        add(t1);add(t2);
       setVisible(true);
    }
    public void focusLost(FocusEvent e)
    {
         System.out.println("lost");
         t1.setText(t1.getText().toUpperCase());
    }   
    public void focusGained(FocusEvent e)
    {
        System.out.println("Gained");
    }   
   public static void main(String args[])
   {
      MyText ob=new MyText();
   }
}
============================================================================================================
Homework[30Jan2021]
=================================
Q1 program to add name of five students in ArrayList
Q2 program to add 10 numbers in ArrayList
import java.util.*;
class ArrDemo
{
   public static void main(String args[])
   {
     ArrayList <Integer>n=new ArrayList();
     for(int i=1;i<=10;i++)
     n.add(i);
     System.out.print(n);
   }
}
Q3 program to add 5 float numbers in ArrayList
import java.util.*;
class ArrF
{
   public static void main(String args[])
   {
     ArrayList <Float>n=new ArrayList();
     n.add(10.2f); n.add(5.6f);n.add(4.5f); n.add(6.5f);n.add(3.5f);
     System.out.println(n.get(0));
     System.out.println(n.get(1));
   }
}
Q4 program to add 5 int numbers in ArrayList and find their sum
Q5 program to add 5 float numbers in ArrayList and find their sum
Q6 program to add 10 integers and print alternate numbers
Q7 program to add 10 integers and print even numbers.
Q8 program to add 10 integers and print odd numbers
Q9 program to add 5 numbers and print first & last numbers.
Q10 program to add name of 10 flowers print in capital form.
Q11 program to add following numbers
  10 11 12 13 14 15 16 17 18 19 20
output
  10 11 13 12 14 15 17 16 18 19 20
Q12 program to add 10 float numbers in ArrayList and print roundoff value.
==============================================================================================
Collections
--------------
Collections class in java is a useful utility class to work with
collections in java. The java.util.Collections class directly extends
the Object class and exclusively consists of the static methods
that operate on Collections or return them.
All methods of this class is static method.

1. addAll(Collection c, T... elements):
 This method adds all of the provided elements to the specified collection at once. The elements can be provided as a comma-separated list.
ArrayList fruits = new ArrayList();
Collections.addAll(fruits, "Apples", "Oranges", "Banana");
System.out.println(fruits);
2. void sort(List list, Comparator c): 
This method sorts the provided list according to the natural ordering.
 We can also pass in s Comparator, if we want some custom ordering.
Collections.sort(fruits);
System.out.println("Sorted according to natural ordering:");
fruits.forEach(System.out::println);
3 Collections.reverse(list)
4 Collections.frequency(collection,object) 
 This method returns the number of elements in the specified
 collection which are equal to the specified object.
5 Collections.max(list)
6 Collections.min(list)
7 Collections.fill(list,object)
8 Collections.rotate(list,int)
9 Collections.swap(list,int,int);
10 Collections.copy(list dest,list src);
11 binarySearch(list,key)

program to sort fruitlist in ascending order
----------------------------------------------
import java.util.*;
class FruitListSort
{
   public static void main(String args[])
   {
       ArrayList <String>fruit=new ArrayList();
       Collections.addAll(fruit,"Papaya","Banana","Pineapple","Gauva","Apple","Orange","Grapes","Mango","Pomgranate");
        System.out.println(fruit);
        Collections.sort(fruit);
         System.out.println(fruit);
       
    }
}

program to print contents of ArrayList in reverse form
--------------------------------------------------------
import java.util.*;
class NumberList
{
   public static void main(String args[])
   {
      ArrayList <Integer>num=new ArrayList();
      Collections.addAll(num, 1, 2, 3, 4, 5, 6, 7, 8, 9);
       Collections.reverse(num);
      System.out.print(num);
  }
}

program to print float numbers in reverse form
------------------------------------------------
import java.util.*;
class FloatList
{
   public static void main(String args[])
   {
      ArrayList <Float>num=new ArrayList();
      Collections.addAll(num, 1.2f, 2.5f, 3.4f, 4.5f);
       Collections.reverse(num);
      System.out.print(num);
  }
}

program to generate OTP of 6 digit 
---------------------------------
import java.util.*;
class GenOtp
{
   public static void main(String args[])
   {
      ArrayList <Integer>num=new ArrayList();
      Collections.addAll(num, 1, 2, 3, 4, 5, 6, 7, 8, 9);
       Collections.shuffle(num);
      System.out.print(""+num.get(0)+num.get(1)+num.get(2)+num.get(3)+num.get(4)+num.get(5));
  }
}

import java.util.*;
class CharRan
{
   public static void main(String args[])
   {
      ArrayList <String>alpha=new ArrayList();
       for(char i='a';i<='z';i++)
        alpha.add(""+i);
       for(int i=1;i<=9;i++)
         alpha.add(""+i);
        Collections.shuffle(alpha);
       System.out.println(alpha);
      }
}

program to check frequency of number in ArrayList
-----------------------------------------------------
import java.util.*;
class GetFreq
{
   public static void main(String args[])
   {
      ArrayList <Integer>num=new ArrayList();
     Scanner sc=new Scanner(System.in);
     System.out.print("Enter value to check frequency:");
     int n=sc.nextInt();
      Collections.addAll(num, 10, 2, 30, 40, 55, 6, 7, 8, 9,10,55,64,55);
     System.out.println(n +" is available "+Collections.frequency(num,n)+" times");
   }
}
program to search 20 using binary search algorithm
------------------------------------------------------
import java.util.*;
class BSearch
{
  public static void main(String args[])
   {
     ArrayList <Integer>num=new ArrayList();
       num.add(10);num.add(20);num.add(30);num.add(40);
       int p=Collections.binarySearch(num,20);
       System.out.print(p);
   }
}
----------------------------------


   ArrayList<Integer> n=new ArrayList();
   n.add(10);n.add(10);n.add(5);n.add(11);
   System.out.println(Collections.frequency(n,100)); => 0

------------
Collections.frequency(list,object)
-----------------------------------
 It is used to count frequency of element in list.

 Example:
import java.util.*; 
 class DemoA
  {
   public static void main(String args[])
    {
     ArrayList <Integer>n=new ArrayList();
     n.add(100);n.add(10);n.add(5);n.add(100);n.add(11);
     System.out.println(n);
     System.out.println(Collections.frequency(n,100));
   }
}

Example2: print frequency of all elements
   [10,20,10,11,11,33,50,20,60,20]

import java.util.*; 
 class PrintFr
  {
   public static void main(String args[])
    {
     Scanner sc=new Scanner(System.in);
     System.out.print("Enter value to check Frequency:");
      int val=sc.nextInt();
     ArrayList <Integer>n=new ArrayList();
     n.add(10);n.add(20);n.add(10);n.add(11);n.add(11);n.add(33);
     n.add(50);n.add(20);n.add(60);
     System.out.println(n);
       System.out.println(val+" =>"+Collections.frequency(n,val));
   }
}


import java.util.*; 
 class PrintFrAll
  {
   public static void main(String args[])
    {
     ArrayList <Integer>n=new ArrayList();
     n.add(10);n.add(20);n.add(10);n.add(11);n.add(11);n.add(33);
     n.add(50);n.add(20);n.add(60);
     System.out.println(n);
      for(int i=0;i<n.size();i++)
       System.out.println(n.get(i)+" =>"+Collections.frequency(n,n.get(i)));
   }
}

Example3: print all element whose frequency more than 1.
   [10,20,10,11,11,33,50,20,60,20]
    

import java.util.*; 
 class PrintF
  {
   public static void main(String args[])
    {
     ArrayList <Integer>n=new ArrayList();
     n.add(10);n.add(20);n.add(10);n.add(11);n.add(11);n.add(33);
     n.add(50);n.add(20);n.add(60);
     System.out.println(n);
      for(int i=0;i<n.size();i++)
        if(Collections.frequency(n,n.get(i))>1)
          System.out.println(n.get(i)+" =>"+Collections.frequency(n,n.get(i)));
   }
}

Collections.rotate(list,int)
 It is used to rotate list  according to input.   
 import java.util.*; 
 class ListRot
  {
   public static void main(String args[])
    {
     ArrayList <Integer>n=new ArrayList();
     n.add(10);n.add(20);n.add(15);n.add(12);n.add(11);n.add(33);
     n.add(50);n.add(22);n.add(60);
     System.out.println(n);
     Collections.rotate(n, 2);
     System.out.println(n);
   }
}
program to rotate ArrayList element according to user input
------------------------------------------------------------
 import java.util.*; 
 class RotList
  {
   public static void main(String args[])
    {
     Scanner sc=new Scanner(System.in);
     System.out.print("Enter value for shifting:");
      int num=sc.nextInt();  
     ArrayList <Integer>n=new ArrayList();
     n.add(10);n.add(20);n.add(15);n.add(12);n.add(11);n.add(33);
     n.add(50);n.add(22);n.add(60);
     System.out.println(n);
     Collections.rotate(n, num);
     System.out.println(n);
   }
}


Collections.fill(list,object)
-------------------------------
 This method is used to fill list with new object.
import java.util.*; 
import java.util.*;
class MyList
{
 public static void main(String args[])
  {
  ArrayList <Integer>n=new ArrayList();
   n.add(10);
   n.add(50);
   n.add(90);
   n.add(100);
   System.out.println(n);
   Collections.fill(n,55);
   System.out.println(n);
  }
}
Collections.swap(list, int,int)
-------------------------------
This method is used to swap elements in List according to index.
import java.util.*;
class SwapL
{
  public static void main(String args[])
  {
   ArrayList <Integer>n=new ArrayList();
   n.add(10);
   n.add(50);
   n.add(90);
   n.add(100);
   System.out.println(n);
   Collections.swap(n,0,3);
   System.out.println(n);
 }
}
Collections.copy(list dest,list src)
------------------------------------
This method is used to copy contents of one list to other.
 import java.util.*;
 class CopyL
 {
   public static void main(String args[])
   {
    ArrayList <Integer>dest=new ArrayList();
    ArrayList <Integer>src=new ArrayList();
     src.add(10);
     src.add(50);
     src.add(90);
     src.add(100);
    Collections.copy(dest,src);
     System.out.println(dest);
     System.out.println(src);
   }
}

create ArrayList for user defined data type
-------------------------------------------
import java.util.*;
class Student
{
   int roll;
   String name;
   Student(int r,String n)
   {
        roll=r;
        name=n;
   }
}
import java.util.*;
class StoreData
{
    public static void main(String args[])
    {
        ArrayList<Student>data=new ArrayList();
         Student s1=new Student(1,"Sandeep");
        data.add(s1);
        Student s2=new Student(2,"Sujit");
        data.add(s2);
        Student s3=new Student(3,"Suchismita");
         data.add(s3);
        Student s4=new Student(4,"Rasmita");
         data.add(s4);
        System.out.println(data);  //print object
        System.out.println(data.get(0).roll+" "+data.get(0).name);
    }
}
==========================================================================================
Homework[1Feb2021]
-----------------------
Q1 program to add 10 integer number and sort
Q2 program to add 5 float number in Arraylist and sort in descending order
Q3 program to add 10 names and sort in descending order
Q4 program to add 10 integer and shuffle
Q5 program to add 10 character and check frequency of all characters.
Q6 program to add all alphabets and print in shuffle
Q7 program to design window to check OTP. Alphanumeric Otp is generated.
Q8 program to add 10 questions in array list.
   class Question
   {
        String qt,op1,op2,op3,op4,ans;
        Question(String q,String o1, String o2,String o3, String o4,String a)
        {
           qt=q;op1=o1;op2=o2;op3=o3;op4=o4;ans=a;
        }
   } 
   ArrayList <Question> que=new ArrayList();
 -Display options are in shuffle
===================================================================================================
--------------------
Comparator
--------------------
Comparator interface is used to order the objects of
 user-defined classes. A comparator object is capable of 
comparing two objects of two different classes. 
Following function compare obj1 with obj2
   int compare(Object obj1, Object obj2)
Comparator interface is used to order the objects of 
user-defined class. This interface is present in java.util package and
contains 2 methods compare(Object obj1, Object obj2) and equals(Object element).
 Using comparator,we can sort the elements based on data members. 
Internally the Sort method does call Compare method of the classes it is sorting.
To compare two elements, it asks “Which is greater?” Compare method 
returns -1, 0 or 1 to say if it is less than, equal, or greater to the other. 
It uses this result to then determine if they should be swapped for its sort
Example
-----------
import java.util.*;
class Student
{
    int rollno;
    String name, address;
 
    // Constructor
    public Student(int rollno, String name, String address)
    {
        this.rollno = rollno;
        this.name = name;
        this.address = address;
    }
 
    // Used to print student details in main()
    public String toString()
    {
        return this.rollno + " " + this.name + " " + this.address;
    }
}
import java.util.*; 
class Sortbyroll implements Comparator<Student>
{
    public int compare(Student a, Student b)
    {
        return a.rollno - b.rollno;
    }
}
import java.util.*; 
class Sortbyname implements Comparator<Student>
{
    public int compare(Student a, Student b)
    {
        return a.name.compareTo(b.name);
    }
}
 
// Driver class
import java.util.*;
class Main
{
    public static void main (String[] args)
    {
        ArrayList<Student> ar = new ArrayList<Student>();
        ar.add(new Student(111, "bbbb", "london"));
        ar.add(new Student(131, "aaaa", "nyc"));
        ar.add(new Student(121, "cccc", "jaipur"));
 
        System.out.println("Unsorted");
        for (int i=0; i<ar.size(); i++)
            System.out.println(ar.get(i));
 
        Collections.sort(ar, new Sortbyroll());
 
        System.out.println("\nSorted by rollno");
        for (int i=0; i<ar.size(); i++)
            System.out.println(ar.get(i));
 
        Collections.sort(ar, new Sortbyname());
 
        System.out.println("\nSorted by name");
        for (int i=0; i<ar.size(); i++)
            System.out.println(ar.get(i));
    }
}


LinkedList
------------
Linked List are data structures where the elements are not stored
in contiguous locations and every element is a separate object with a data 
part and address part. The elements are linked using pointers and addresses.
Each element is known as a node. Due to the dynamicity and ease of insertions
and deletions, they are preferred over the arrays.
LinkedList class can contain duplicate elements.
LinkedList class maintains insertion order.
It is created using following constructor.
  -LinkedList()
  -LinkedList(Collection)

Example
import java.util.*;
 class LinkDemo
 {
   public static void main(String args[])
  {
   LinkedList <String> str=new LinkedList();
   str.add("A");
   str.add("B");
   str.add("DE");
   System.out.print(str);
  }
}

program to add element in first and last position in Linked List
------------------------------------------------------------------
import java.util.*;
class Linked
{
   public static void main(String args[])
  {
   Scanner sc=new Scanner(System.in);
   LinkedList <String> str=new LinkedList();
   str.add("A");
   str.add("B");
   str.add("C");
   System.out.println(str);
   System.out.print("Enter value for first and last position"
   String first=sc.next();
   String last=sc.next();
    str.addFirst(first);
    str.addLast(last);
   System.out.println(str);
  }
}


Methods of LinkedList
====================
add(ele) : add an element into the list.
add(index,ele): add an element at particular position.
addFirst(ele): add an element at first position.
addLast(ele): add an element at last position.
clear(): remove all the elements from the list.
contains(ele): This method returns true if this list contains the specified element.
getFirst(): Returns first element.
getLast(): Returns last element.
indexOf(ele): index of first occurance.
lastIndexOf(ele): last index of an element.
size(): returns number of element in the list.
set​(int index, ele): This method replaces the element at the specified position in this list with the specified element.
remove(): This method retrieves and removes the head (first element) of this list.

import java.util.*;
class LinkedOp
{
   public static void main(String args[])
  {
   Scanner sc=new Scanner(System.in);
   LinkedList <String> str=new LinkedList();
   str.add("A");
   str.add("B");
   str.add("C");
   str.add("D");
   str.add("E");
   str.add("C");
   System.out.println(str);
   System.out.println(str.getFirst());
   System.out.println(str.getLast());  
   System.out.println(str.indexOf("C"));
   System.out.println(str.lastIndexOf("C"));
 }
} 



class Book
 {  
   int id;  
   String name,author,publisher;  
   int quantity;  
  public Book(int id, String name, String author, String publisher, int quantity)
  {  
    this.id = id;  
    this.name = name;  
    this.author = author;  
    this.publisher = publisher;  
    this.quantity = quantity;  
   }  
}  
import java.util.*;
public class LinkedEx
 {  
   public static void main(String[] args)
   {  
     //Creating list of Books  
     List<Book> list=new LinkedList<Book>();  
     //Creating Books  
     Book b1=new Book(101,"Let us C","Yashwant Kanetkar","BPB",8);  
     Book b2=new Book(102,"Data Communications & Networking","Forouzan","Mc Graw Hill",4);  
     Book b3=new Book(103,"Operating System","Galvin","Wiley",6);  
     //Adding Books to list  
     list.add(b1);  
     list.add(b2);  
     list.add(b3);  
    //Traversing list  
     for(Book b:list){  
     System.out.println(b.id+" "+b.name+" "+b.author+" "+b.publisher+" "+b.quantity);  
    }  
 }  
}   

List[interface]
-----------
-The list interface allows duplicate elements
-The list maintains insertion order.
-We can add any number of null values.
-List implementation classes are ArrayList, LinkedList.
Example
------------
import java.util.*; 
public class ListEx
 { 
    public static void main(String args[]) 
    { 
        List<String> al = new ArrayList<>(); 
        al.add("mango"); 
        al.add("orange"); 
        al.add("Grapes");
        al.add("mango"); 
        for (String fruit : al) 
            System.out.println(fruit); 
    } 
}


Set[interface]
-------------
-Set does not allow duplicate elements.
-Set do not maintain any insertion order. 
-But in set almost only one null value.
-Set implementation classes are HashSet, LinkedHashSet, and TreeSet. 

Example
import java.util.*; 
public class SetEx
 { 
    public static void main(String[] args) 
    { 
        Set<String> Set = new HashSet<String>(); 
        Set.add("one"); 
        Set.add("two");
        Set.add("one"); 
        Set.add("three"); 
        Set.add("four"); 
        Set.add("five"); 
        System.out.println(Set); 
    } 
}

TreeSet is one of the most important implementations of the
 SortedSet interface in Java that uses a Tree for storage.
Example of TreeSet
--------------------
import java.util.*; 
class TSEx
 { 
    public static void main(String[] args) 
    { 
        TreeSet<String> ts1 = new TreeSet<String>(); 
        // Elements are added using add() method 
        ts1.add("D"); 
        ts1.add("B"); 
        ts1.add("C"); 
        // Duplicates will not get insert 
        ts1.add("C"); 
  
        // Elements get stored in default natural 
        // Sorting Order(Ascending) 
        System.out.println(ts1); 
    } 
}
Map
---------
-The map does not allow duplicate elements
-The map also does not maintain any insertion order. 
-The map allows a single null key at most and any number of null values.
-Map implementation classes are HashMap, HashTable, TreeMap,
 ConcurrentHashMap, and LinkedHashMap.

Example
import java.util.*; 
class MapExample
 { 
   public static void main(String args[]) 
    { 
        // Creating object for Map. 
        Map<Integer, String> map = new HashMap<Integer, String>(); 
        // Adding Elements using Map. 
        map.put(100, "Amit"); 
        map.put(101, "Vijay"); 
        map.put(102, "Rahul"); 
          // Elements can traverse in any order 
        for (Map.Entry m : map.entrySet())
         { 
            System.out.println(m.getKey() + " " + m.getValue()); 
        } 
    } 
}

Java Generics
---------------
Java Genrics is one of the most important features introduced in Java 5.
Generics in Java with collection classes is very easy but it provides 
a lot more features than just creating the type of collection.
Generics was added in Java 5 to provide compile-time type checking 
and removing risk of ClassCastException that was
 common while working with collection classes. 
The whole collection framework was re-written to 
use generics for type-safety. 
Let’s see how generics help us using collection classes safely.
  ArrayList<String> arr=new ArrayList(); //fixed for String only
     arr.add("Hello");   //ok
     arr.add(10);  //Not ok  ClassCastException during runtime
     arr.add(10.5f); //Not ok ClassCastException during runtime
  ArrayList<Integer> arr=new ArrayList(); //fixed for Integer only
      
  ArrayList arr=new ArrayList(); //Generic type
   arr.add("Hello");
   arr.add(10.5f);
   arr.add(10);
   
Example
-----------
import java.util.*;
class GenDemo
{
    public static void main(String args[])
    {
        ArrayList arr=new ArrayList();
        String n="Ramesh";
        Integer num=new Integer(10);
        Float f=new Float(10.5f);
        arr.add(n);
        arr.add(num);
        arr.add(f);
       System.out.println(arr);
       for(Object o:arr)
         System.out.println(" "+o);
       System.out.println((Integer)arr.get(1)+(Float)arr.get(2));
    }
}



MCQAPP
---------
class Question
{
   String qt;
   String op1;
   String op2;
   String op3;
   String op4;
   String ans;
   Question(String qt,String op1,String op2,String op3,String op4,String ans)
   {
       this.qt=qt;this.op1=op1;
       this.op2=op2;this.op3=op3;
       this.op4=op4;this.ans=ans;
   }
}

import java.util.*;
class MCQ
{
    static ArrayList<Question> que;
    static int r=0;
    public static void main(String args[])
    {
       String uans;
       que=new ArrayList();
       Question q1=new Question("What is name of java complier?","java","javap","javac","javad","javac");
       Question q2=new Question("What is name of java Interpreter?","java","javap","javac","javad","java");
       Question q3=new Question("What is full form of JVM?","java Video Motion","java Van Motion","java Virtual Machine","None ","java Virtual Machine");
       Question q4=new Question("this keyword is .....","non static","static","function","None ","non static");
       
        que.add(q1);
        que.add(q2);
        que.add(q3);
        que.add(q4);
       Collections.shuffle(que);
      Scanner sc=new Scanner(System.in);
       for(int i=0;i<que.size();i++)
       {
        System.out.println(que.get(i).qt);
        System.out.println(que.get(i).op1);
        System.out.println(que.get(i).op2);
        System.out.println(que.get(i).op3);
        System.out.println(que.get(i).op4);
        System.out.print("Enter your Answer:");
        uans=sc.nextLine();
         if(uans.equals(que.get(i).ans))
           r=r+1;
         System.out.println("Result="+r); 
       }     
    }
}

comment.java
-----------------
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
 import java.util.*;
class Comment extends JFrame implements ActionListener
{
ArrayList<String> q;
  JLabel l1;
 JTextField t1;
 JButton b1;
 JTextArea tx1;
 String s="";
 Comment()
 {
  setSize(400,500);
  q=new ArrayList();
 setLayout(null);
  l1=new JLabel("COMMENT BOX");
  t1=new JTextField();
  b1=new JButton("POST");
  tx1=new JTextArea();
  l1.setBounds(80,50,100,30);
  t1.setBounds(80,100,200,30);
  b1.setBounds(230,140,80,30);
  tx1.setBounds(60,180,300,200);
  add(l1);add(t1);add(tx1);add(b1);
   b1.addActionListener(this);
   setVisible(true);
  
  }
 public void actionPerformed(ActionEvent e)
 {
 tx1.setText("");
  s=t1.getText();
  q.add(s);
  for(int i=q.size()-1;i>=0;i--)
  {
    tx1.append(q.get(i)+"\n");
   }
   t1.setText("");
 }
public static void main(String args[])
 {
   Comment ob=new Comment();
  }
}
==============================================================================================================
JavaFX
JavaFX is a GUI toolkit for Java (GUI is short for Graphical User Interface).
JavaFX makes it easier to create desktop applications and games in Java.
Java is still one of the most popular programming languages in the world,
with a large set of standard classes,
and a rich set of open source toolkits developed by the Java developer community.
JavaFX a versatile cross OS and cross device application toolkit.
JavaFX comes with a rich set of GUI controls, and open source toolkits add even more tools to the total ecosystem.
JavaFX comes with a large set of built-in GUI components, 
like buttons, text fields, tables, trees, menus, charts and much more.
JavaFX can be styled via CSS and / or programmatically. 
JavaFX comes with a built-in chart library you can use for simple charts. 
JavaFX has support for 2D and 3D Graphics.
JavaFX has a WebView which can display modern web applications.

JavaFX application will have three major components namely Stage, Scene and Nodes.
Architecture of JavaFX
 
Stage
A stage (a window) contains all the objects of a JavaFX application. It is represented by Stage class of the package javafx.stage. The primary stage is created by the platform itself. The created stage object is passed as an argument to the start() method of the Application class
Example
import javafx.stage.*;
import javafx.application.*;
public class StageD extends Application
 {
    public static void main(String[] args) 
    {
        launch(args);
    }
    public void start(Stage my)
    {
        my.setTitle("JavaFX App");
        my.show();
    }
}
Methods of Stage
1)	show()   //provide visiblility
2)	setTitle() //set the title of window
3)	setWidth() //set width of the window
4)	setHeight()  //set height of the window
5)	setX()          //set x axis of the window
6)	setY()      //set y axis of the window
7)	setFullScreen(Boolean)
A Stage class, which is a top-level UI container. Imagine it as the theatrical stage of the drama called graphics programming.
A Screen class, which represents display parameters such as size of the stage, resolution, and so forth.
The javafx.scene package (mostly used) contains these items:

import javafx.stage.*;
import javafx.application.*;
public class StageProg extends Application
 {
    public static void main(String[] args) 
    {
        launch(args);
    }
    public void start(Stage my)
    {
        my.setTitle("JavaFX App");
       my.setWidth(200);
      my.setHeight(200);
        my.show();
    }
}

A Scene class, which is the second-level container where the act takes place. It is similar to a scene of the drama in action or an act in motion.
A Node class is an abstract base class for all the graphical nodes in JavaFX, such as text, images, media, shapes, and so on. They are the actors.
A Group class is the subclass of Node, whose purpose is to group several node objects in to a single act.
A Canvas class is basically a Node subclass which provides an API to draw shapes using a set of graphics commands. The advantage of Canvas is that we can obtain its GraphicsContext and invoke drawing operations to render custom shapes onscreen.




Example :program to add message in window using Scene
import javafx.stage.*;
import javafx.application.*;
import javafx.scene.control.*;
import javafx.scene.*;
import javafx.scene.layout.*;
public class Scne extends Application
 {
    public static void main(String[] args) 
    {
        launch(args);
    }
    public void start(Stage my)
    {
        my.setTitle("JavaFX App");
        VBox vb=new VBox(new Label("Welcome"));
        Scene sc=new Scene(vb);
        my.setScene(sc);
        my.show();
    }
}
Method of Scene
1)	setCursor()
The javafx.scene.Cursor class contains a lot of constants you can use to specify which mouse cursor you want to display. Some of these constants are:
Cursor.OPEN_HAND
Cursor.CLOSED_HAND
Cursor.CROSSHAIR
Cursor.DEFAULT
Cursor.HAND
Cursor.WAIT
Cursor.H_RESIZE
Cursor.V_RESIZE
Cursor.MOVE
Cursor.TEXT

Program to change cursor in Scene
import javafx.stage.*;
import javafx.application.*;
import javafx.scene.control.*;
import javafx.scene.*;
import javafx.scene.layout.*;
public class ScProg extends Application
 {
    public static void main(String[] args) 
    {
        launch(args);
    }
    public void start(Stage my)
    {
        my.setTitle("JavaFX App");
        VBox vb=new VBox(new Label("Welcome"));
        Scene sc=new Scene(vb);
        sc.setCursor(Cursor.OPEN_HAND);
        my.setScene(sc);
        my.show();
    }
}
=============================================================================================
JavaFX
--------------
UI elements − These are the core visual elements which the 
user eventually sees and interacts with. 
JavaFX provides a huge list of widely used and common
 elements varying from basic to complex.
Layouts − They define how UI elements should be organized
 on the screen and provide a final look and feel to the 
GUI (Graphical User Interface). 
Behavior − These are events which occur when the user 
interacts with UI elements. 
This part will be covered in the Event Handling

control package
----------------------
JavaFX provides several classes in the 
package javafx.scene.control. 
To create various GUI components (controls), 
JavaFX supports several controls such as date picker,
button text field, etc.
Each control is represented by a class; 
you can create a control by instantiating its respective class.

Label
A Label object is a component for placing text.
Button
This class creates a labeled button
Button
This class creates a labeled button.
ColorPicker
A ColorPicker provides a pane of controls designed to allow a user to manipulate and select a color.
CheckBox
A CheckBox is a graphical component that can be in either an on(true) or off (false) state.
RadioButton
The RadioButton class is a graphical component, which can either be in a ON (true) or OFF (false) state in a group.
TextField
A TextField object is a text component that allows for the editing of a single line of text.
PasswordField
A PasswordField object is a text component specialized for password entry.

Layout
---------------
JavaFX provides several predefined layouts such as HBox, VBox,
Border Pane, StackPane, TextFlow, Anchor Pane, TitlePane,
GridPane, FlowPanel, etc.
Each of the above mentioned layout is represented by a class 
and all these classes belongs to the package javafx.layout.
The class named Pane is the base class of all the layouts 
in JavaFX.

1 HBox
The HBox layout arranges all the nodes in our application in a 
single horizontal row. The class named HBox of the package 
javafx.scene.layout represents 
the text horizontal box layout.
 Example
 Button button1 = new Button("Button Number 1");
 Button button2 = new Button("Button Number 2");
 HBox hbox = new HBox(button1, button2);

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
public class HButton extends Application 
 {
  public void start(Stage st) throws Exception 
  { 
    st.setTitle("Button Demo");
    Button button1 = new Button("Ok");
    Button button2 = new Button("Cancel");
    HBox hbox = new HBox(button1, button2);
    Scene scene = new Scene(hbox, 200, 100);
    st.setScene(scene);
    st.show();
   }
  public static void main(String[] args)
  {
    launch(args);
  }
}
2 VBox
The VBox layout arranges all the nodes in our application in a 
single vertical column.
The class named VBox of the package javafx.scene.layout 
represents the text Vertical box layout.

Button button1 = new Button("Button Number 1");
Button button2 = new Button("Button Number 2");
VBox vbox = new VBox(button1, button2);

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
public class VButton extends Application
{
  public void start(Stage primaryStage) throws Exception 
  { 
    primaryStage.setTitle(" Button Demo ");
    Button button1 = new Button("Ok");
    Button button2 = new Button("Cancel");
    VBox vbox = new VBox(button1, button2);
    Scene scene = new Scene(vbox, 200, 100);
    primaryStage.setScene(scene);
    primaryStage.show();
  }
  public static void main(String[] args) 
  {
    Application.launch(args);
  }
}
3 BorderPane
The Border Pane layout arranges the nodes in our application in top, 
left, right, bottom and center positions.
The class named BorderPane of the package javafx.scene.layout represents 
the border pane layout.

4 StackPane
The stack pane layout arranges the nodes in our application on top of
 another just like in a stack. The node added first is placed at the 
bottom of the stack and the next node is placed on top of it.
The class named StackPane of the package javafx.scene.layout represents
the stack pane layout.
5 TextFlow
The Text Flow layout arranges multiple text nodes in a single flow.
The class named TextFlow of the package javafx.scene.layout 
represents the text flow layout.

RadioButton
------------------
You can create a JavaFX RadioButton using its constructor.
It is part of import javafx.scene.control package.

 import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.RadioButton;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
public class Radio extends Application 
 {
    public void start(Stage primaryStage) throws Exception 
    {
        primaryStage.setTitle("HBox Experiment 1");
        RadioButton rb1 = new RadioButton("Left");
        RadioButton rb2=new RadioButton("Right");
        HBox hbox = new HBox(rb1,rb2);
        Scene scene = new Scene(hbox, 200, 100);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    public static void main(String[] args)
    {
        Application.launch(args);
    }
}

A ToggleGroup allows at most one RadioButton to be selected at any time.
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class RadioS extends Application 
 {
  public void start(Stage primaryStage) throws Exception 
   {
        primaryStage.setTitle("Demo");
        RadioButton radioButton1 = new RadioButton("Left");
        RadioButton radioButton2 = new RadioButton("Right");
        RadioButton radioButton3 = new RadioButton("Up");
        RadioButton radioButton4 = new RadioButton("Down");
        ToggleGroup radioGroup = new ToggleGroup();
        radioButton1.setToggleGroup(radioGroup);
        radioButton2.setToggleGroup(radioGroup);
        radioButton3.setToggleGroup(radioGroup);
        radioButton4.setToggleGroup(radioGroup);
        HBox hbox = new HBox(radioButton1, radioButton2, radioButton3, radioButton4);
        Scene scene = new Scene(hbox, 200, 100);
        primaryStage.setScene(scene);
       primaryStage.show();
    }
    public static void main(String[] args) 
    {
        Application.launch(args);
    }
}

CheckBox
------------
Create a JavaFX CheckBox control via the CheckBox constructor.
 Here is a JavaFX CheckBox instantiation example:
CheckBox checkBox1 = new CheckBox("Green");

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.CheckBox;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
public class CheckDemo extends Application 
 {
    public void start(Stage primaryStage) throws Exception 
   {
        primaryStage.setTitle("Demo");
        CheckBox checkBox1 = new CheckBox("Green");
        HBox hbox = new HBox(checkBox1);
        Scene scene = new Scene(hbox, 200, 100);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    public static void main(String[] args) {
        Application.launch(args);
    }
}

ChoiceBox
---------------
JavaFX ChoiceBox control enables users to choose an option from a predefined 
list of choices. 
The JavaFX ChoiceBox control is represented by the class 
javafx.scene.control.ChoiceBox 

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.ChoiceBox;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
public class ChoiceDemo extends Application
  {
    public void start(Stage primaryStage) throws Exception
    {
        primaryStage.setTitle("Demo");
        ChoiceBox choiceBox = new ChoiceBox();
        choiceBox.getItems().add("Choice 1");
        choiceBox.getItems().add("Choice 2");
        choiceBox.getItems().add("Choice 3");
        HBox hbox = new HBox(choiceBox);
        Scene scene = new Scene(hbox, 200, 100);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    public static void main(String[] args)
   {
        Application.launch(args);
    }
}

TextArea
===========
TextArea control enables users of a JavaFX application to enter text 
spanning multiple lines, which can then be read by the application. The JavaFX
TextArea control is represented by the class javafx.scene.control.TextArea.

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.TextArea;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
public class TextDemo extends Application 
 {
    public void start(Stage primaryStage) throws Exception
    {
        primaryStage.setTitle("TextArea Demo");
        TextArea textArea = new TextArea();
        VBox vbox = new VBox(textArea);
        Scene scene = new Scene(vbox, 200, 100);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    public static void main(String[] args)
    {
        launch(args);
    }
}

DatePicker
--------------
DatePicker control enables the user to enter a date or choose a date from
 a wizard-like popup dialog.
The popup dialog shows only valid dates, so this is an easier way for 
users to choose a date and ensure that both the date and date format 
entered in the date picker text field is valid. 
The JavaFX DatePicker is represented by the 
class javafx.scene.control.DatePicker .

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.DatePicker;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
public class DateDemo extends Application 
 {
    public void start(Stage primaryStage) throws Exception 
    {
        primaryStage.setTitle("DateDemo");
        DatePicker datePicker = new DatePicker();
        HBox hbox = new HBox(datePicker);
        Scene scene = new Scene(hbox, 200, 100);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    public static void main(String[] args)
    {
        launch(args);
    }
}

Slider
----------
JavaFX Slider control provides a way for the user to select a value 
within a given interval by sliding a handle to the desired point representing
the desired value. The JavaFX Slider is represented by 
the JavaFX class javafx.scene.control.Slider.

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Slider;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
public class SliderD extends Application
 {
    public static void main(String[] args) 
    {
        launch(args);
    }
   public void start(Stage primaryStage)
    {
        primaryStage.setTitle("JavaFX App");
        Slider slider = new Slider(0, 100, 10);
        VBox vBox = new VBox(slider);
        Scene scene = new Scene(vBox, 960, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

}
Label
----------
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.stage.Stage;
public class LabelD extends Application  {
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("Demo");
        Label label = new Label("My Label");
        Scene scene = new Scene(label, 200, 100);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        Application.launch(args);
    }
}

TextField
-------------
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
public class TextFD extends Application  {
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("HBox Experiment 1");
        TextField textField = new TextField();
        HBox hbox = new HBox(textField);
        Scene scene = new Scene(hbox, 200, 100);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    public static void main(String[] args) {
        Application.launch(args);
    }
}

ColorPicker
--------------
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.ColorPicker;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
public class ColorPickerExample extends Application {
    public static void main(String[] args) {
        launch(args);
    }
    public void start(Stage primaryStage) {
        primaryStage.setTitle("JavaFX App");
        ColorPicker colorPicker = new ColorPicker();
        Color value = colorPicker.getValue();
        VBox vBox = new VBox(colorPicker);
        Scene scene = new Scene(vBox, 960, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}
MenuBar
-------------
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
public class MApp extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    public void start(Stage primaryStage) {
        primaryStage.setTitle("JavaFX App");
        MenuBar menuBar = new MenuBar();
        VBox vBox = new VBox(menuBar);
        Scene scene = new Scene(vBox, 960, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}

FileChooser
------------
 FileChooser class (javafx.stage.FileChooser) is a dialog that enables
 the user to select one or more files via a file explorer from the
 user's local computer. The JavaFX FileChooser is implemented in the 
class javafx.stage.FileChooser.

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import java.io.*;
public class FileCDemo extends Application 
{
    public static void main(String[] args) {
        launch(args);
    }
    public void start(Stage primaryStage)
   {
        primaryStage.setTitle("JavaFX App");
        FileChooser fileChooser = new FileChooser();
        Button button = new Button("Select File");
        button.setOnAction(e -> {
            File selectedFile = fileChooser.showOpenDialog(primaryStage);
        });
        VBox vBox = new VBox(button);
        Scene scene = new Scene(vBox, 960, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}

BarChart
------------
BarChart component is capable of drawing a bar chart inside your
 JavaFX applications. This is useful in dashboard-like applications.
 The JavaFX BarChart component 
is represented by the class javafx.scene.chart.BarChart
=========================================================================================
