DataStructure
-------------------
It is not programming language.
It is concept to store data in program.
You can create data storage using any language.
  Datastructure using C
  Datastructure using python
  Datastructure usine java
  Datastructure using C++
  Datastructure using C#
etc

students=> data
classroom=> datastructure
lab=> datastructure
auditorium=> datastructure
library => datastructure
canteen =>datastructure
seminarhall=>datastructure
examhall=>datastructure

int s1=10;
int s2=50;
int s3=11;
int s4=89;
int s[];  //

It is used to develop software.

Datastructure=Organized data+allowed Operation

   t i r d e t n c l o l g e e  => character data
   trident college => arranged data with help of array
   TRIDENT COLLEGE=> to convert in capital form[operation]
   length=15  => operation to calculate length
   Trident College=> converted into title case 

Datastructure => Design Algorithm and Analysis

keep name in array and convert to capital form
------------------     -----------------------
 Datastructure           Algorithm

Operation in Datastructure
-----------------------------
1) Traversing
2) Searching
3) Insertion
4) Deletion
5) sorting[A-Z,Z-A]
Classification of Datastructure
----------------------------------
Datastructure
  a) Array
  b) List
  c) Files
a) Array
b) List
   -linear list
      -stack
      -queue
   -non-linear list
       -Tree
       -Graph
Linear list: Data items are arranged in a sequence.
     ex:stack using array, queue using array
Non-Linear list: Data items are not arranged in sequence.
    ex:Tree and Graph
Homogenous: It keeps similar data in arrangement.

#include<stdio.h>
int main()
{
   printf("Hello students");
   return 0;
}

save with prog1.c
compile
run
==============================================================================
-----------------------------------------------
Basic of C Language
------------------------------------
C is programinng laguage. It means compilation is needed.
C program is stored with .c extension.
Structure of c program
------------------------
1) header file
2) comment
3) main()
4){
5)   declaration
6)   input/output
7)   logic
8) }
Header file
-------------------
All predefined functions are declared inside header file.
Extension of header file is .h
stdio.h
string.h
math.h
stdlib.h
etc
Header file is included in begininng of the c program.
#include<stdio.h>

#=> It is preprocessor. It is executed before compilation.
include=> It is keyword. It is used to link contents of header file in your program.
<> => It is used for including predefined header file.

#include<stdio.h>    => preprocessor directives
You can include multiple header file in single program.
#include<stdio.h>
#include<string.h>
main()
{

}
There are 21 or 24 header files in C language.

#include"stdio.h"    //This is correct directive
"" is used for including userdefined header file in program.
First search header file in all your directories then go to lib folder.
#include<stdio.h>  // Directly search on lib folder to get content of stdio.h

2) comment
---------------
It is used for documentation.
compiler ignores documentation.
There are two types of comments.
a) single line comment
b) multiline comment
Single line comment
// this is single line comment

Multiline comment
/*
     This is c programming
     I like c language
*/


main()
--------------
It is user defined function but name is predefined.
main()
{      //starting of main block

}      //Ending of main block
Execution always start with main() function.
In C program, 1 main function is needed.
main function is written in following format
--------------------------------------------
1)
#include<stdio.h>
main()
{

}
2)
#include<stdio.h>
int main()
{

  return 0;
}
3)
#include<stdio.h>
void main()
{

}

program to print name and your section
---------------------------------------

#include<stdio.h>
int main()
{
   printf("Name: Rohit Kumar");
   printf("Section: A");  
   return 0;
}

prog2.c


Output/Input statement
-----------------------------
Output statement is used to print content on monitor.
printf() is predefined function to print contents.
It is part of stdio.h header file.
printf("Hello");    //Hello
printf("   Hi");    //    Hi
printf("hello\nHi");   //hello newline Hi
printf("10+2");        //10+2

#include<stdio.h>
int main()
{
   printf("Hello");
   printf(" Hi");
   printf("\nBye");  
   return 0;
}

Escape sequence: It is always start with \
\n  => It is type of escape sequence  to print new line.
\t => It prints tab space(5space)
\b => It is used for backspace
\\ => It is used to print \

   printf("hello\b55");     //hell55
  
printf("Hello\b\bBB");    //HelBB

#include<stdio.h>
int main()
{
   printf("\nHello\b\b\b9");   //He9lo
   printf("\nHi\b\bHH");       //HH
   printf("\nBye\b\b\bBYE");  //BYE
   return 0;
}

program to print \ using c
----------------------------
#include<stdio.h>
int main()
{
  printf("\\");      //\
  return 0;
} 

printf("\\\\\\");    //output   \\\


input statement in c
-------------------------
It is used to accept user input.
scanf() function is used to take user input.
It is declared in stdio.h header file.
scanf() function take all types of input[int,float,char,double,string etc].
syntax of scanf()
------------------
scanf("format string",&var);

%d => integer data type
%f => float data type
%c => character data type
%s => string data type

variable is used to store data. It is declared with data type.
variable name must be single word.
Start with character.

int n;
float num;
char sec;
char name[10];

n,num,sec and name are varible.
int,float and char are data types.

program to accept two int numbers and display
----------------------------------------------

#include<stdio.h>
int main()
{
  int n1,n2;
  printf("Enter two int numbers:");
  scanf("%d", &n1);
  scanf("%d", &n2);
  printf("n1=%d",n1);
  printf("n2=%d",n2);
  return 0;
} 

printf("%d",10);    //10

printf("res=%d", 10);  //res=10

int n=50;
printf("%d",n);   //50
printf("n=%d",n); //n=50
printf(n);    //error

printf("%d", 10+30);   //40
printf("%c",'A');    //A
printf("%c%c",'A','B');  //AB

102030
printf("%d%d%d",10,20,30);
A20B
printf("%c%d%c",'A',20,'B');

10-2B
printf("%d%d%c",10,-2,'B');
10-B2
printf("%d-%c%d",10,'B',2);
You can accept multiple value using scanf()
------------------------------------------
#include<stdio.h>
int main()
{
  int n1,n2;
  printf("Enter two int numbers:");
  scanf("%d%d", &n1,&n2);
  printf("sum=%d",n1+n2);
  return 0;
} 
 
+ => Addition
-  => substraction
*  => Multiplication
/  => division
===========================================================================
DS Homework[1July2021]
--------------------------
Q1 Find the output of following
a)printf("\n\n");
b)printf("  ");
c)printf("Hello student");
d)printf("Hello\tstudent");
e)printf("Hello\nstudent");
f)printf("Hello\\student");
g)printf("Hello\b\b\b\bG");
h)printf("110\b\b5");
i)printf("%d%d",10,10-5);
j)printf("%f",10.4);
k)printf("%s","Hello student");
l)printf("%c",'A');
m)printf("%c",'A'+2);
Q2 program to accept three integer and print all.
Q3 program to accept two integer and find their sum.
Q4 program to accept four integer and find their multiplication result.
Q5 program to accept two integer and find division
Q6 program to print your personal details [name,sec,branch and city]
Q7 program to print your education details
Q8 program to print subject details of current sem.
==========================================================================
program to accept two number and print.

Enter first number:10
Enter second number:30

first number:10
Second number:30

#include<stdio.h>
int main()
{
    int n1,n2;
    printf("Enter first number:");
    scanf("%d",&n1);
    printf("Enter second number:");
    scanf("%d",&n2);
    printf("first number:%d",n1); 
    printf("Second number:%d",n2);
   return 0;   
}

\b=> It is used for backspace.
printf("Hello");
printf("\b\bBye");       // HelBye

printf("18\b90");    //190 
printf("Hello\b\b\b\bGH");   //HGHlo

program to swap two numbers
--------------------------------
swap means interchange value of two variable.


n1=10
n2=20
output=> n1=20 n2=10

1)using third variable
     int n1=10,n2=20,temp;
     temp=n1;
     n1=n2;
     n2=temp

temp=10
n1=20
n2=10
#include<stdio.h>
int main()
{
    int n1,n2,temp;
    printf("Enter first number:");
    scanf("%d",&n1);
    printf("Enter second number:");
    scanf("%d",&n2);
     temp=n1;
     n1=n2;
     n2=temp;
    printf("first number:%d",n1); 
    printf("Second number:%d",n2);
   return 0;   
}
TestCase[pass different types of value to check whether the logic is correct or not.]
  10 20
  -10 20
  -5 -2
   0 10
   10 -6   
   10 0
2) without using third variable
n1=10
n2=20

  n1=n1+n2;
  n2=n1-n2;
  n1=n1-n2;

n1=10 =>30 => 20
n2=20 =>10

#include<stdio.h>
int main()
{
    int n1,n2;
     printf("Enter first number:");
     scanf("%d",&n1);
     printf("Enter second number:");
     scanf("%d",&n2);
      n1=n1+n2;
      n2=n1-n2;
      n1=n1-n2;
     printf("first number:%d",n1); 
     printf("Second number:%d",n2);
   return 0;   
}
n1=10 =>50 =>5
n2=5=>10
n1=n1*n2;
n2=n1/n2;
n1=n1/n2;

#include<stdio.h>
int main()
{
    int n1,n2;
     printf("Enter first number:");
     scanf("%d",&n1);
     printf("Enter second number:");
     scanf("%d",&n2);
      n1=n1*n2;
      n2=n1/n2;
      n1=n1/n2;
     printf("first number:%d",n1); 
     printf("Second number:%d",n2);
   return 0;   
}

program to separate decimal number
-----------------------------------
#include<stdio.h>
int main()
{
   float num;
   int r;
   printf("Enter a number:");
   scanf("%f", &num);
   r=(int)num; 
   printf("%d\n",r);
   printf("%f", num-r);
  return 0;
}

Enter a number:10.5
10
0.500000

program to round off number
---------------------------
Enter a number: 10.5     => 11
Enter a number: 5.4      => 5
Enter a number: 5.8      => 6

#include<stdio.h>
int main()
{
   float num;
   int r;
   printf("Enter a number to get Roundoff:");
   scanf("%f", &num);
   r=(int)num; 
    (num-r)>=0.5f?printf("Round off:%d",r+1):printf("Round off:%d",r);
  return 0;
}

Enter a number to get Roundoff:10.5
Round off:11

Array
--------------
It is basic data structure to store similar type of value in continuous memory location.
Single variable is going to store multiple value.
example
----------
int n=10;
n=20;
n=30;
printf("%d",n);   //30
If I want to store all above values in n so we need array.

int n[3]={10,20,30};

int arr;      //not array
int arr[5];   //array with 5 capacity
int [5]arr;   //not valid in C
int arr(3);   //not array

Array is declared with subscript. Subscript defines size of the array.
Subscript must be non-zero positive integer value.
int num[4];   //integer array with 4 capacity
float marks[10];   //float array with 10 capacity
char name[40];     //character array with 40 capacity or String with 39+1null capacity 

Array index always start with zero.
Array element is accessed using name and array index. If array size is n then index upto n-1
              0  1  2   3  4 => array index
int rolls[5]={10,20,30,40,50};
Array size=>5
indexes=> 0 1 2 3 4
Array Elements => 10 20 30 40 50

Access Array elements
-------------------------
Use array name and index.
printf("%d", rolls[0]);    //10
printf("%d", rolls[4]);    //50
printf("%d", rolls[2]);   //20
printf("%d", rolls[0]);
printf("%d",rolls[2]);
printf("sum=%d", rolls[0]+rolls[4]);

#include<stdio.h>
int main()
{
  int num[4]={10,20+30,2*3,20-30};
  printf("%d", num[2]);
  printf("%d", num[3]); 
 return 0;
}
============================================================================
DS Homework[3July2021]
===========================
Q1 program to swap two float numbers using third variable.
Q2 program to swap two characters using third variable.
Q3 program to swap two float numbers without using third variable.
Q4 program to find sum of each digit in two digit number.
#include<stdio.h>
int main()
{
   int n,dig1,dig2;
   printf("Enter two digit numbers:");
   scanf("%d",&n);
   dig1=n/10;
   dig2=n%10;
   printf("Sum of digits:%d", dig1+dig2);
   return 0
}
Q5 program to print unit and tens digit of number in separate line.
   Enter a number:24   [unit digit=4 tens digit=2]
   2  
   4
Q6 program to identify single digit number.
#include<stdio.h>
int main()
{
   int n;
   printf("Enter a number:");
   scanf("%d",&n);
   if(n%10==n)
    printf("single digit number");
   return 0;
}
Q7 program to find multiplication of each digit in two digit number
Q8 program to store 1 to 5 numbers in array and print 
  int num[5]={1,2,3,4,5};
Q9 program to store float numbers in array and print.
#include<stdio.h>
int main()
{
   float num[5]={10.4,5.6,7.8,3.5,8.7};
   printf("%f",num[0]);
   printf("%f", num[1]);
   printf("%f",num[2]);
   printf("%f", num[3]);
   printf("%f",num[4]);
   return 0;
}
Q10 find the output
a) int num[5]={10,0-10,10*20,20}; //print all elements
b) int n[2];   //print all elements of n array
c) int roll[5]={10,20}; //print all elements of roll array
d) char vowel[5]={'a','e','i','o','u'};  //print all elements of vowel array
e) char alpha[5]={'a'+1,'B'-1, 'C','d'+2, 'F'+1};  //print all elements of alpha array
g) float marks[4]={2.5,6.8,4.5,9.5,3.4}; //print all elements of marks array
h) int m[5]={10*2, 8/2, 3-4, 10+9, 10+3-2 }; //print all elements of m array
========================================================================================
check number is single digit or not
--------------------------------------
 n%10==n   => single digit number
n=8
8%10=>8

#include<stdio.h>
int main()
{
  int n ;   
  printf("Enter a number:");
  scanf("%d",&n);
  if(n%10==n)
    printf("single digit no");
  else if(n%100==n)
   printf("two digit no");
  return 0;
}
5 => single digit
55 => two digit
555 => no output

Array elements is printed using loop.
Loop is used for repeatative task.
it works according to three statements.
1) Initial value
2) condition
3) update expression

0 1 2 3 4 5
intial value=> 0
condition=> <=5
update exp=> +1

There are two types of loop.
1) entry controlled loop
    -for() ,while()
2) exit controlled loop
    do-while()

for(initial value;condition;updateexpr)
   statement to be repeat.

initial value;
while(condition)
{
   statement to repeat
   update exp
}

1 2 3 4 5 
#include<stdio.h>
main()
{
     int i;
     for(i=1;i<=5;i++)
         printf("Ramesh "); 
}

#include<stdio.h>
int main()
{                  
     int i,num[5]={11,22,33,44,55};
     for(i=0;i<5;i++)
         printf("%d ",num[i]); 
  return 0;
}

program to print contents of float array.
#include<stdio.h>
int main()
{                  
     int i;
      float num[5]={1.1,2.2,3.3,4.4,5.5};
     for(i=0;i<5;i++)
         printf("%f ",num[i]); 
  return 0;
}
program to print contents of char array
#include<stdio.h>
int main()
{                  
     int i;
      char alpha[5]={'A','B','C','D','E'};
     for(i=0;i<5;i++)
         printf("%c ",alpha[i]); 
  return 0;
}
program to print ASCII code of array elements
----------------------------------------------
#include<stdio.h>
int main()
{                  
     int i;
      char alpha[5]={'A','B','C','1','2'};
     for(i=0;i<5;i++)
         printf("%d ",alpha[i]); 
  return 0;
}

program to print array elements and ASCII code
-----------------------------------------------
#include<stdio.h>
int main()
{                  
     int i;
      char alpha[5]={'A','B','C','1','2'};
     for(i=0;i<5;i++)
         printf("%c => %d\n",alpha[i],alpha[i]); 
  return 0;
}

program to print alternate elements of array.
-----------------------------------------------
10 20 30 40 50 60 70 80 90 100
 0 1   2 3   4  5  6  7  8  9 => array index
#include<stdio.h>
int main()
{                  
     int i , num[10]={10,20,30,40,50,60,70,80,90,100};
     for(i=0;i<10;i++)
        if(i%2==0)
          printf("%d ",num[i]); 
  return 0;
}

program to print even element from the array
---------------------------------------------
#include<stdio.h>
int main()
{                     
     int i , num[10]={11,21,30,40,5,60,70,80,99,100};
     for(i=0;i<10;i++)
        if(num[i]%2==0)
          printf("%d ",num[i]); 
  return 0;
}

program to find sum of array elements
--------------------------------------
#include<stdio.h>
int main()
{                  
     int i ,s=0, num[5]={10,20,30,40,50};
     for(i=0;i<5;i++)
        s=s+num[i];
     printf("Sum=%d ",s); 
  return 0;
}

program to find sum of odd array elements
--------------------------------------------
#include<stdio.h>
int main()
{                  
     int i ,s=0, num[5]={11,20,31,45,50};
     for(i=0;i<5;i++)
       if(num[i]%2!=0)
          s=s+num[i];
     printf("Sum of odd elements=%d ",s); 
  return 0;
}

program to take user input in array
#include<stdio.h>
int main()
{                  
     int i ,s=0, num[5];
     printf("Enter 5 elements:");
     for(i=0;i<5;i++)
         scanf("%d",&num[i]);
     for(i=0;i<5;i++)
      printf("%d",num[i]); 
  return 0;
}
==============================================================================
DS&C Homework[6July2021]
-----------------------------
Q1 program to print alternate elements of following array.
a) ['A','B','C','D','E','F','G','H','I','J']
b) [11,22,33,44,55,66,77,88,99,100]
c) [2.5,3.5,6.7,8.9,8.0,9.9,5.6,7.6,4.5,1.1]
Q2 program to print following series
a) 5 10 15 20 25 30 35 40 45 50
b) a b c d e f g h i j k l m n o p q r s t u v...z
c) 11 22 33 44 55 66 77 88 99 
Q3 program to print sum of odd array elements
 [11,24,35,60,90,99,25,51,45,42] 
Q4 program to find sum of even and odd array elements
[10,11,12,13,14,15,16,17,18,19,20]
Q5 program to find sum of alternate array elements.
[1,2,3,4,5,6,7,8,9,10]
Q6 program to find smallest array element.
[11,3,4,5,1,10,-2,19,51,17]
Q7 program to find biggest array element.
[11,3,4,5,1,10,-2,19,51,17]
#include<stdio.h>
int main()
{
   int big,i, num[10]={11,3,4,5,1,10,-2,19,51,17};
     big=num[0];
    for(i=1;i<10;i++)
       if(num[i]>big)
         big=num[i];
   printf("Biggest element=%d",big);
   return 0;
}
Q8 program to find out of following array.
 a) int i,num[5]={11,22,33,44,55}; 
    for(i=1;i<5;i++)
      printf("%d ",num[i]);
b)int i,num[5]={11,22,33,44,55}; 
    for(i=0;i<=4;i++)
      printf("%d ",num[i]);
c)int i,num[5]={11,22,33,44,55}; 
    for(i=0;i<5;i++)
      printf("%d ",num[i]+1);
d)int i,num[5]={11,22,33,44,55}; 
    for(i=1;i<5;i++)
      printf("%d ",num[i+1]);
e) int i,num[5]={11,22,33,44,55}; 
    for(i=1;i<5;i++)
      printf("%d ",num[i]-1);
f) int i,num[5]={11-1,22+3,33-3,44*2,55}; 
    for(i=0;i<5;i++)
      printf("%d ",num[i]*2);
Q9 program to print array elements in reverse form.
  num[10]={11,3,4,5,1,10,-2,19,51,17};
===========================================================================
program to take user input in array
#include<stdio.h>
int main()
{                  
     int i ,s=0, num[5];
     printf("Enter 5 elements:");
     for(i=0;i<5;i++)
         scanf("%d",&num[i]);
     for(i=0;i<5;i++)
      printf("%d",num[i]); 
  return 0;
}
===================================
sum of even and odd elements of an array.
#include<stdio.h>
main()
{
 int i,es=0,os=0,num[10]={11,30,20,3,50,12,9,7,5,10};
 for(i=0;i<10;i++)
   if(num[i]%2==0)
     es=es+num[i];
   else
    os=os+num[i];
 printf("Sum of even elements=%d",es);
 printf("Sum of odd elements=%d",os);
}

Find greatest element in array
======================================

#include<stdio.h>
main()
{
  int i,great,num[10]={11,30,20,3,50,12,9,7,5,10};
   great=num[0];
  for(i=1;i<10;i++)
   if(num[i]>great)
     great=num[i];
 printf("Greatest element=%d",great);
}

great=11 30 50
i=1 2 3 4 5
program to find greatest alphabet in array
--------------------------------------------

printf("%d", 'A'<'B');   //65<66      output 1
printf("%d",'a'<'A');    //97<65      output 0

#include<stdio.h>
int main()
{
  int i;
   char great,alpha[5]={'D','b','a','J','C'};
   great=alpha[0];
  for(i=1;i<5;i++)
   if(alpha[i]>great)
     great=alpha[i];
 printf("Greatest element=%c",great);
 return 0;
}

User Input in Array
=============================
Scanf() function is used to take user input in array.
fflush(stdin) function is used to clear buffer incase of char input.
%c format string used in scanf().
#include<stdio.h>
main()
{
 char ch,ch1;
 printf("Enter two character:");
 scanf("%c", &ch);
 fflush(stdin);
 scanf("%c",&ch1);
  printf("%c%c",ch,ch1);
}

program to take small vowel as user input
-----------------------------------------
#include<stdio.h>
#include<stdlib.h>
main()
{
  char vowel[5];
  int i;
  printf("Enter small vowels:");
   for(i=0;i<5;i++)
    {
     fflush(stdin);
     scanf("%c", &vowel[i]);
    }
    for(i=0;i<5;i++)
       printf("%c ", vowel[i]);    
}

program to take 5 roll input in array
------------------------------------
#include<stdio.h>
main()
{
  int roll[5];
  int i;
  printf("Enter five rolls:");
   for(i=0;i<5;i++)
     scanf("%d", &roll[i]);
    for(i=0;i<5;i++)
       printf("%d ", roll[i]);
 }
program to take 5 float input in array
----------------------------------------
#include<stdio.h>
main()
{
  float marks[5];
  int i;
  printf("Enter five marks:");
   for(i=0;i<5;i++)
     scanf("%f", &marks[i]);
    for(i=0;i<5;i++)
       printf("%.1f ", marks[i]);
 }

8.5  =8.500000   8.5
%.2f => after decimal 2 dig
%.f  => display round off value

 printf("%.f", 10.5);  //11
 printf("%.f",10.4);   //10

1) Traverse => print contents of an array. It is used loop to print array element.
#include<stdio.h>
main()
{
  float marks[5]={10.4,5.5,6.8,2.3,1.4};
  int i;
  printf("Round off value:");
    for(i=0;i<5;i++)
       printf("%.f ", marks[i]);
 }
    
Insert operation in array
-------------------------------
int num[10]={11,22,33,44,55};

       num[0] num[1] num[2] num[3] num[4] num[5] num[6] num[7] num[8] num[9]
        11	22	33	44    55     0     0      0      0     0	
        11      11       22     33     44     55 
Insert an element at beginning position of an array

for(i=5;i>0;i--)
  num[i]=num[i-1];
num[i]=iele;

#include<stdio.h>
int main()
{
  int i,num[10],n,iele;
  printf("Enter number elements for array:");
  scanf("%d",&n);
  printf("Enter %d elements:",n);
   for(i=0;i<n;i++)
     scanf("%d", &num[i]);
 printf("Enter inserting element:");
 scanf("%d",&iele); 
  for(i=n;i>0;i--)
    num[i]=num[i-1];
   num[i]=iele;
  printf("New Array after insertion\n");
    for(i=0;i<=n;i++)
       printf("%d ", num[i]);
  return 0;
 }
=======================================================================
DS&C Homework[8July2021]
==============================
Q1 program to find largest alphabet in following array.
   char alpha[10]={'a','d','v','z','Z','e','g','k','y','p'};
Q2 program to find smallest alphabet in following array.
   char alpha[10]={'c','d','v','z','Z','e','g','k','B','p'};
Q3 program to find sum of largest and smallest element.
   int num[10]={11,2,3,4,55,6,7,8,20,17};
Q4 program to print all alternate alphabet in capital form.
  char alpha[26]={'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
  printf("%c",alpha[0]-32);  => A
Q5 program to find digit's sum of array element.
  int num[10]={22,34,56,76,11,32,38,98,49,21};
Q6 program to insert 99 in second position.
   int num[10]={11,22,33,44,55,66};
Q7 program to insert 'Z' alphabet in first position.
   char alpha[10]={'A','B','C','D','E','F'};
Q8 program to insert 'C' at second position 
  char alpha[10]={'A','B','K','D','E','L'}; 
Q9 program to print repeated number in array.
  int num[10]={22,34,21,76,11,34,38,11,49,21};
Q10 find the output
a) char alpha[5]={'A','B','C','D','E'};
   printf("%c", alpha[0]+32);
   printf("%d", alpha[0]);
   printf("%c", alpha[2]+3);
   printf("%c", alpha[1+2]);
b) int num[5]={11,22,33,44,55};
   printf("%d ", num[0+2]);
   printf("%d ", num[0]+2);
   printf("%d ", 10+num[3]);
   printf("%d ", num[1]-num[2]);
c) printf("%d", 'a');
   printf("%c", 'a'+5);
   printf("%c", 'D'-1);
   printf("%c", 'F'+2);
   printf("%d",'1');
   printf("%c", '8'+1);
   printf("%d", '1'+1);
   printf("%.f", 10.9);
   printf("%.2f",8.5);
d) int num[5]={10,20,30,40,65};
   printf("%d", num);
   printf("%d", 10-num[0]);
   printf("%d", num[0]-num[1]);
   printf("%d", num[0]%num[1]);
   printf("%d", &num[1]);
   printf("%c", num[4]);
=======================================================================
insertion operation in array
--------------------------------

int num[10]={11,22,33,44,55};

num[0]  num[1]  num[2]  num[3]  num[4]  num[5]   num[6]  num[7]   num[8]   num[9]
11	22	33	44	55	0	  0	   0      0        0

for(i=5;i>0;i--)
   num[i]=num[i-1];

num[i]=iele;

Insertion operation
----------------------
Insert an element in array
 1) Begininng position
 2) Any position
 3) last position

Insert at any position
------------------------
shift array element upto position.
Insert value at positon.

int num[10]={11,22,33,44,55};
int pos=2;
for(i=5;i>pos;i--)
  num[i]=num[i-1];
num[i]=iele


Insert at last position
-------------------------------
Insert element at last position.
int num[10]={11,22,33,44};
int n=4;
num[n]=iele;

Deletion operation in Array
-------------------------------
Delete an element from the array.
 1) Deletion of first element
 2) Deletion of particular element
 3) Deletion of last element.

Deletion of first element
----------------------------
int num[10]={11,22,33,44};
int n=4;

 num[0]  num[1]  num[2]  num[3]
 11	  22	 33 	 44

int num[10]={11,22,33,44,55,66};
int n=6;
for(i=0;i<n;i++)
   num[i]=num[i+1];
for(i=0;i<n-1;i++)
 printf("%d ",num[i]);

Deletion of particular element
------------------------------
Take position as input and shift value from position to end.
int main()
{
   int num[10], pos, n,i;
   printf("Enter number of elements for array:");
   scanf("%d",&n);
   printf("Enter %d elements:",n);
   for(i=0;i<n;i++)
     scanf("%d",&num[i]);
   printf("Enter position for delete:");
   scanf("%d",&pos);
   for(i=pos-1;i<n;i++)
     num[i]=num[i+1];
   for(i=0;i<n-1;i++)
    printf("%d ",num[i]);
return 0;
}

Deletion of last element
--------------------------------
int num[10]={11,22,33,44,55,66};
int n=6,i;
for(i=0;i<n-1;i++)
  printf("%d ",num[i]);


Traversing
-------------------
It is printing of elements from the array.
Forward traversing: print elements from 0 index to end.
Backward traversing: print elements from end to 0th index.

forward traversing
------------------------
main()
{
     int num[10]={11,22,33,44,55};
     int n=5,i;
     for(i=0;i<n;i++)
       printf("%d ", num[i]);     
}

main()
{
     int num[10]={11,22,33,44,55};
     int n=5,i;
     for(i=0;i<n;i++)
       printf("num[%d]= %d\n",i,num[i]);     
}

Backward Traversing
----------------------
print element in backward direction.
main()
{
     int num[10]={11,22,33,44,55};
     int n=5,i;
     for(i=n-1;i>=0;i--)
       printf("%d ", num[i]);     
}

main()
{
     int num[10]={11,22,33,44,55};
     int n=5,i;
     for(i=n-1;i>=0;i--)
       printf("num[%d]= %d\n",i,num[i]);     
}

print alternate element
-----------------------
main()
{
     int num[10]={11,22,33,44,55};
     int n=5,i;
     for(i=0;i<n;i++)
      if(i%2!=0)
       printf("%d ", num[i]);     
}

sizeof() : It is an operator to return size.
           It is always return positive integer value.
main()
{
  char ch='A';
  printf("%d ", sizeof(int));     
  printf("%d ",sizeof(char));     
  printf("%d ", sizeof(float));  
  printf("%d ", sizeof(ch));
}

calculate size of int array
main()
{
   int num[5];
   printf("%d ", sizeof(num));
}

calculate size of char array
main()
{
   char vowel[5];
   printf("%d ", sizeof(vowel));
}

program to print first half of array elements
----------------------------------------------

main()
{
   int num[10]={11,22,33,44,55,66,77,88,99,100};
   int i, n=10;
   for(i=0;i<n/2;i++)
     printf("%d ", num[i]);
}

program to print array elements whose digits are same
-------------------------------------------------------
main()
{
   int num[10]={11,21,33,41,55,76,77,88,12,100};
   int i, n=10;
   for(i=0;i<n;i++)
      if(num[i]%10==num[i]/10)
          printf("%d ", num[i]);
}
===========================================================================
DS&C Homework[10July2021]
----------------------------------
Q1 program to print second half elements from an array.
   num[10]={11,22,33,44,55,66} n=6
Q2 program to print first half elements from an array.
   num[10]={11,22,33,44,55,66}
Q3 program to print array elements whose first digit is smaller than second digit.
   num[10]={10,21,31,23,56,45,65,89,99,43} n=10
Q4 program to print sum of array element's digits whoose digit in increasing order.
     num[10]={10,21,31,23,56,45,65,89,79,43} n=10
Q5 program to delete second element from an array.
     num[10]={10,21,31,23,56,45,65,89,99,43} n=10
Q6 program to delete second last element from an array
      num[10]={10,21,31,23,56,45,65,89,99,43} n=10
Q7 program to add first half and second half elements.
      num[10]={10,11,12,13,16,45,15,89,99,33} n=10
Q8 program to add odd elements in first half of an array.
    num[10]={11,22,15,16,18,19,20,5,6,7} n=10
Q9 program to add even elements in second half of an array.
    num[10]={11,22,15,16,18,19,20,5,6,7} n=10
Q10 find the output
a)
  int num[5]={11,22,33,44};
  printf("%d ", sizeof(num));
  printf("%d ", sizeof(num[2]));
  printf("%d ", sizeof(num[1]+num[2]));
  printf("%d ", sizeof(10));
b)
   char alpha[5]={'A','B','C'};
   printf("%d ", sizeof(alpha));
   printf("%d ", sizeof(alpha[2]));
c)
   float num[10]={1.2,3.5,6.7,8.9};
   printf("%d ", sizeof(num));
   printf("%d ", sizeof(num[1]));
   printf("%d ", sizeof(num[0]+num[2]));
=========================================================================
sum of array element whose digit in increasing order
-----------------------------------------------------
#include<stdio.h>
main()
{
 int num[5]={11,12,23,10,34}, i,s=0;
 for(i=0;i<5;i++)
 {
    if(num[i]%10>num[i]/10)
     s=s+num[i];
 }
  printf("Sum=%d",s);
}

program to separate even and odd element 
-----------------------------------------
#include<stdio.h>
main()
{
int num[10]={11,22,23,34,54,55,78,80}, n=8,i;
printf("Even elements are:\n");
for(i=0;i<n;i++)
   if(num[i]%2==0)
    printf("%d  ",num[i]);
printf("Odd elements are:\n");
for(i=0;i<n;i++)
   if(num[i]%2!=0)
    printf("%d  ",num[i]);
}

Character array is called string. String always end with '\0'(null).
It is denoted by "".
& is not required in string input. String represent starting address.
 char name[10];    //incase of string, keep maximum 9 character with null[9char+1null]
Null character is terminator.
%s format string is used.
#include<stdio.h>
main()
{
    char name[10]="welcome";   //string
    char vowel[5]={'a','e','i','o','u'};    //character array
    char vowels[6]="aeiou";    //string
    printf("%s\n", name);
    printf("%s\n",vowel);
    printf("%s\n", vowels);
}

            0 1 2 3 4 5 6 7
name[10] => w e l c o m e \0   printf("%s",name);   welcome
            0 1 2 3 4
vowel[5] => a e i o u          printf("%c%c%c%c%c", vowel[0],vowel[1],vowel[2],vowel[3],vowel[4]);

#include<stdio.h>
main()
{
    char name[10]="welcome";   //string
    char vowel[5]={'a','e','i','o','u'};    //character array
    char vowels[6]="aeiou";    //string
    printf("%s\n", name);
    printf("%c%c%c%c%c\n", vowel[0],vowel[1],vowel[2],vowel[3],vowel[4]);
    printf("%s\n", vowels);
}

String input
-------------------
scanf() function is used to take string as a input. %s format string is used.
scanf() is formated function. It means format string is compulsory during input.
scanf() function is terminated when space is encountered.
 char name[10];
 scanf("%s",name);
program to take your name as input 
-------------------------------------------------
#include<stdio.h>
main()
{
     char name[10];
     printf("Enter your name:");
     scanf("%s", name);
     printf("Welcome %s",name);
}

Enter your name:

gets()
It is predefined function to take sentence as a input.
It is unformated function. It means format string is not required.
It is fixed for string input.

program to take full name as input
------------------------------------
#include<stdio.h>
main()
{
     char name[50];
     printf("Enter your name:");
     gets(name);
     printf("Welcome %s",name);
}

Print string as character
----------------------------
%c format string is used to print charater.
loop is required.
program to take name as input and print each letter in separate line
--------------------------------------------------------------------
#include<stdio.h>
main()
{
    char name[6]="hello";
     printf("%c\n", name[0]);
     printf("%c\n", name[1]);
     printf("%c\n", name[2]);
     printf("%c\n", name[3]);
     printf("%c\n", name[4]);
}

By loop
------------
#include<stdio.h>
main()
{
    char name[6]="hello";
    int i;
    for(i=0;name[i];i++)
     printf("%c\n", name[i]);
}


#include<stdio.h>
main()
{                   
     char name[50]; 
      int i;
     printf("Enter your name:");
     scanf("%s",name);
      for(i=0;name[i]!='\0';i++)
        printf("%c\n",name[i]);
}


program to separate character and digit sdeq12rdfg45a

#include<stdio.h>
main()
{
    char input[50];
    int i;
   printf("Enter alphanumeric String : ");
   scanf("%s",input);
    printf("Alphabets: ");
    for(i=0;input[i];i++)
      if(input[i]>=97&&input[i]<=122)
        printf("%c", input[i]);
      printf("\nDigits: ");
    for(i=0;input[i];i++)
      if(input[i]>=48&&input[i]<=58)
        printf("%c", input[i]);
}

program to take string with capital and small letter. separate capital and small[A-Z ASCII=>65-90, a-z ASCII=>97-122]
--------------------------------------------------------------------------------
#include<stdio.h>
main()
{
    char input[50];
    int i;
   printf("Enter String with capital and small letters : ");
   scanf("%s",input);  ABdcfR
    printf("Capital Alphabets: ");
    for(i=0;input[i];i++)
      if(input[i]>=65&&input[i]<=90)
        printf("%c", input[i]);
      printf("\nSmall Alphabets: ");
    for(i=0;input[i];i++)
      if(input[i]>=97&&input[i]<=122)
        printf("%c", input[i]);
}
=========================================================================
DS&C Homework[12July2021]
-------------------------------
Q1 program to print only unit digit of array elements
 num[10]={11,32,64,98,197,51,7,65,26,43}, n=10
Q2 program to print tens digit of array elements.
 num[10]={91,32,64,98,197,51,57,65,26,43}, n=10
Q3 program to print array elements containing zero at unit place
  num[10]={91,32,64,90,10,51,57,65,20,43}, n=10
Q4 program to print array elements containing non-zero at unit place
  num[10]={90,33,64,30,10,54,57,60,20,43}, n=10
Q5 program to print array elements containing more than two digit.
  num[10]={190,33,614,303,10,54,517,160,20,4553}, n=10
Q6 program to print all  negative array elements.
  num[10]={190,-33,614,303,-10,54,-517,-160,20,4553}, n=10
Q7 program to print array elements with more than two digit.
  num[10]={190,33,614,303,10,54,517,160,20,4553}, n=10
Q8 program to print characters with tab space
   char str[20]="Welcome Student";
Q9 program to count number of characters in String.
   char str[15] ="welcome";
Q10 program to print first and last character of string.
   char str[15]="Student";
Q11 Find output
  a) char str[15]="Welcome";
     printf("%c", str[0]);
     printf("%c", str[2]);
     printf("%d", str[3]);
  b) char str[15]="ABCD";
      printf("%d", str[0]);
      printf("%d", str[1]);
      printf("%d", str[2]);
 c) char str[15]="1234";
      printf("%d", str[0]);
      printf("%d", str[1]);
      printf("%d", str[2]);
 d) char str[15]="abcd";
      printf("%d", str[0]+1);
      printf("%c", str[1]+1);
      printf("%d", str[2]+1);
=============================================================================
DS&C OutputQuestion[14July2021]
-------------------------------------
a) int i, num[5]={11,22,33,44,55};
for(i=0;i<5;i++)
  printf("%d ", num[i]);
  printf("%d", num[i-1]);
b) int i, num[5]={11,22,33,44,55};
for(i=1;i<5;i++)
  {
    printf("%d ", num[i]);
    printf("%d", num[i-1]);
  }
c) int i;
 char str[10]="welcome";
  for(i=0;str[i];printf("%c ",str[i++]));
d) int i;
  char str[10]="welcome";
  for(i=0;str[i];i++);
   printf("Length=%d ",i);
e) int i;
   char str[10]="welcome";
   printf("%s\n", str);
   printf("%s\n", str+1);
   printf("%s", str+2);
f)int i;
  char str[]="Hello student";
    printf("%d ",sizeof(str));
    printf("%c", str[1]-32);
g) int i;
   char str[10]="welcome";
   printf("%s\n", str);
   for(i=0;str[i];printf("%c", str[i++]-32));
h) int i, num[]={10,20};
   printf("%d", sizeof(num));
   printf(" %d %d",num[0],num[1])
=======================================================
[9:10 pm, 15/07/2021] Rahul Sir Tat: while loop
==================
It is also entry controlled loop.
It works according to three statements.
Initial value: starting value
condition: end point
update : mathematical expression

syntax
---------
  Initial value;
  while(condition)
  {
      statement to repeat;
     update expression
  }
program to print 1 to 10 number using while loop
------------------------------------------------
#include<stdio.h>
main()
{
    int i=1;
    while(i<=10)
    {
       printf("%d ", i);
       i++;
    }
}
1 2 3 4 5 6 7 8 9 10

program to print 10 to 1 number
-----------------------------------
 10 9 8 7 6 5 4 3 2 1
#include<stdio.h>
main()
{
    int i=10;
    while(i>=1)
    {
       printf("%d ", i);
       i--;
    }
}

program to print charaters of string using while loop
-----------------------------------------------------
Enter String: welcome
 wweellccoommee

#include<stdio.h>
main()
{
    int i;
    char str[50];
    printf("Enter string:");
    gets(str);
     i=0;
    while(str[i])
    {
       printf("%c%c", str[i],str[i]);
       i++;
    }
}

program to print alternate letter in capital form
----------------------------------------------------
Enter String: welcome
   WeLcOmE
#include<stdio.h>
main()
{
    int i;
    char str[50];
    printf("Enter string in small case:");
    gets(str);
     i=0;
    while(str[i])
    {
      if(i%2==0)
       printf("%c", str[i]-32);
      else
       printf("%c",str[i]);
       i++;
    }
}

program to remove space from sentence
----------------------------------------
Enter sentence: This is c language
  Thisisclanguage
#include<stdio.h>
main()
{
    int i;
    char str[50];
    printf("Enter sentence:");
    gets(str);
     i=0;
    while(str[i])
    {
      if(str[i]==' ')
       printf("");
      else
       printf("%c",str[i]);
       i++;
    }
}
Enter sentence: This is c language
  This$is$c$language
program to convert sentence in abbribiation form
---------------------------------------------------
Enter full form:hyper text markup language
 html
013456789
hyper text markup language
#include<stdio.h>
main()
{
    int i;
    char str[50];
    printf("Enter sentence:");
    gets(str);
     i=0;
    printf("%c",str[i]);
    while(str[i])
    {
      if(str[i]==' ')
       printf("%c",str[i+1]);
       i++;
    }
}
[9:10 pm, 15/07/2021] Rahul Sir Tat: #include<stdio.h>
main()
{
 int i;
 for(i=1;i<=10;printf("%d",i++));
}

#include<stdio.h>
main()
{
  int i,num[5]={11,22,33,44,55};
  for(i=0;i<5;printf("%d ",num[i++]));
}

#include<stdio.h>
main()
{
  int i;
  char str[]="welcome";
  for(i=0;str[i];printf("%c ",str[i++]));
}

#include<stdio.h>
main()
{
   int i;
   char str[20];
   printf("Enter a string:");
   scanf("%s", str);    //welcome
   for(i=0;str[i];i++);
   printf("Length=%d",i);  
}

find the length of the sentence
-----------------------------------
#include<stdio.h>
main()
{
   int i;
   char str[50];
   printf("Enter a sentence:");
   gets(str);    
   for(i=0;str[i];i++);
   printf("Length=%d",i);  
}
program to reverse the string
-----------------------------
Enter string:trident
 tnedirt
#include<stdio.h>
main()
{
   int i;
   char str[50];
   printf("Enter a string to reverse:");
   gets(str);    
   for(i=0;str[i];i++);
   for(i=i-1;i>=0;i--) 
     printf("%c",str[i]);  
}
  01234567
  trident\0
program to print each character with counter value
---------------------------------------------------
Enter string:welcome
  w1e2l3o4m5e6
#include<stdio.h>
main()
{
   int i;
   char str[50];
   printf("Enter a string:");
    gets(str);    
   for(i=0;str[i];i++) 
    printf("%c%d",str[i],i+1);  
}
program to print each letter with ASCII code
---------------------------------------------
 Enter String:abcd
 a97b98c99d100

#include<stdio.h>
main()
{
   int i;
   char str[50];
   printf("Enter a string:");
   gets(str);    
   for(i=0;str[i];i++) 
    printf("%c%d",str[i],str[i]);  
}

program to separate vowel from input string
-------------------------------------------
Enter String:welcome
   eoe
  char str[10]="welcome";
  if(str[i]=='a'||str[i]=='e'||str[i]=='i'||str[i]=='o'||str[i]=='u')
#include<stdio.h>
main()
{
   int i;
   char str[50];
   printf("Enter a string:");
   gets(str);    
   for(i=0;str[i];i++)
    if(str[i]=='a'||str[i]=='e'||str[i]=='i'||str[i]=='o'||str[i]=='u') 
     printf("%c",str[i]);  
}
program to print consonant from input string
----------------------------------------------
#include<stdio.h>
main()
{
   int i;
   char str[50];
   printf("Enter a string:");
   gets(str);    
   for(i=0;str[i];i++)
    if(str[i]=='a'||str[i]=='e'||str[i]=='i'||str[i]=='o'||str[i]=='u') 
     printf("");
    else
     printf("%c",str[i]);  
}

Algorithm
------------------------
It is step by step process to solve a particular problem.
You can write steps in any language but english is prefered language.
It is prestep of a program
It is part of problem solving. Mathematical terms are used.
Simple english terms are used in algorithm writing.

problem: Find sum of two numbers
algorithm
--------------
step1 : start
step2 : Input n1, n2
step3 : set sum=n1+n2
step4 : display sum
step5 : stop
 
problem: Find simple interest
algorithm
--------------
step1 : start
step2 : input p,r,t
step3 : set si= pXrXt/100
step4 : display si
step5 : stop

problem: check number is even or odd
algorithm
---------------
step1 : start
step2 : input n   10
step3 : if n modulus 2 = 0
         -Display Even
       else
         -Display Odd
step4 : stop

problem: check number is negative or positive

algorithm
-------------------
step1: start
step2: input n =-10
step3: if n less than 0
        -Display negative number
       else
          -Display positive number
step4: stop

looping in algorithm
=================================
problem: print 1 to 5 numbers
algorithm
------------------
step1 : start
step2 : set i=1
step3 : repeat step 4 & 5 while i <= 5
step4 :   Display i
step5 :   set i=i+1
step6 : stop

problem: print table of 5
algorithm
----------
step1 : start
step2 : set i=5
step3 : repeat step 4 & 5 while i <= 50
step4 :   Display i
step5 :   set i=i+5
step6 : stop

problem: find sum of 1 to 10 numbers
algorithm
---------------
step1 : start
step2 : set i=1,s=0
step3 : repeat step 4 & 5 while i <= 10
step4 :   set s=s+i
step5 :   set i=i+1
step6 : Display s
step7 : stop

problem: print alternate number from 1 to15
algorithm
---------
step 1 : start
step 2 : set   i =1
step 3 : repeat step 4 and 5 while i<=15
step 4 :display i
step 5 : set i = i + 2
step 6 : stop

problem: print elements of an array
algorithm
----------------
step1: start
step2: Input in array, i=1
step3: repeat step 4 & 5 i less than equal to length of array
step4:   display array[i]
step5:   set i=i+1
step6: stop

problem: print array in reverse form
algorithm
----------
STEP 1: START
STEP 2: INPUT IN ARRAY, i=LENGTH OF ARRAY
STEP 3: REPEAT STEP 4 AND 5 i greater THAN EQUAL TO 1 
STEP 4: DISPLAY ARRAY[i]
STEP 5: SET i=i-1
STEP 6: STOP
==========================================================================
DS&C Homework[15July2021]
----------------------------------
Q1 program to print vowel letter in two times in string
 Enter string: welcome
 output:weelcoomee
Q2 program to print space in place of vowel character in string
Enter string:welcome
 output:w lc m 
Q3 program to print all consonant in capital form.
Enter string:welcome
output:WeLCoMe
Q4 program to print half of the string[length=>5or6 upto 3 letter].
Enter String:welcome
output:welc
Q5 program to count vowel in the input string.
 Enter string:welcome
 vowel=3
Q6 program to count consonant in the input string.
Enter string:welcome
 consonant=4
Q7 program to count number of space in sentences.
  Enter sentence: This is c programming
  spaces: 3
Q8 program to accept string and print
 Enter string:welcome
 output:w7e6l5c4o3m2e1
Q9 program to accept string and print
 Enter string:welcome
 output:w*e*l*c*o*m*e*
Q10 program to separate symbol from the string
 Enter string:hhe$r2#bc~dg&h
 output:$#~&
================================================================
Algorithm
------------
Q1 Write algorithm to find average of three numbers
Q2 write algorithm to find si and amt
Q3 write algorithm to print even numbers between 2 to 20
Q4 write algorithm to print odd numbers between 1 to 15
Q5 write algorithm to print all even elements of an array
Q6 write algorithm to print all odd elements of an array
====================================================================
[8:52 pm, 17/07/2021] Rahul Sir Tat: W7e6l5c4o3m2e1
#include<stdio.h>
main()
{
     char str[20];
     int i,j;
     printf("Enter String:");
     gets(str);
     for(i=0;str[i];i++);
     for(j=0;str[j];j++)
      printf("%c%d",str[j],i--);
}
w*e*l*c*o*m*e*
main()
{
     char str[20]="Welcome";
     int i;
     for(i=0;str[i];i++)
      printf("%c*",str[i]);
}
hhe$r2#bc~dg&h
A-Z => 65-90
a-z => 97-122
0-9 => 48-57
main()
{
     char str[20]="hhe$r2#bc~dg&h";
     int i;
     for(i=0;str[i];i++)
     if(str[i]>=65&&str[i]<=90||str[i]>=97&&str[i]<=122||str[i]>=48&&str[i]<=57)
      printf("");
      else
      printf("%c",str[i]);
}
---------------------------------------------------------
num[]={11,2,10,8,17,19,20} n=7
step1 : start
step2 : input array num size and elements
step3 : set i=1
step4 : Repeat step 5 and 6 while i<=n
step5 : if num[i] modulus 2=0
          -Display num[i]
step6 : set i=i+1
step7 : stop 

function based algorithm
----------------------------
Function is self contained block of statement which performs specific task.

Traversal algorithm using function
------------------------------------
 array[5]={11,22,33,44,55}, n=5
 traverse(array, n)
step 1: set i=1
step 2: Repeat step 3 & 4 while i<=n
step 3:  Display array[i]
step 4:  set i=i+1
step 5: return

sum of array elements
--------------------------------
   sum_arr(array,n)
step 1: set i=1,s=0
step 2: Repeat step 3 & 4 while i<=n
step 3:  set s=s+array[i]
step 4:  set i=i+1
step 5: Display s
step 6: return

Algorithm for insert at begining position
------------------------------------------
 array[10]={11,22,33,44,55}, n=5,iele=100
 ins_beg(array,n,iele)
step1: set i=n+1
step2: repeat step 3 & 4 while i>1
step3:  set array[i]=array[i-1]
step4:  set i=i-1
step5: set array[i]=iele
step6: return

 array[10]={11,22,33,44,55}, n=5,iele=100
   1  2  3  4  5  6
  11 22 33 44 55
  11 22 33 44 55 55
  11 22 33 44 44 55
  11 22 33 33 44 55

i=5          5>1 true
i=4 
i=3
i=2
Searching
-----------------
It is an operation of Datastructure.
It is technique to search an element in array.
There are two techniques to search an element.
1) Linear search
2) Binary search

1) Linear search
-----------------------
It is also called sequential search.
Searching process is going on sequentially.
Searching always start with first element.
In linear search, comparision start with first element to last element.
Linear search is applicable with ordered and unordered list.

  num[10]={11,2,8,7,19,20,88,16,45,10},n=10, sele=88

program to search  an element in array 
---------------------------------------------
#include<stdio.h>
int main()
{
    int num[10], n,i,sele,f=0;
    printf("Enter number of elements for array:");
     scanf("%d", &n);
    printf("Enter %d elements for array",n);
    for(i=0;i<n;i++)
     scanf("%d", &num[i]);    
    printf("Enter searching element:");
    scanf("%d", &sele);
     for(i=0;i<n;i++)
       if(num[i]==sele)
        {
         printf("position=%d",i+1);
         f=1;
        }
    if(f==0)
      printf("%d is not found...",sele);
  return 0;    
}

Algorithm of linear search
--------------------------------
 array[10]={11,23,45,10,28,39}, n=6, sele=28
lin_search(array,n,sele)
step1: set i=1,f=0
step2: repeat step 3 and 4 while(i<=n)
step3:  if array[i]=sele
         -Display i
         -set f=1
step4: set i=i+1
step5: if f=0
       -Display Element not found
step6: return

do-while () loop
---------------------------
It is exit controlled loop.
It is also work with three statements: Initial value,condition,update exp
If condition is false then one iteration is possible.

syntax
-------------
Initial value;
do
{
    statement to repeat;
    update exp
}while(condition);
it is also called bottom tested loop.
program to print 1 to10 numbers using do-while loop
---------------------------------------------------
#include<stdio.h>
int main()
{
   int i=1;
   do
    {
       printf("%d ",i);
        i++; 
     }while(i<=10);
   return 0
}

if condition is falsed
------------------------
#include<stdio.h>
int main()
{
   int i=100;
   do
    {
       printf("%d ",i);
        i++; 
     }while(i<=10);
   return 0;
}

program to print name 10 times using do-while loop
--------------------------------------------------
#include<stdio.h>
int main()
{
   int i=1;
   do
    {
       printf("Trident ");
        i++; 
     }while(i<=10);
   return 0
}
Logical question
------------------------
1) sum of digits
2) count digits in number
3) print even digit
4) print odd digit
5) print reverse of number
6) factorial of a number
7) perfact number
8) Armstrong number
9) Fibbonacci series
10) Palindrome number

Sum of digits
--------------------
 Enter a number: 354
       3+5+4=> 12

#include<stdio.h>
int main()
{
   int n,i,dig,s=0;
   printf("Enter a number:");
    scanf("%d", &n);
    while(n!=0)
    {
        dig=n%10;
        s=s+dig;
        n=n/10;
    }
    printf("Sum of digits:%d",s);
 return 0;
}
n=354 =>35=>3=>0
dig=>4=>5=>3
s=>0=> 4=>9=>12
n!=0 354!=0 true=>35!=0 true 3!=0 true 0!=0 false

program to count number of digit in number
----------------------------------------------
Enter a number: 2345
      digit=4

#include<stdio.h>
int main()
{
   int n,i,dig,c=0;
   printf("Enter a number:");
    scanf("%d", &n);
     for(i=n;i!=0;i=i/10)
      { dig=i%10;
       if(dig%2==0)
         c++;
      }
    printf("number of even digits:%d",c);
 return 0;
}

count odd digit
count zero digit
count even digit
program to find reverse of a number
-------------------------------------
  Enter a number: 123
     reverse: 321

#include<stdio.h>
int main()
{
   int n,i,dig,rev=0;
   printf("Enter a number for reverse:");
    scanf("%d", &n);
     for(i=n;i!=0;i=i/10)
      { 
       dig=i%10;
       rev=rev*10+dig;
      }
    printf("Reverse digits:%d",rev);
 return 0;
}


n=532
dig=>2=3=5
rev=0=2=>23=235
i=532 =>53=>5=>0



program to check number is palindrome or not
---------------------------------------------
Enter a number: 121
#include<stdio.h>
int main()
{
   int n,i,dig,rev=0;
   printf("Enter a number for reverse:");
    scanf("%d", &n);
     for(i=n;i!=0;i=i/10)
      { 
       dig=i%10;
       rev=rev*10+dig;
      }
    if(n==rev)
      printf("palindrome");
    else
      printf("Not palindrome");
 return 0;
}
                









nested loop
---------------------------
Loop within loop is called nested loop.
Nested loop is used to print pattern.
It is also used to access contents of array.
 DS&C Homework[17July201]
-----------------------------------
Q1 program to search an element in character array using linear search.
alpha[10]={'a','f','b','Z','l','I','M','o','N','G'}, n=10
Q2 program to search an element in float array using linear search.
marks[10]={5.5,6.8,9.5,2.5,3.6,7.8,9.2,1.2,8.8,3.4},n=10
Q3 program to find 22 in following array using linear search.
  num[10]={11,22,33,44,22,30,80,90,22,78}, n=10
Q4 program to print first and last digit.
   Enter number: 138 output 1 8
   Enter number: 2139 output 2 9
   Enter number: 23   output 2 3
Q5 program to print odd digit in number
Q6 program to find sum of odd digit in number
Q7 program to count odd digit in number
Q8 program to count zeroth digit in number
Q9 program to multiply digits of a number
Q10 program to multiply odd digit of number
Q11 program to multiply even digit of number
=================================================================================
[8:54 pm, 20/07/2021] Rahul Sir Tat: #include<stdio.h>
#include<stdlib.h>
main()
{
   char dig[10],sele;
   int n,i,f=0;
   printf("Enter number of elements for array:");
   scanf("%d",&n);
   printf("Enter %c elements for array",n);
   for(i=0;i<n;i++)
   {
     fflush(stdin);
     scanf("%c",&dig[i]);
    }
   printf("Enter searching element:");
    fflush(stdin);
    scanf("%c",&sele);
   for(i=0;i<n;i++)
   if(dig[i]==sele)
   {
      printf("position=%d",i+1);
      f=1;
   }
   if(f==0)
   printf("%c is not found....",sele);
}
program to find first and last digit of a number
=========================================
n =159; 16   1234   25678
#include<stdio.h>
main()
{
  int n,first,last;
  printf("Enter a number:");
  scanf("%d", &n);
  last=n%10;     //9
  while(n>=10)
  {
    n=n/10;
  }
  first=n;
  printf("First Digit=%d last digit=%d",first,last);
}

program to show number in expended form
--------------------------------------------
Enter a number : 6534
 6000
 500
 30
 4
#include<stdio.h>
main()
{
  int  n,d=1;
  printf("Enter a number:");
  scanf("%d", &n);        //625
   for(i=n;i>10;i=i/10)
     d=d*10;              //100
   while(n>0)
    {
       printf("%d\n",(n/d)*d);
        n=n%d;
        d=d/10;    
    }
}
600
20
5
--------------------------------------------
nested loop
---------------------------
Loop within loop is called nested loop.
You can use any type loop inside other loop.
Always inner loop complete their iteration first.
for()      //outer loop
{
    while()   //inner loop
     {}
}
main()
{
  int i,j; 
  for(i=1;i<=4;i++)
    for(j=1;j<=2;j++)
      printf("i= %d j=%d\n",i,j);
}

123412341234
111122223333
main()
{
int i,j;
for(i=1;i<=3;i++)
  for(j=1;j<=4;j++)
   printf("%d", i);  
}
1234
1234
1234

main()
{
 int i,j;
  for(i=1;i<=3;i++)
   {
    for(j=1;j<=4;j++)
     printf("%d", j);
    printf("\n");
   }  
}

1111
2222
3333
4444
5555
main()
{
 int i,j;
  for(i=1;i<=5;i++)
   {
    for(j=1;j<=4;j++)
     printf("%d", i);
    printf("\n");
   }  
}
----------------------------
1
12
123
1234
12345
main()
{
 int i,j;
  for(i=1;i<=5;i++)
   {
    for(j=1;j<=i;j++)
     printf("%d", j);
    printf("\n");
   }  
}
-----------------------------
1
22
333
4444
55555
main()
{
 int i,j;
  for(i=1;i<=5;i++)
   {
    for(j=1;j<=i;j++)
     printf("%d", i);
    printf("\n");
   }  
}
-----------------------------
1234
 1234
  1234
   1234
    1234

main()
{
 int i,j,k;
  for(i=1;i<=5;i++)
   {
    for(k=1;k<i;k++)
      printf(" ");
    for(j=1;j<=4;j++)
     printf("%d", j);
    printf("\n");
   }  
}
1
 2
  3
   4
    5
main()
{
 int i,k;
  for(i=1;i<=5;i++)
   {
    for(k=1;k<i;k++)
      printf(" ");
     printf("%d\n", i);
   }  
}
---------------------------
12345
1234
123
12
1
main()
{
  int i,j;
  for(i=5;i>=1;i--)
  {
    for(j=1;j<=i;j++)
     printf("%d",j);
    printf("\n");
  }
}
----------------------------------
55555
4444
333
22
1
main()
{
  int i,j;
  for(i=5;i>=1;i--)
  {
    for(j=1;j<=i;j++)
     printf("%d",i);
    printf("\n");
  }
}
 DS&C Homework[20July2021]
----------------------------------
Q1 program to accept number and find factorial.
main()
{
    int n,f=1;
    printf("Enter a number:");
    scanf("%d",&n);
    while(n>=1)
    {
       f=f*n;
       n--;
    }
   printf("Factorial=%d",f);
} 
Q2 program to accept number and print digit name in reverse form
main()
{
    int n,i;
    printf("Enter a number:");
    scanf("%d",&n);
    for(i=n;i!=0;i=i/10)
    {
          switch(i%10)
           {
              case 1:
              printf(" One ");
              break;
              case 2:
              printf(" Two ");
              break;
              case 3:
              printf(" Three ");
              break;
              case 4:
              printf(" Four ");
              break; 
              case 5:
              printf(" Five ");
              break;
              case 6:
              printf(" Six ");
              break;
              case 7:
              printf(" Seven ");
              break;
              case 8:
              printf(" Eight ");
              break; 
              case 9:
              printf(" Nine ");
              break;
              case 0:
              printf(" Zero ");
              break; 
           }
     }
 } 
output
Enter a number:49
Nine Four   
Q3 program to print following pattern using nested loop
a) 123123123123123
b) ABCDABCDABCDABCDABCD
c) 123+123+123+123
d) 1111 2222 3333 4444 5555
e) 
12345
12345
12345
f)
1 2 3 4 5
1 2 3 4 5
g)
10+1 10+2 10+3
11+1 11+2 11+3
12+1 12+2 12+3
13+1 13+2 13+3
h)
5 5 5 5 5
4 4 4 4
3 3 3
2 2
1
i)
     5
    4
   3
  2
 1
=============================================================================
[8:55 pm, 22/07/2021] Rahul Sir Tat: 10+1 10+2 10+3
11+1 11+2 11+3
12+1 12+2 12+3
13+1 13+2 13+3

#include<stdio.h>
main()
{
    int i,j;
    for(i=10;i<=13;i++)
    {
       for(j=1;j<=3;j++)
         printf("%d+%d ",i,j);       
      printf("\n");
    }
}

    5
   4
  3
 2
1
  
#include<stdio.h>
main()
{
   int i,j;
   for(i=5;i>=1;i--)
   {
      for(j=1;j<i;j++)
       printf(" ");
      printf("%d\n",i);
   }
}
---------------------------
program to print number in reverse form
---------------------------------------
main()
{
    int n,i;
    printf("Enter a number:");
    scanf("%d",&n);     //123
    for(i=n;i!=0;i=i/10)
    {
          switch(i%10)
           {
              case 1:
              printf(" One ");
              break;
              case 2:
              printf(" Two ");
              break;
              case 3:
              printf(" Three ");
              break;
              case 4:
              printf(" Four ");
              break; 
              case 5:
              printf(" Five ");
               break;
              case 6:
              printf(" Six ");
              break;
              case 7:
              printf(" Seven ");
              break;
              case 8:
              printf(" Eight ");
              break; 
              case 9:
              printf(" Nine ");
              break;
              case 0:
              printf(" Zero ");
              break; 
           }
     }
 }
----------------------------------------------------
Factorial of number
--------------------------------
Enter a number: 5
 5X4X3X2X1 =>120

#include<stdio.h>
main()
{
    int n,f=1;
    printf("Enter number to get factorial:");
     scanf("%d", &n);  //5
     while(n>0)
     {
        f=f*n;
        n==1?printf("%d",n):printf("%dX",n);
        n--;
     }
    printf("=%d",f);
}

program to print factor of a number
-------------------------------------
Enter a number:6
 factor =1 2 3 6
#include<stdio.h>
main()
{
    int n,i;
    printf("Enter number to get factor:");
    scanf("%d", &n); //6
    printf("Factors:");
    for(i=1;i<=n;i++)
     {
         if(n%i==0)
          printf("%d ",i);
     }   
}
--------------------------------------
perfact number[6,28,496,8128]
--------------------
  6 is perfact number   factor:1 2 3  1+2+3==6 
  8 factor 1 2 4  1+2+4!=8 Not perfact 
  28  factor 1 2 4 7 14   1+2+4+7+14==28 perfact number
#include<stdio.h>
main()
{
    int n,i,s=0;
    printf("Enter number to check perfact:");
    scanf("%d", &n); //6
     for(i=1;i<n;i++)
     {
         if(n%i==0)
          s=s+i;
     }
    if(n==s)
     printf("Perfact number");
   else
     printf("Not perfact number");   
}
----------------------------------------------
Armstrong number
---------------------------------
 153  
1*1*1+5*5*5+3*3*3==153   Armstrong number

407
370
371
3*3*3+7*7*7+0==370
1634
1*1*1*1+6*6*6*6+3*3*3*3+4*4*4*4==1634

#include<stdio.h>
main()
{
    int n,i,s=0,dig;
    printf("Enter three digit number to check Armstrong:");
    scanf("%d", &n);  //153
     for(i=n;i!=0;i=i/10)
     {
          dig=i%10;
          s=s+dig*dig*dig;
     }
    if(n==s)
     printf("Armstrong number");
   else
     printf("Not Armstrong number");   
}

program to check Armstrong number for n digit
----------------------------------------------

#include<stdio.h>
main()
{
    int n,j,i,s=0,dig,c=0,val=1;
    printf("Enter number to check Armstrong:");
    scanf("%d", &n);       
    for(j=n;j!=0;j=j/10)
      c++;                 
     for(i=n;i!=0;i=i/10)
     {
          val=1;
          dig=i%10;
          for(j=1;j<=c;j++)
           val=val*dig;
          s=s+val;
     }
    if(n==s)
     printf("Armstrong number");
   else
     printf("Not Armstrong number");   
}

program to print Armstrong number in two ranges
-----------------------------------------------
#include<stdio.h>
main()
{
    int range,j,i,s,n,dig,c,val;
   printf("Enter range to get list of Armstrong number:");
   scanf("%d",&n);  //500
  for(range=150;range<=n;range++)
  {   
     s=0;c=0;
    for(j=range;j!=0;j=j/10)  //count the digit
      c++;                    //3                                
     for(i=range;i!=0;i=i/10)
     {
          val=1;
          dig=i%10;
          for(j=1;j<=c;j++)
           val=val*dig;
          s=s+val;
     }
    if(range==s)
     printf("\n%d Armstrong number",range);
  }   
}

-------------------------------------------------------
Fibbonacci series
----------------------------------
0 1 1 2 3 5 8 13 21 34
#include<stdio.h>
main()
{
    int first,last,sum,n;
    printf("Enter number of terms in Fibbonacci series:");
    scanf("%d", &n);   //5
    first=0;
    last=1;
    printf("%d %d", first,last);
    while(n>2)
    {
      sum=first+last;
      printf(" %d ",sum);
      first=last;
      last=sum;
      n--;
    }
}
first=0 =1=1=2
last=1=1=2=3
sum=1-2-3
n=5 4 3 2
0 1 1 2 3
 DS&C Homework[22July2021]
----------------------------------
Q1 program to print following pattern
a)
1
2 1
3 2 1
4 3 2 1
5 4 3 2 1
#include<stdio.h>
int main()
{
   int i,j;
   for(i=1;i<=5;i++)
   {
     for(j=i;j>=1;j--)
     {
       printf("%d ",j);
     }
     printf("\n");
  return 0;
}
b)
1
1 *
1 * 3
1 * 3 *
1 * 3 * 5
c)
1*2*3*4*
1*2*3*4*
1*2*3*4*
d)
-----5
----4
---3
--2
-1
e)
-1
--2
---3
----4
-----5
f) 
01
0102
010203
01020304
0102030405
g)
5+1 
6+1 6+2
7+1 7+2 7+3
8+1 8+2 8+3 8+4
9+1 9+2 9+3 9+4 9+5
Q2 program to find sum of digits for odd array element.
  num[10]={11,12,34,56,35,47,91,45,22,10}, n=10
Q3 program to find sum of digits for even array element.
 num[10]={10,12,34,56,36,47,91,45,22,10}, n=10
Q4 program to find factorial of each array elements
   num[5]={3,5,4,7,6}
Q5 program to find reverse of digits for each array element.
num[10]={34,23,11,22,44,54,89,23,87,14}
Q6 program to print factors of each array element.
    num[10]={10,8,9,6,12,17,21,11,24,25}
Q7 program to print palindrome array elements.
    num[6]={11,23,121,99,87,89}
Q8 program to accept number and print sum of factors.
Q9 program to accept number and count number of factors.
Q10 program to display elements divisible by 2,3 and 5.
  num[10]={30,100,120,150,155,180,190,200,240,250}
=========================================================================
[8:27 pm, 24/07/2021] Rahul Sir Tat: program to find factorial of each array elements
   num[5]={3,5,4,7,6}
#include<stdio.h>
main()
{
   int num[5]={3,5,4,7,6},i,f,n;
   for(i=0;i<5;i++)
   {
       n=num[i];f=1;
       while(n>0)
       {
          f=f*n;
          n--;
       }
       printf("\nFactorial of %d=%d",num[i],f);
   }
}
i=0 1 2 3 4
program to print palindrome array elements.
    num[6]={11,23,121,99,87,89}
#include<stdio.h>
main()
{
   int num[6]={11,23,121,99,87,89},i,rev,dig,n;
   for(i=0;i<6;i++)
   {
        rev=0;
       for(n=num[i];n!=0;n=n/10)
       {
          dig=n%10;
          rev=rev*10+dig;
        }
       if(rev==num[i])
       printf("\nPalindrome number is %d",num[i]);
   }
}
program to print factors of each array element.
    num[10]={10,8,9,6,12,17,21,11,24,25}
#include<stdio.h>
main()
{
    int num[10]={10,8,9,6,12,17,21,11,24,25},i,j;
    for(i=0;i<10;i++)
    {
         printf("\nFactor of %d: ",num[i]);
          for(j=1;j<=num[i];j++)
             if(num[i]%j==0)
              printf("%d ",j);
    }
}

program to check prime number[factor of prime number is 1 and itself]
-------------------------------------------------------------------
Enter a number: 5
     prime number

#include<stdio.h>
main()
{
    int n,i,c=0;
    printf("Enter a number to check prime:");
    scanf("%d", &n);   //4
    for(i=1;i<=n;i++)
      if(n%i==0)
       c++;
    if(c==2)
      printf("Prime number");
    else
      printf("Not Prime number");
}
program to print prime number in range
---------------------------------------------
#include<stdio.h>
main()
{
    int i,j,c=0;
    for(i=1;i<=15;i++)
     {
        c=0;
       for(j=1;j<=i;j++) 
          if(i%j==0)
            c++;
        if(c==2)
         printf("%d is prime number\n",i);
     }
     
}
program to take user input to print list of prime numbers
---------------------------------------------------------
#include<stdio.h>
main()
{
    int n,i,j,c=0;
    printf("Enter upper range to print prime numbers:");
    scanf("%d",&n);
    for(i=1;i<=n;i++)
     {
        c=0;
       for(j=1;j<=i;j++)
          if(i%j==0)
            c++;
        if(c==2)
         printf("%d is prime number\n",i);
     }
}

program to two range to print prime numbers
-------------------------------------------
program to take user input to print list of prime numbers
---------------------------------------------------------
#include<stdio.h>
main()
{
    int sr,er,i,j,c=0;
    printf("Enter two ranges to get prime numbers:");
    scanf("%d%d",&sr,&er);
    for(i=sr;i<=er;i++)
     {
        c=0;
       for(j=1;j<=i;j++)
          if(i%j==0)
            c++;
        if(c==2)
         printf("%d is prime number\n",i);
     }
}

2d Array
------------------
It is type of array.
It is also called matrix.
It stores value according to row and column.
Two subscripts are used in array declaration.
syntax
--------
   datatype arrayname[rowsize][colsize];

example
---------
    int mat[2][3];    //Integer array to store 2X3 matrix [6 array elements]
   11 22 33 =>row1
   44 55 66 =>row2
    char cmat[3][2];  //character array to store 3X2   [6 character elements]

Representation of matrix
-------------------------
      int mat[2][3];
          0   1   2=>col
       0 [ ] [ ] [ ]
       1 [ ] [ ] [ ]
       row         
Initialize matrix
---------------------
There are two techniques to initialize matrix
 a) compile time initialization
 b) run time initialization[scanf()]
a) compile time initialization
---------------------------------
Matrix value is given during compilation.
You can initialize value at code writing.
   int mat[2][3]={11,22,33,44,55};   //remaining element is zero
           0   1    2=>col
       0 [11] [22] [33]
       1 [44] [55] [0]
       row         
   print 22=> printf("%d",mat[0][1]);
   print 44=> printf("%d", mat[1][0]);
   last element=> printf("%d", mat[1][2]);

   int mat[2][3];
    mat[0][0]=11;
    mat[0][1]=22;
    mat[0][2]=33;
    mat[1][2]=55;
Matrix stores data in row major order.
#include<stdio.h>
main()
{
   int mat[2][3]={11,22,33,44,55};
   printf("%d",mat[0][1]);
   printf("%d", mat[1][0]);
   printf("%d", mat[1][2]);
}   

#include<stdio.h>
main()
{
   int mat[2][3];
    mat[0][0]=11;
    mat[0][1]=22;
    mat[0][2]=33;
    mat[1][2]=55;
   printf("%d ",mat[0][1]);
   printf("%d ", mat[1][0]);
   printf("%d ", mat[1][1]);
   printf("%d ", mat[1][2]);
}   

2d array is printed using nested loop
outer loop is used for row.
inner loop is used for column.
#include<stdio.h>
main()
{
int mat[2][3]={11,22,33,44,55,66},i,j;
for(i=0;i<2;i++)
 {
    for(j=0;j<3;j++)
      printf("%d  ",mat[i][j]);
    printf("\n");
 }
}
#include<stdio.h>
main()
{
int mat[2][3]={11,22,33,44,55,66},i,j;
for(i=0;i<2;i++)
 {
    for(j=0;j<3;j++)
      printf("mat[%d][%d]=%d  ",i,j,mat[i][j]);
    printf("\n");
 }
}
 2D Array or Matrix
------------------------
Two indices are used to access array element.
       r   c
#include<stdio.h>
main()
{
  int r,c,mat[3][2]={11,22,33,44,55,66};
  0 1 2
  for(r=0;r<3;r++)
  {     0 1
     for(c=0;c<2;c++)
       printf("%10d",mat[r][c]);
    printf("\n");
  }
}
[0,0][0,1][1,0][1,1][2,0][2,1]
      0  1  =>c
    0 11 22 
    1 33 44
    2 55 66 
    r
program to take user input for matrix
---------------------------------------
scanf() function is used to take input.
#include<stdio.h>
int main()
{
    int r,c,mat[2][3];
    printf("Enter elements for 2X3 matrix:");
    for(r=0;r<2;r++)
      for(c=0;c<3;c++)
         scanf("%d",&mat[r][c]);   
   printf("2X3 matrix:\n");
    for(r=0;r<2;r++)
     {
      for(c=0;c<3;c++)
        printf("%10d",mat[r][c]);
      printf("\n");
     }
  return 0;
}

print diagonal of square matrix[row==column]
---------------------------------------------
  mat[3][3]={11,22,33,44,55,66,77,88,99};

      0   1  2
    0 11 22 33 
    1 44 55 66  
    2 77 88 99

#include<stdio.h>
main()
{
  int r,c,mat[3][3]={11,22,33,44,55,66,77,88,99};
  for(r=0;r<3;r++)
  {     
     for(c=0;c<3;c++)
      if(r==c)
       printf("%d",mat[r][c]);
      else
       printf(" ");
    printf("\n");
  }
}

program to print second diagonal in square matrix
--------------------------------------------------
#include<stdio.h>
main()
{
  int r,c,mat[3][3]={11,22,33,44,55,66,77,88,99};
  for(r=0;r<3;r++)
  {     
     for(c=0;c<3;c++)
      if(r+c==2)
       printf("%d",mat[r][c]);
      else
       printf(" ");
    printf("\n");
  }
}

program to print both the diagonals of square matrix
---------------------------------------------------
#include<stdio.h>
main()
{
  int r,c,mat[3][3]={11,22,33,44,55,66,77,88,99};
  for(r=0;r<3;r++)
  {     
     for(c=0;c<3;c++)
      if(r+c==2||r==c)
       printf("%d",mat[r][c]);
      else
       printf(" ");
    printf("\n");
  }
}

program to print upper triangle matrix
-----------------------------------------
  mat[3][3]={11,22,33,44,55,66,77,88,99};

      0   1  2
    0 11 22 33 
    1 44 55 66  
    2 77 88 99
#include<stdio.h>
main()
{
  int r,c,mat[3][3]={11,22,33,44,55,66,77,88,99};
  for(r=0;r<3;r++)
  {     
     for(c=0;c<3;c++)
      if(r<c)
       printf("%d",mat[r][c]);
      else
       printf("0");
    printf("\n");
  }
}

program to print lower triangle matrix
=========================================
#include<stdio.h>
main()
{
  int r,c,mat[3][3]={11,22,33,44,55,66,77,88,99};
  for(r=0;r<3;r++)
  {     
     for(c=0;c<3;c++)
      if(r>c)
       printf("%10d",mat[r][c]);
      else
       printf("%10d",0);
    printf("\n");
  }
}
program to print upper triangle with diagonal
-------------------------------------------
#include<stdio.h>
main()
{
  int r,c,mat[3][3]={11,22,33,44,55,66,77,88,99};
  for(r=0;r<3;r++)
  {     
     for(c=0;c<3;c++)
      if(r<=c)
       printf("%10d",mat[r][c]);
      else
       printf("%10d",0);
    printf("\n");
  }
}
program to find sum of diagonal elements
--------------------------------------------
#include<stdio.h>
main()
{
  int r,c,s=0,mat[3][3]={11,22,33,44,55,66,77,88,99};
  for(r=0;r<3;r++)
  {     
     for(c=0;c<3;c++)
      if(r==c)
        s=s+mat[r][c];
  }
   printf("Sum of main diagonal is %d",s);
}
program to find sum each row in square matrix
----------------------------------------------------
#include<stdio.h>
main()
{
  int r,c,s=0,mat[3][3]={11,22,33,44,55,66,77,88,99};
  for(r=0;r<3;r++)
  {     
     for(c=0;c<3;c++)
        s=s+mat[r][c];
     printf("Sum of %d row=%d",r+1,s);
     s=0;
  }
}
program to print even element from matrix
--------------------------------------------
#include<stdio.h>
main()
{
  int r,c,mat[3][3]={11,22,33,44,55,66,77,88,99};
  for(r=0;r<3;r++)
  {     
     for(c=0;c<3;c++)
      if(mat[r][c]%2==0)
       printf("%10d",mat[r][c]);
      else
       printf("  ");
    printf("\n");
  }
}
program to print transpose of the matrix
---------------------------------------------
    11 22 33 
    44 55 66
    77 88 99

    11 44 77
    22 55 88
    33 66 99

#include<stdio.h>
main()
{
  int r,c,mat[3][3]={11,22,33,44,55,66,77,88,99};
  for(r=0;r<3;r++)
  {      
     for(c=0;c<3;c++)
       printf("%10d",mat[c][r]);
    printf("\n");
  }
}
sparse matrix
-------------------
It is square matrix. Number of zero element should be greater than non-zero element.
int mat[3][3]={11,0,0,0,22,55,66,0,0}; 
  number of zero element=5
  number of non-zero element=4  5>4 so matrix is sparse matrix

program to check sparse matrix
----------------------------------
#include<stdio.h>
main()
{
  int r,c,mat[3][3],nz=0,z=0;
  printf("Enter elements for 3X3 matrix:");
   for(r=0;r<3;r++)
     for(c=0;c<3;c++)
      scanf("%d", &mat[r][c]);
  for(r=0;r<3;r++)
  {      
     for(c=0;c<3;c++)
       if(mat[r][c]==0)
         z++;
        else
         nz++;
  }
  if(z>nz)
     printf("Sparse Matrix..");
  else
    printf("Not Sparse Matrix..");
}

program to find sum of two matrix
------------------------------------
11 22    10 20    
33 44    30 40
mat1     mat2

21 42
63 84
rmat

#include<stdio.h>
main()
{
    int r,c,mat1[2][2]={11,22,33,44},mat2[2][2]={10,20,30,40},rmat[2][2];
    for(r=0;r<2;r++)
      for(c=0;c<2;c++)
        rmat[r][c]= mat1[r][c] + mat2[r][c];
   printf("Resultant matrix\n");
       for(r=0;r<2;r++)
       {
         for(c=0;c<2;c++)
           printf("%10d", rmat[r][c]);
        printf("\n");
      }
}

program to find sum of matrix.Input is given by the user
----------------------------------------------------------
#include<stdio.h>
main()
{
    int r,c,mat1[2][2],mat2[2][2],rmat[2][2];
    printf("Enter value of mat1 2X2 :");
    for(r=0;r<2;r++)
      for(c=0;c<2;c++)
        scanf("%d", &mat1[r][c]);
    printf("Enter value of mat2 2X2 :");
    for(r=0;r<2;r++)
      for(c=0;c<2;c++)
        scanf("%d", &mat2[r][c]);

    for(r=0;r<2;r++)
      for(c=0;c<2;c++)
        rmat[r][c]= mat1[r][c] + mat2[r][c];
   printf("Resultant matrix\n");
       for(r=0;r<2;r++)
       {
         for(c=0;c<2;c++)
           printf("%10d", rmat[r][c]);
        printf("\n");
      }
}
 DS&C Homework[25July2021]
---------------------------------
Q1 program to find substraction of two square matrix.
Q2 program to find sum of second diagonal in 3X3 matrix
Q3 program to print lower triangle matrix with diagonal
Q4 program to print sum of all diagonals in 3x3 matrix.
Q5 program to find sum of individual columns in 3x3 matrix.
Q6 program to count even and odd elements in individual row of 3X3 matrix.
Q7 program to count two digit array elements in 3X3 matrix.
    mat[3][3]={11,5,23,235,67,543,77,345,4}
Q8 program to print odd elements of 3X3 matrix
Q9 program to print array elements of similar digit in 3x3 matrix.
    mat[3][3]={11,34,45,55,32,77,88,10,44};
    output: 11 55 77 88 44
Q10 program to separate single and two digit elements from 3x3 matrix
    mat[3][3]={11,3,45,55,2,7,8,10,44};
    Single Digit element: 3 2 7 8
    Two Digit element:11 45 55 10 44
=========================================================================================================
 program to accept value according to row and column input
-----------------------------------------------------------
#include<stdio.h>
int main()
{
   int i,j,r,c,mat[100][100];
   printf("Enter dimension of matrix :");
   scanf("%d%d", &r,&c);  //2 3
   printf("Enter value for %d X %d :",r,c);
   for(i=0;i<r;i++)
     for(j=0;j<c;j++)
        scanf("%d",&mat[i][j]);
   printf("Entered Matrix:\n");
   for(i=0;i<r;i++)
   {
      for(j=0;j<c;j++)
        printf("%5d",mat[i][j]);
    printf("\n");
   }
   return 0;
}

Matrix Multiplication
-------------------------------------
Two matrices are multiplied.
Number of columns in first matrix is equivalent to number of rows in second matrix.
  0  1      0  1
0 10 20   0 5  6   190  220
1 30 40   1 7  8   430  500 
   mat1    mat2     res
10X5 +20X7 =190
10X6 +20X8 =220
30X5 +40X7 =430
30X6 +40X8 =500
#include<stdio.h>
int main()
{
    int mat1[2][2]={10,20,30,40},mat2[2][2]={5,6,7,8},i,j,k,res[2][2];
    for(i=0;i<2;i++)
     for(j=0;j<2;j++)
      {
         res[i][j]=0;
         for(k=0;k<2;k++)
          {
           printf("Row %d  %d X %d\n",i+1, mat1[i][k],mat2[k][j]);
           res[i][j]=res[i][j]+mat1[i][k]*mat2[k][j];
          }
      }
      printf("Resultant Matrix:\n");
     for(i=0;i<2;i++)
     { 
        for(j=0;j<2;j++)
         printf("%5d", res[i][j]);
       printf("\n");
     }
  return 0;
}

=========================================================
    0   1
  0 11  22 
  1 33  44
colsum=>0
i=0=1
j=0
main()
{
   int i,j,mat[2][2]={11,22,33,44},colsum;
  for(i=0;i<2;i++) 
   { colsum=0;
    for(j=0;j<2;j++)
     {
       colsum=colsum+mat[j][i];
     }
     printf("sum of %d column=%d", i+1, colsum);
}

Representation of sparse matrix
-----------------------------------
    0   1    2
0  10   0    11
1  0    0    5 
2  0   23    0
number of zero element: 5
number of non-zero element:4
Represent non-zero element with index value
   3   3   4
   0   0   10
   0   2   11
   1   2   5
   2   1   23   
#include<stdio.h>
main()
{
   int mat[3][3]={10,0,11,0,0,5,0,23,0},r=3,c=3,nz=0,z=0,i,j;
   for(i=0;i<r;i++)
    for(j=0;j<c;j++)
      if(mat[i][j]==0)
        z++;
       else
        nz++;
    if(z>nz)
    {
       printf("%5d%5d%5d",r,c,nz);
       for(i=0;i<r;i++)
         for(j=0;j<c;j++)
          if(mat[i][j]!=0)
                printf("\n%5d%5d%5d",i,j,mat[i][j]);
     }
    else
      printf("Not Sparse Matrix");
}

Binary Search
--------------------------
It is type of searching.
Binary search is name of the searching algorithm.
This algorithm is applicable with sorted list[A-Z or Z-A].
Binary search always start with mid element of the list.
Binary search also end with mid element of the list.
In Binary search, if searching element is less than mid element. Searching is going on left of mid element.
If searching element is greater than mid element. Searching is going on right part of mid element.
             1  2  3  4  5  6  7  8  9  10
  list[10] ={11,12,23,24,25,26,30,32,34,56};
  sele=>11
General algorithm[steps]
-------------------------
   first=1 last=10
- calculate mid index  mid=(INT)(first+last)/2
      mid=(INT)(1+10)/2
     mid=5
- searching element[34] compares with mid element[25]
- Searching element[34] is greater than mid element[25] so searching is going on right part of mid element[25]
       first=mid+1=6, last=10
- calculate mid index
       mid=(6+10)/2 =8
- searching element[34] compares with mid element[32]
- searching element [34] greater than mid element[32]
    first=mid+1=9 last=10
- calculate mid element
     mid=(INT)(9+10)/2   =>9
- searching element[34] compares with mid element[34]
- searching element [34] is equal to mid element[34]
    print position and stop
 DS&C Homework[27July2021]
-----------------------------------
Q1 program to accept value for two square matrix and find multiplication
Q2 program to accept value for matrix and check sparse or not.
Q3 program to accept value for matrix and represent sparse matrix.
Q4 program to accept value for 3X3 matrix and print all columns vartically
Q5 program to accept value for 3X3 matrix and print first and last column
Q6 program to accept value for 3X3 matrix and print first and last row
Q7 program to accept value for 4X4 matrix and alternate elements
  input
   11 22 33 10 
   44 55 66 20
   77 88 99 30
   40 50 60 70 
  output
   11    33 
      55    20
   77    99
      50    70
Q8 Write general algorithm of Binary search.
   list[10]={10,11,23,34,45,65,76,78,100,151};
a) search 23
b) search 76
c) search 10
d) search 151
e) search 34
f) search 78
Q9 Write general algorithm of Binary search.
  array[9]={55,45,35,32,22,20,18,15,11}
 a) search 35
 b) search 20
 c) search 15
 d) search 11
 e) search 45
 f) search 20
 g) search 55       
 Q10 program for binary search
=======================================================================================================
[8:41 pm, 29/07/2021] Rahul Sir Tat: 0  1  2
 0 11 22 33
 1 44 55 66
 2 77 88 99
#include<stdio.h>
int main()
{
  int i,j,mat[3][3];
  printf("Enter value for 3x3 matrix:");
   for(i=0;i<3;i++)
     for(j=0;j<3;j++)
       scanf("%d", &mat[i][j]); 
  for(i=0;i<3;i++)
   {
    for(j=0;j<3;j++)
      if(i==0||i==2)
       printf("%5d", mat[i][j]);
     printf("\n");
   }
  return 0;
}

program to print matrix value column wise
--------------------------------------------
#include<stdio.h>
int main()
{
  int i,j,mat[3][3];
  printf("Enter value for 3x3 matrix:");
   for(i=0;i<3;i++)
     for(j=0;j<3;j++)
       scanf("%d", &mat[i][j]); 
  for(i=0;i<3;i++)
   {
    printf("\ncolumn %d:",i+1)
    for(j=0;j<3;j++)
       printf("%5d", mat[j][i]);
     printf("\n");
   }
  return 0;
}

==================================================
Binary Search~ General algorithm
--------------------------------------------------
1  2  3  4  5  6  7  8  9   10=> index according to maths
11 22 33 44 55 66 77 88 99 100    => Ascending list
 
sele=88  first=1 last=10 //index value
step1 = calculate mid element
        mid=(INT)(first+last)/2 => (1+10)/2 => 5.5 =>5
step2 = searching element [88] compares with mid element[55]
step3 = searching element [88] is greater than mid element[55] so first is changed.
         first=mid+1   first=6,last=10
step4 = calculate mid element 
         mid=(first+last)/2 => (6+10)/2 =>8
step5 = searching element[88] compares with mid element[88]. It is equal so print position
step6 = display mid value[8]

==============================================
Binary Search when list in descending order
----------------------------------------------
 1  2   3  4  5  6  7  8  9 10 => index according to maths 
 98 89 80 78 67 66 55 45 44 34 => Descending list
sele=44
       first=1 last=10 //index value
step 1= calculate mid element 
       mid=(INT)(first+last)/2 => (1+10)/2  =>5
step 2= searching element[44] compares with mid element[67]. Searching element[44] is
        smaller than mid element[67] so searching is going on right part of mid element.
          first=mid+1   first=6 last=10
step 3= calculate mid element
         mid=(INT)(first+last)/2 => (6+10)/2 =8
step 4= searching element[44] compares with mid element[45].Searching element[44] is
        smaller than mid element[45] so searching is going on right part of mid element.
           first=mid+1 first=9, last=10
step 5= calculate mid element
           mid=(INT)(first+last)/2 => (9+10)/2 =9
step 6 = searching element[44] compares with mid element[44]. Elements are equal so print
          mid value [9]

program to check array elements in ascending form
-----------------------------------------------------
11 22 33 44 55 66 77 88 99 100
0  1  2   3  4  5  6  7  8  9

#include<stdio.h>
int main()
{
   int i,f=0,list[10];
   printf("Enter 10 elements:");
    for(i=0;i<10;i++)
      scanf("%d", &list[i]);
    for(i=0;i<9;i++)
       if(list[i+1]<list[i])
           f=1;
    if(f==0)
      printf("List in ascending form");         
  return 0;
}

program to check list in descending order
--------------------------------------------
 100 90 80 70 60 50 40 30 20 10
#include<stdio.h>
int main()
{
   int i,f=0,list[10];
   printf("Enter 10 elements:");
    for(i=0;i<10;i++)
      scanf("%d", &list[i]);
    for(i=0;i<9;i++)
       if(list[i+1]>list[i])
           f=1;
    if(f==0)
      printf("List in descending form");         
  return 0;
}
program for binary search
============================================
#include <stdio.h>
int main()
{
   int i,first,last, mid,sele, num[5];
   printf("Enter 5 integers in sorted form:");
    for(i=0;i<5;i++)
      scanf("%d",&num[i]);
    printf("Enter searching element:");
       scanf("%d",&sele);
     first=0;
     last=4;
     mid=(first+last)/2;     
      while(first<=last)
        {
            if(sele>num[mid])
              first=mid+1;
            else if(num[mid]==sele)
             {
                printf("%d found at location %d", sele, mid+1);
                break;
             }
            else
               last=mid-1;
         mid=(first+last)/2;
        }
    if(first>last)
        printf("Not found! %d isn't present in the list.", sele);
  return 0;
}

program to search element using binary search. Also check list in ascending order
---------------------------------------------------------------------------------
#include <stdio.h>
int main()
{
   int i,first,last, mid,sele, num[5],f=0;
   printf("Enter 5 integers in sorted form:");
    for(i=0;i<5;i++)
      scanf("%d",&num[i]);
     for(i=0;i<4;i++)
       if(num[i+1]<num[i])
           f=1;
    if(f==0)
   {
    printf("Enter searching element:");
       scanf("%d",&sele);
     first=0;
     last=4;
     mid=(first+last)/2;     
      while(first<=last)
        {
            if(sele>num[mid])
              first=mid+1;
            else if(num[mid]==sele)
             {
                printf("%d found at location %d", sele, mid+1);
                break;
             }
            else
               last=mid-1;
         mid=(first+last)/2;
        }
    if(first>last)
        printf("Not found! %d isn't present in the list.", sele);
   }
   else
     printf("List is not in Ascending. Try Again...");
  return 0;
}
 DS&C Homework[29July2021]
--------------------------------------------
Q1 Program to check list in ascending order.
Q2 Program to check list in descending order.
Q3 program to check alphabet list in ascending order.
    [a,c,f,g,h,l,p,q,t,v]
Q4 program to check alphabet list in descending order.
    [T,P,M,L,H,F,E,D,C,A]
Q5 program to check half of the list in ascending order.
   [11,22,33,44,55,45,75,34,43,10] n=10
Q6 program to check second half elements in ascending order.
   [10,20,30,50,40,5,10,15,20,25], n=10
Q7 program to check first half in ascending and second half in descending order.
   [10,20,30,40,50,55,44,33,22,11] n=10
Q8 program to check list is ordered [ascending or descending] or unordered.
Q9 program to print similar digit array element.
   [11,23,45,55,66,77,87,98,99 16]
Q10 program to print element with disimilar digits
   [19,23,45,25,66,77,87,98,99 16]
==============================================================================
[8:27 pm, 31/07/2021] Rahul Sir Tat: program to search element using binary search. Also check list in ascending order
---------------------------------------------------------------------------------
#include <stdio.h>
int main()
{
   int i,first,last, mid,sele, num[5],f=0;
   printf("Enter 5 integers in sorted form:");
    for(i=0;i<5;i++)
      scanf("%d",&num[i]);
     for(i=0;i<4;i++)
       if(num[i+1]<num[i])
           f=1;
    if(f==0)
   {
    printf("Enter searching element:");
       scanf("%d",&sele);
     first=0;
     last=4;
     mid=(first+last)/2;     
      while(first<=last)
        {
            if(sele>num[mid])
              first=mid+1;
            else if(num[mid]==sele)
             {
                printf("%d found at location %d", sele, mid+1);
                break;
             }
            else
               last=mid-1;
         mid=(first+last)/2;
        }
    if(first>last)
        printf("Not found! %d isn't present in the list.", sele);
   }
   else
     printf("List is not in Ascending. Try Again...");
  return 0;
}

 
Algorithm for Binary Search
--------------------------------
[firstindex: starting index of list,lastindex: last index of list,sele:Searching element]
step1 : Input List in sorted form
step2: calculate mid =INT(firstindex+lastindex)/2
step3: Repeat step 4&5 while(firstindex<=lastindex)
step4: searching element compares with mid element
        -if sele bigger than mid
            first=mid+1
        -if sele less than mid
            last=mid-1
        - if searching element is equivalent to mid element
            print position and stop
step5: calculate mid=INT(firstindex+lastindex)/2
step6: stop

Sorting
-----------
It is an operation of data structure.
It is technique to arrange data in ascending[A-Z] or descending[Z-A] order.
There are six types of sorting algorithm.
  1. Bubble sort
  2. Selection sort
  3. Insertion sort
  4. Merge sort
  5. Heap sort
  6. Quick sort

1. Bubble sort
----------------
It is name of sorting algorithm.
It is used to sort list in ascending or descending order.
In bubble sort, first element is compared with successor if big than swap.
Sort according to pass. If number of element is 5 then 4 pass is required to sort.
Each pass is going to sort element from last position.

num[55,44,34,30,11,23] 5 pass is required to sort list in ascending order.

pass1
---------
    55 44 34 60 11 23  [55 compares with 44, bigger so swap]
    44 55 34 60 11 23  [55 compares with 34, bigger so swap]
    44 34 55 60 11 23  [55 compares with 60, smaller so no swap]
    44 34 55 60 11 23  [60 compares with 11, bigger so swap]
    44 34 55 11 60 23  [60 compares with 23, bigger so swap]
    44 34 55 11 23 60  [60 is sorted, pass 1 is completed]
pass2
-------------
    44 34 55 11 23 60  [44 compares with 34, bigger so swap]
    34 44 55 11 23 60  [44 compares with 55, smaller so no swap]
    34 44 55 11 23 60  [55 compares with 11, bigger so swap]
    34 44 11 55 23 60  [55 compares with 23, bigger so swap]
    34 44 11 23 55 60  [55 is sorted. pass2 is completed]
pass3
--------------
   34 44 11 23 55 60  [34 compares with 44,smaller so no swap]
   34 44 11 23 55 60  [44 compares with 11, bigger so swap]
   34 11 44 23 55 60  [44 compares with 23, bigger so swap]
   34 11 23 44 55 60  [44 is sorted. pass 3 is completed]

program to sort element in ascending order using bubble sort algorithm.
------------------------------------------------------------------------
#include<stdio.h>
int main()
{
  int i,j, num[5]={20, 15, 17, 14, 10}, n=5;
   for(i=1;i<n;i++)   //pass
   {
      for(j=0;j<n-i;j++)   //comparision
       {
            if(num[j]>num[j+1])
              num[j]=(num[j+1]+num[j])-(num[j+1]=num[j]);
       }
    }
   printf("Sorted list\n");
    for(i=0;i<n;i++)   //print the sorted array
     {
         printf("%d ",num[i]);
     }
  return 0;
}
program to sort element in descending order using bubble sort algorithm.
------------------------------------------------------------------------
#include<stdio.h>
int main()
{
  int i,j, num[5]={20, 15, 17, 14, 10}, n=5;
   for(i=1;i<n;i++)   //pass
   {
      for(j=0;j<n-i;j++)   //comparision
       {
            if(num[j]<num[j+1])
              num[j]=(num[j+1]+num[j])-(num[j+1]=num[j]);
       }
    }
   printf("Sorted list\n");
    for(i=0;i<n;i++)   //print the sorted array
     {
         printf("%d ",num[i]);
     }
  return 0;
}

          
Algorithm of Bubble sort
--------------------------
[list:input elements,n: total number of elements]   
  bubble_sort(list,n)
step1: set i=1
step2: Repeat step 3 to 5 while(i<n)
step3: set j=1
step4: Repeat a and b while(j<=n-i)
        a) If (list[j]>list[j+1])
            -Interchange list[j] and list[j+1]
        b) set j=j+1
step5: set i=i+1
step6: Return
   
1    2   3   4  5   index      pass i=1            j=1 2  3 4 5
20, 15, 17, 14, 10  List
15  20  17  14  10
15  17  20  14  10  
15  17  14  20  10
15  17  14  10  20
 Ds&C Homework[31July2021]
-----------------------------------
Q1 program to accept 10 character and search an element using Binary Search.
Q2 program to accept 10 character and sort in ascending order
Q3 program to accept 10 character and sort in descending order.
Q4 program to accept 10 integer and sort first half in Ascending order
#include<stdio.h>
int main()
{
  int i,j,s, num[10]={20, 15, 17, 14, 10,1,23,45,64,9}, n=10;
  s=n/2;
   for(i=1;i<s;i++)   //pass
   {
      for(j=0;j<s-i;j++)   //comparision
       {
            if(num[j]>num[j+1])
              num[j]=(num[j+1]+num[j])-(num[j+1]=num[j]);
       }
    }
   printf("\nSorted list\n");
    for(i=0;i<n;i++)   //print the sorted array
     {
         printf("%d ",num[i]);
     }
  return 0;
}
Q6 program to accept 10 integer. Sort first half in descending.
Q7 program to accept 10 integer. Sort first half in Ascending and rest in descending.
Q8 program to accept 10 integer. Sort first half in Ascending and Second half in ascending.
Q9 program to accept 10 integer. Sort first half in Descending and second half also in descending order.
Q10 Write general algorithm for Bubble sort
a) 88 98 77 66 55 22
b) 100 90 89 30 20 10
c) B X L F A
d) W E L C O M E
e) A l o g o r i t h m
======================================================================================
[9:08 pm, 03/08/2021] Rahul Sir Tat: Selection Sort
---------------------
It is name of sorting algorithm.
In this technique, select smallest element and swap with first position element.
Sort according to number of pass.
If total number of elements are 5 then 4 pass to complete.
example
--------
Number of elements:6 , 5 pass to complete.
Find smallest element in array 
70 68 10 25 12 16
10 68 70 25 12 16  pass1[find smallest element[10] and swap with first element[70]]
10 12 70 25 68 16  pass2 
10 12 16 25 68 70  pass3
10 12 16 25 68 70  pass4
10 12 16 25 68 70  pass5

Algorithm for selection sort
------------------------------
 selection_sort(array,n)
 [array: list, n:number of elements in list]
step1 : set i=1
step2 : Repeat step 3 to 6 while (i<n)
step3 : set s=i, j=i+1
step4 : Repeat step a and b while(j<=n)
        a) if(array[j]<array[s])
            - set s=j
        b) set j=j+1
step5 :Interchange array[i] by array[s]
step6 :set i=i+1
step7: return

 1  2  3  4  5  6      n=6
70 68 10 25 12 16
10 68 70 25 12 16
10 12 70 25 68 16
i=2         1<6 [1 2 3 4 5]
s=5
j=6   [ 3 4 5 6]
  
#include<stdio.h>
main()
{
    int num[10],i,j,s,n=10;
    printf("Enter 10 elements:");
    for(i=0;i<10;i++)
      scanf("%d", &num[i]);
    for(i=0;i<n;i++)
     {
        s=i;
        for(j=i+1;j<n;j++)
         {
              if(num[j]<num[s])
               s=j;
         }  
       num[i]=(num[i]+num[s])-(num[s]=num[i]); 
  
     } 
   printf("Sorted List:\n");
    for(i=0;i<n;i++)
      printf("%d ", num[i]);   
}


Insertion Sort
-------------------------
It is also type of sorting algorithm.
it sort the element using pass and every pass can insert an element at proper position.
List is divided into two halves: sorted and unsorted list.
Take the value from unsorted list and insert the value in sorted list.
Value is re-arranged using shift.
example
-------------
   23 78 45 8 32 56

 23 | 78 45 8 32 56  [list is divided into sorted and unsorted list] 
23 78 | 45 8 32 56  pass 1[pick 78 and inserted at sorted list]
23 45 78 | 8 32 56  pass 2 [pick 45 from unsorted list and inserted in sorted list]
8 23 45 78 | 32 56  pass 3
8 23 32 45 78 | 56  pass 4
8 23 32 45 56 78    pass 5

11 22 33 44 55 - - -

Algorithm for insertion sort
--------------------------------
  insert_sort(array,n)
step1 : set i=2
step2 : Repeat step 3 to 6 while(i<n)
step3 : set temp=array[i],j=i-1
step4 : Repeat step a & b while(j>=1 & temp<array[j])
         a) set array[j+1]=array[j]
         b) set j=j-1
step5 : set array[j+1]=temp
step6 : set i=i+1
step7 : Return


    1  2 3  4  5  6 
   23 78 45 8 32 56
   23 45 78 8 32 56
 
i=4 
temp=8
j=3
 DS&C Homework[3Aug2021]
---------------------------------
Q1 program to print index value of greatest element.
   num[10]={11,20,30,12,57,90,10,60,45,14}, n=10
Q2 program to print index value of smallest element.
   num[10]={11,20,30,12,75,90,13,67,45,14}, n=10
Q3 program to print index value of greatest alphabet.
   alpha[10]={'B','C','G','A','L','M','J','P','D','E'}, n=10
Q4 program to print index value of smallest alphabet.
   alpha[10]={'B','C','V','A','T','M','J','P','D','E'}, n=10
Q5 program to sort elements using selection sort.
   num[10]={5.6,8.7,1.2,9.8,2.3,1.1,3.5,5.5,2.2,1.0},n=10
Q6 program to sort elements in descending order using selection sort.
   num[10]={11,4,5,40,78,55,44,23,10,8}, n=10
Q7 program to sort alphabets in ascending order using selection sort.
   alpha[10]={'B','K','V','A','T','M','J','P','D','E'}, n=10
Q8 program to sort alphabets in descending order using selection sort.
   alpha[10]={'B','C','G','A','L','H','J','P','D','E'}, n=10
Q9 Write general algorithm for selection sort.
   55,11,45,90,10,34,33,54,21,20
Q10 Write general algorithm for Insertion sort.
   55 44 22 10 33 25 8
============================================================================================ ---------------------------------------------------------
Insertion sort
-------------------------------------------------------
#include<stdio.h>
main()
{
   int arr[5]={15 ,10, 13, 9, 3};
    int i, temp, j,n=5;
    for (i=1;i<n;i++)                //pass
    {
       temp=arr[i];
        j=i-1;
        while (j>=0&&arr[j]>temp)    //shifting
        {
            arr[j+1]=arr[j];
            j=j-1;
        }
        arr[j+1]=temp;
      }
  printf("sorted Array\n");           //sorted array
   for(i=0;i<n;i++)
     printf(" %d ",arr[i]);

}
 program to find index of greatest element
-----------------------------------------
#include<stdio.h>
main()
{   
   int i,gi,num[10]={11,30,20,10,19,14,12,38,24,20};
    gi=0;
    for(i=1;i<10;i++)
    {
        if(num[i]>num[gi])
         gi=i;
    }
   printf("Index of greatest element=%d", gi);
}
---------------------------------------------------------
Insertion sort
-------------------------------------------------------
#include<stdio.h>
main()
{
   int arr[5]={15 ,10, 13, 9, 3};
    int i, temp, j,n=5;
    for (i=1;i<n;i++)                //pass
    {
       temp=arr[i];
        j=i-1;
        while (j>=0&&arr[j]>temp)    //shifting
        {
            arr[j+1]=arr[j];
            j=j-1;
        }
        arr[j+1]=temp;
      }
  printf("sorted Array\n");           //sorted array
   for(i=0;i<n;i++)
     printf(" %d ",arr[i]);

}

function
-----------------
It is self contained block of statement which performs a task.
It is block of code. Curly braces make block.
It is also used for control flow.
There are three elements of function.
------------------------------------
 1) prototype
 2) function call
 3) function definition
There are two types of function: predefined and userdefined
predefined function is also called library function. It is declared in header file.
 printf(), scanf()  => stdio.h
 strupr(),strrev() => string.h
You can not modify working of predefined function.
Userdefined function
------------------------
User design function according to requirements.
There are two techniques to design.
1) with prototype       2) without prototype
 a) prototype            a) function definition
 b) function call        b) function call
 c) function definition 
Prototype
---------------
It is declaration of user defined function.
It is summerized form of user defined function.
  void show();
  void sum(int,int);
  int sum();
  float getpi();
It is declared global or local type
Function call
------------------
It is used to call function definition.
You can call as per your requirements.
  print();    //function call
Function call statement does not require return type.

Function definition
-----------------------
It is working part of function.
Function definition must be self declared.
Nested definition is not allowed.
Function definition defines work in block.
void show()
{
     printf("Name: ABc");
     printf("Roll : 1");
}

program to print name and address using user defined function
---------------------------------------------------------------
Take meaningful name for function.
#include<stdio.h>
void showdetails();   //prototype
main()
{
     printf("I am main function\n");
     showdetails();      //function call
     printf("\nThank you");
}
void showdetails()       //function definition
{
     printf("\nName: Ramesh");
     printf("\nAddress: Delhi");
}


#include<stdio.h>
void showdetails()       //function definition
{
     printf("\nName: Ramesh");
     printf("\nAddress: Delhi");
}
main()
{
     printf("I am main function\n");
     showdetails();      //function call
     showdetails();
     showdetails();
     printf("\nThank you");
}

Categories of function
------------------------------
1) no argument no return type
2) argument and no retrun type
3) argument and return type
4) no argument but return value

      
    gift fathersbirthday();  =>4
    vegitable purchasevegitable(money,bag); =>3
    nothing birthday(money); =>2

program to find sum of two numbers using function
---------------------------------------------------
#include<stdio.h>
void sum();      //prototype
main()
{
     printf("Welcome\n");
      sum();      //function call
     printf("\nThank You");    
}
void sum()        //function defintion
{
      int n1,n2;
      printf("Enter two numbers:");
      scanf("%d%d", &n1,&n2);
      printf("Addition=%d",n1+n2);    
}

#include<stdio.h>
void sum(int,int);            //prototype
main()
{ 
      int n1,n2;
      printf("Enter two numbers:");
      scanf("%d%d", &n1,&n2);
      printf("Welcome\n");
      sum(n1,n2);              //function call
      sum(100,200);
      printf("\nThank You");    
}
void sum(int n1,int n2)        //function defintion
{
      printf("Addition=%d",n1+n2);    
}

#include<stdio.h>
void sum(int n1,int n2)        //function defintion
{
      printf("Addition=%d",n1+n2);    
}
main()
{ 
      int n1,n2;
      printf("Enter two numbers:");
      scanf("%d%d", &n1,&n2);
      printf("Welcome\n");
      sum(n1,n2);              //function call
      sum(100,200);
      printf("\nThank You");    
}

3) Argument and return value type
-----------------------------
calculate square of integer number

#include<stdio.h>
int square(int);   //prototype
main()
{
     int r, n;
     printf("Enter value to calculate square:");
     scanf("%d", &n);
      r=square(n);            //function call
     printf("Suare value=%d",r);
   
}
int square(int n)
{
    return n*n;
}

program to calculate square of float number
#include<stdio.h>
float square(float);   //prototype
main()
{
     float r, n;
     printf("Enter value to calculate square:");
     scanf("%f", &n);
      r=square(n);            //function call
     printf("Suare value=%f",r);
   
}
float square(float n)
{
    return n*n;
}

program to calculate area of circle  [area=pi*r*r]
-----------------------------------------------------
#include<stdio.h>
float area(int,float);
main()
{
    int r;
    float a,pi;
    printf("Enter value for radius and pi:");
    scanf("%d%f", &r,&pi);
    a=area(r,pi);
    printf("Circle area=%f",a);
}
float area(int r, float pi)
{
    return r*r*pi;
}

factorial of number using function
-------------------------------------
#include<stdio.h>
int factorial(int);     //prototype
main()
{
    int r,n;
    printf("Enter number to get factorial:");
    scanf("%d", &n);   //5
    r=factorial(n);        //function call
    printf("Factorial=%d",r);
}
int factorial(int n)      //function definition
{
    int f=1;
    while(n>0)
    {
       f=f*n;
        n--;
    }    
   return f;
}
No argument but return value
--------------------------------
program to print value of pi using function.
---------------------------------------------
#include<stdio.h>
float getpi();
main()
{
    float p;
    p=getpi();
    printf("Value of pi=%f", p);
}
float getpi()
{
    return 3.142;
}

-------------------------------------------------------
  printf("Hello");

#include<stdio.h>
main()
{
    printf("%d", printf("Hello"));
}
-------------------------------
Recursive function
-------------------------
It is type of function.
Function definition use call of same function or function call itself.
void show()   //function definition
{

    statement;
    statement;
    show();        //Recursive call
}
Circular execution is possible using recursive call.
It is an alternative of loop.
program to print name infinitely
----------------------------------
#include<stdio.h>
void show();
main()
{
   printf("Hello");
   show();
}
void show()
{
   printf(" tat ");
   show();
}

program to print 10 to 1 number using recursive function.
---------------------------------------------------------
#include<stdio.h>
void series(int);
main()
{
   series(10);
}
void series(int n)
{
   if(n==0)
    return;
   else
   {
     printf("%d ",n);
     series(n-1);
   }
}

program to print 1 to 10 numbers using recursive function
----------------------------------------------------------
#include<stdio.h>
void series(int);
main()
{
   series(1);
}
void series(int n)
{
   if(n==11)
    return;
   else
   {
     printf("%d ",n);
     series(n+1);
   }
}
program to print a to z using recursive function
-------------------------------------------------
#include<stdio.h>
void salpha(char);
main()
{
   salpha('a');
}
void salpha(char ch)
{
   if(ch=='z')
    {
      printf("%c",ch);
     return;
    }
   else
   {
     printf("%c ",ch);
     salpha(ch+1);
   }
}
 DS&C Homework[5Aug2021]
------------------------------------
Q1 program to calculate simple interest using function.
    void calinterest(int,float,float)
Q2 program to calculate area of rectangle using function.
    void calarea(int,int)
Q3 program to calculate area of square using function.
    int sarea(int)
Q4 program to find average of three int number using function.
    int avgnum(int,int,int)
Q5 program to check number is even or odd using function.
    void checknum(int)
Q6 program to find greatest number among two numbers. Use function.
    void greater(int ,int)
Q7 program to print 1 to 50 using function.
    void series()
Q8 program to print all odd number between 1to 50
    void oseries()
Q9 program to print 10 to 50 using recursive function
    void nseries(int)
Q10 program to print A to Z using recursive function
    void calpha(char)
=======================================================================================
[8:45 pm, 07/08/2021] Rahul Sir Tat: program to check number is even or odd using function
-----------------------------------------------------
#include<stdio.h>
void checknum(int);
main()
{
    int n;
    printf("Enter number to check even or odd:");
    scanf("%d", &n);  //15
    checknum(n);   
}
void checknum(int n)
{
     if(n%2==0)
      printf("Even number");
     else
      printf("Odd number");
}
program to find greatest number among two numbers
----------------------------------------------------
#include<stdio.h>
void greater(int,int);
main()
{
    int n1,n2;
    printf("Enter two numbers:");
    scanf("%d%d", &n1,&n2);
    greater(n1,n2);
}

void greater(int n1,int n2)
{
     if(n1>n2)
       printf("n1 is greater");
     else
       printf("n2 is greater");
}

program to print odd numbers between 1 to 50.

#include<stdio.h> 
void oseries();
main()
{
    oseries();
}
void oseries()
{
    int i;
    for(i=1;i<=50;i++)
      if(i%2!=0)
        printf("%d ",i);
}

Function and Array
------------------------
Function also use array as a argument.
Function declaration use data type with subscript.
 void show(int[]);
 void show(int[], int);
 void show(int[],int[]);
In case array as argument, function call is used array name.

program to pass array in user defined function
------------------------------------------------
#include<stdio.h>
void show(int [5]);
main()
{
     int num[5]={11,22,33,44,55};
     show(num);     //function call use only array name
}
void show(int num[5])
{
     int i;
     for(i=0;i<5;i++)
       printf("%d ", num[i]);
}

program to pass two array using function.
----------------------------------------
#include<stdio.h>
void show(int [],float[]);
main()
{
     int num[5]={11,22,33,44,55};
     float n[4]={1.5,6.5,3.4,2.3};
     show(num,n);     //function call use only array name
}
void show(int num[5],float n[5])
{
     int i;
     for(i=0;i<5;i++)
       printf("%d ", num[i]);
     for(i=0;i<5;i++)
       printf("%f ", n[i]);
}

program to compare two arrays
====================================
#include<stdio.h>
void compare(int [],int[]);
main()
{
     int num[5]={11,22,33,44,55};
     int n[5]={11,22,33,44,55};
     compare(num,n);     //function call use only array name
}
void compare(int num[5],int n[5])
{
     int i,f=0;
     for(i=0;i<5;i++)
     { 
        if(num[i]!=n[i])
          f=1;
        else
          printf("\n%d=%d\n", num[i],n[i]);
      }
    if(f==0)
      printf("Elements of num and n are same ");
    else   
      printf("Elements are not same ");
}

program to sort list of element using bubble sort
--------------------------------------------------
#include<stdio.h>
void bubblesort(int[],int);
int main()
{
   int n=5,num[5],i;
   printf("Enter 5 elements:");
   for(i=0;i<5;i++)
      scanf("%d", &num[i]);
   bubblesort(num,n);
  return 0;
}
void bubblesort(int num[5],int n)
{
  int i,j ;
   for(i=1;i<n;i++)   //pass
   {
      for(j=0;j<n-i;j++)   //comparision
       {
            if(num[j]>num[j+1])
              num[j]=(num[j+1]+num[j])-(num[j+1]=num[j]);
       }
    }
   printf("Sorted list\n");
    for(i=0;i<n;i++)   //print the sorted array
     {
         printf("%d ",num[i]);
     }
}

Stack
=====================
It is linear datastructure.
Linear means data in squence.
Stack is implemented using array and Linked list.
Stack is also called LIFO[last in first out] list.
Only one end is used for insertion and deletion.
Insertion operation is called PUSH.
Deletion operation is called POP.
Print topmost element of Stack is PEEP.

Operation of stack
---------------------
1) PUSH 
2) POP
3) PEEP

Push operation
------------------
Insertion of an element into the stack.
Check overflow condition[If stack is full.There is no space for new element].
At a time, you can insert only one element.
top is variable used to maintain index for stack. If stack is empty then top=0 or -1
If stack have two element then top represent 2[index of last element].
  stack[5];   //msize=5 

Algorithm for push operation
-----------------------------------
   push(stack,top,msize,iele)
  [stack: array,top:index for stack,msize:maximum size of stack,iele: Inserting element]
step1 : if(top==msize)
         Display 'Overflow condition.' and exit
step2: set top=top+1
step3: set stack[top]=iele
step4: return
 DS&C Homework[7Aug2021]
--------------------------
Q1 Program to print sum of array element using function.
    void sumarr(int [])
Q2 program to print alternate array elements using function.
    void alternate(int[])
Q3 program to print sum of odd array elements using function.
    void oddsum(int[])
Q4 program to print sum of even array elements using function.
    void evensum(int [])
Q5 program to descending sort of array elements using function[Bubble sort].
    void bsort(int [],int)
Q6 program to sort array elements in Ascending order using function[Selection sort]
    void ssort(int [],int)
Q7 program to sort char array in Ascending order using function[Insertion sort]
    void isort(char[],int)
Q8 program to design menu based program for following operation.
    Menu Based Calculator
============================
   1 Input two numbers
   2 Addition
   3 Substraction
   4 Multiplication
   5 Division
   6 Exit
Enter choice:
Q9 Program to design menu based program for following operation.
 Menu Based windows Utility
-------------------------------------
    1 Open Wordpad
    2 Open Paintbrush
    3 Open Explorer
    4 Open Internet Explorer
    5 Open Calculator
    6 Exit
  Enter your choice:

system("write.exe"); open wordpad
system("explorer.exe");
system("C:\\Program Files\\Internet Explorer\\iexplore.exe");
==================================================================================================
[8:31 pm, 10/08/2021] Rahul Sir Tat: Menu driven for calculator
------------------------------
#include<stdio.h>
void add();
void sub();
void menu();
int n1,n2;
int main()
{
    menu();
    return 0;
}
void menu()
{
    char ch;
    printf("\nMenu Driven calculator\n");
    printf("================================\n");
    printf("       + for addition\n");
    printf("       - for substraction\n");
    printf("================================\n");
    printf("    Enter Your choice:");
    scanf("%c", &ch);
    switch(ch)
    {
         case '+': 
          add();
         break;
         case '-': 
          sub();
         break; 
    }
}
void sub()
{
        printf("Enter two numbers:");
         scanf("%d%d", &n1,&n2);
         printf("Addition=%d", n1-n2);
}
void add()
{
       printf("Enter two numbers:");
         scanf("%d%d", &n1,&n2);
         printf("Addition=%d", n1+n2);
}         

--------------------------------------------------
pop operation
----------------
It is used to remove an element from stack.
During pop operation, underflow condition is checked.
Underflow condition: Stack is empty. top represent 0 or -1.
In deletion operation, value of top is decreased by -1

algorithm
--------------
if(top=0)
 display 'Underflow' and exit

code
-----------------------
if(top==-1)
{
   printf("Underflow condition..");
   exit(0);
}

Algorithm for pop operation
----------------------------------
  pop(stack, top)
 [stack: elements in array, top: represent index of topmost element]
step1: if(top=0)
         Display' Underflow condition' and exit
step2: set dele=stack[top]
step3: set top=top-1
step4: return
            1  2  3
 stack[3]=[10,20,30]    top=3      

 stack[3]=[]      top=0      => underflow condition

peep operation
-------------------------
print the topmost element.
Check the underflow condition before peep.
It is an operation of stack.

Algorithm of peep
----------------------
   peep(stack, top)
step1: if(top=0)
       -Display 'Underflow condition..' and exit.
step2: Display stack[top]
step3: return

program for stack operation[push,pop,peep]
---------------------------------------------
#include<stdio.h>
void menu();
void push();
void pop();
void peep();
int stack[5];
int msize=5; 
int top=-1;
main()
{
    menu();
}
void menu()
{
    int ch;
    system("cls");
    printf("\nStack Operations\n");
    printf("========================================\n");
    printf("          1 Push\n");
    printf("          2 Pop\n");
    printf("          3 Peep\n");
    printf("          4 Exit\n");
    printf(" ========================================\n");
    printf("       Enter Your Choice:");
    scanf("%d", &ch);
    if(ch==1)
       push();
    else if(ch==2)
       pop();
    else if(ch==3)
       peep();
     else if(ch==4)
        exit(0);
    menu();
}
void push()
{
   if((msize-1)==top)
   {
       printf("Overflow condition..");
       system("pause");
       menu();
    }
   top=top+1;
   printf("Enter inserting value:");
   scanf("%d",&stack[top]);
   menu();
}
void pop()
{
   if(top==-1)
   {
       printf("Underflow condition..\n");
       system("pause");
       menu();
   }
   printf("Popped element=%d\n", stack[top]);
   system("pause");
   top=top-1;
   menu();
}
void peep()
{
   if(top==-1)
   {
       printf("Underflow condition..\n");
       system("pause");
       menu();
   }
   printf("Topmost element=%d\n", stack[top]);
   system("pause");
   menu();
}


Application of Stack
-------------------------------------
1) conversion of infix to postfix expression
2) conversion of infix to prefix expression
3) Evalution of postfix expression.
4) Quick sort is used to keep index value in stack
5) Recursive function is used to keep parameter in stack

Infix expression
---------------------------
When operator symbol is placed in between its operand.
  A+B    // A,B operands, + operator
10+20X2  // 10,20,2 operands +x operator

prefix expression
------------------------------
It is also called polish notation.
It refers to the notation in which operator symbol is placed before its operand.
  +AB
  +2 3
  + X 10 6 3
Evaluate prefix expression using stack.

postfix expression
------------------------
It refers to the notation in which operator symbol is placed after its operend.
Evalute postfix expression using stack.

  AB+
  10 2 -
  10 2 3 X +


conversion of infix to prefix 
----------------------------------------------
 A + B     => +AB
 10+20*8
 10 + *20 8 => +10*20 8
 (10+20)+50/2=>
         +10 20 + 50/2
         +10 20 + /50 2
         + + 10 20/50 2


10 - 5 * 6 + 3    => 
     10 - *5 6 +3
    -10*5 6 + 3
     + - 10 * 5 6 3

15*(10+20)-11 =>
15 * +10 20 - 11   
* 15 +10 20 - 11
- * 15 + 10 20 11

10+(20-50) * 78  => 
10 + -20 50 * 78   
10 + * - 20 50 78
+ 10 * - 20 50 78

A +(B-C)/D =>  + A / - B C D

A + B - C + D
  +AB - C +D
  -+ABC + D
  +-+ABCD

A+B/C-D*E
A + /BC - D * E
A + /BC - *DE 
+A/BC - *DE
-+A/BC*DE

Conversion of infix to postfix
------------------------------------
A+B   => AB+

A-B+C*D =>  AB-CD*+
A-B + CD*
AB- + CD*
AB-CD*+

A-B*(C+D)  =>  ABCD+*-
A-B * CD+
A- BCD+*
ABCD+*-

(A+B-C)*F+G   ABC+-F*G+
 AB+ -C * F + G
 AB+C- * F + G
 AB+C-F*  + G
 AB+C-F*G+
[10:33 pm, 10/08/2021] Rahul Sir Tat: DS&C Homework[10Aug2021]
======================================
Q1 Program to perform stack operation on characters
Q2 program to print all consequitive array elements
   int num[]={11,20,21,40,45,56,57,80,19,20};
   output: 20 21 56 57 19 20
Q3 program to print all consequitive character array elements.
   char alpha[]={'s','t', 'a','g','k','l','p','r','y','z'};
Q4 program to find sum of consequitive array elements
   int num[]={11,20,21,40,45,56,57,80,19,20};
Q5 convert infix to postfix
 a) a+b*c-d
 b) a+(b+c*d)/e
 c) A+B+C+D-E
 d) x-y*g-b+c
Q6 convert infix to prefix
a) a-b-c*d
b) (x-y)*(d+e/f)
c) D*E+X*Y
d) A+(b*c*d-e)+F
==============================================================================================
 Infix to prefix
----------------------- 
d) A+(b*c*d-e)+F
A+ (*bc * d-e)+F
A+ (**bcd -e)+F
A+ -**bcde +F
+A-**bcde +F
 ++A-**bcdeF
------------------------
 (x-y)*(d+e/f)
 -xy * (d+e/f)
 -xy * (d+ /ef)
 -xy * +d/ef
 *-xy+d/ef

-------------------------------
infix to postfix
--------------------------
a) A+B*C-D*(E+F)     
   A+B*C-D* EF+
   A+ BC* -D * EF+
   A+ BC*  - DEF+*
   ABC*+ -  DEF+*
   ABC*+DEF+*-


convert infix to postfix using stack
---------------------------------------
  A + B * C )     //add closing bracket at end of the expression.
  1 2 3 4 5 6
 push opening bracket in stack.
 slno         Stack          postfix
-------------------------------------------------------- 
              (
1 A           (               A
2 +           (+              A
3 B           (+              AB
4 *           (+*             AB
5 C           (+*             ABC
6 )          pop all elements ABC*+     postfix=ABC*+

2) A * B + C - D )
   1 2 3 4 5 6 7 8
 push opening bracket in stack.
 slno         Stack          postfix
-------------------------------------------------------- 
              (
1 A           (			A
2 *	      (*		A
3 B	      (*		AB
4 +	      (+		AB*
5 C	      (+		AB*C
6 -	      (-		AB*C+
7 D	      (-		AB*C+D
8 )          pop all		AB*C+D-     //postfix AB*C+D- 	 	

A + B * C * D - F )
1 2 3 4 5 6 7 8 9 10
 push opening bracket in stack.
 slno         Stack          postfix
-------------------------------------------------------- 
		(
1 A		(		A
2 +		(+		A
3 B		(+		AB
4 *		(+*		AB
5 C		(+*		ABC
6 *		(+*		ABC*
7 D		(+*		ABC*D
8 -		(-		ABC*D*+
9 F		(-		ABC*D*+F
10)        pop all elements	ABC*D*+F-
--------------------------------------------------------------------
Convert using stack
A > B + C * D > E )
1 2 3 4 5 6 7 8 9 10

 push opening bracket in stack.
 slno         Stack          postfix
-------------------------------------------------------- 
		(
1 A		(		A
2 >		(>		A
3 B		(>		AB
4 +		(>+		AB
5 C		(>+		ABC
6 *		(>+*		ABC
7 D		(>+*		ABCD
8 >		(>		ABCD*+>
9 E		(>		ABCD*+>E
10)		pop All		ABCD*+>E>

convert to postfix using stack
 ( x - y ) * ( d + e  /  f  )  )
 1 2 3 4 5 6 7 8 9 10 11 12 13 14
 push opening bracket in stack.
 slno         Stack          postfix
-------------------------------------------------------- 
		(
1 (		((		
2 x		((		x
3 -		((-		x
4 y		((-		xy
5 )		(		xy-      //pop all elements from stack and cancel bracket
6 *		(*		xy-
7 (		(*(		xy-
8 d		(*(		xy-d
9 +		(*(+		xy-d
10e		(*(+		xy-de
11/		(* (+/		xy-de
12f		(*(+/		xy-def
13)		(*		xy-def/+
14)		pop all		xy-def/+*

 a + b > ( c - d / e  )  -  f  ) 
 1 2 3 4 5 6 7 8 9 10 11 12 13 14
push opening bracket in stack.
 slno         Stack          postfix
-------------------------------------------------------- 
		(
1 a		(		a
2 +		(+		a
3 b		(+		ab
4 >		(>		ab+
5 (		(>(		ab+
6 c		(<(		ab+c
7 -		(<(-		ab+c
8 d		(<(-		ab+cd
9 /		(<(-/		ab+cd
10e		(<(-/		ab+cde
11)		(<		ab+cde/-
12-		(<-		ab+cde/-
13f		(<-		ab+cde/-f
14)          pop all		ab+cde/-f->

Infix to prefix using stack
------------------------------------

 ) A + B * C
 6 5 4 3 2 1

push opening bracket in stack.
 slno         Stack          prefix
-------------------------------------------------------- 
		(
1 C		(		C	
2 *		(*		C
3 B		(*		BC
4 +		(+		*BC
5 A		(+		A*BC
6 ) 		pop		+A*BC

Convert to prefix form using Stack
   A + B * C - D   

conver to prefix form using stack
 )  A  >  B + C * D < E + F
 12 11 10 9 8 7 6 5 4 3 2 1

push opening bracket in stack.
 slno         Stack          prefix
-------------------------------------------------------- 
		(
1 F		(		F
2+		(+		F
3E		(+		EF
4<		(<		+EF
5D		(<		D+EF
6*		(<*		D+EF
7C		(<*		CD+EF
8+		(+ 		*<CD+EF
9B		(+		B*<CD+EF
10>		(>		+B*<CD+EF
11A		(>		A+B*<CD+EF
12)            POP aLL		>A+B*<CD+EF

 DS&C Homework[12Aug2021]
----------------------------------------
Q1 convert infix to postfix using stack
 a) A*B+C
 b) A*(B+C)-D
 c) A+B+C*D-E
 d) (A+B*C)-D*E
 e) A>B*C-G*H
Q2 Convert infix to prefix using stack
a) a>b*c-d
b) a+b*(c-d)
c) (a>b+c)*d-e
d) a+b+c-d
e) (a+b)/(c-d)
Q3 Direct conversion to postfix and prefix
 a) a-t+d/e
 b) (a+b-c/d)*e%f
 c) a+b*c-d
 d) (a-b)*c-d
 e) a/b%c+d
[8:14 pm, 14/08/2021] Rahul Sir Tat: ) a + b + c - d   
 8 7 6 5 4 3 2 1
 push ( in stack
similar precedence operator keep inside stack


sno		stack			prefix
----------------------------------------------------
		(
1 d		(			d
2 -		(-			d
3 c		(-			cd
4 +		(-+			cd
5 b		(-+			bcd
6 +		(-++			bcd
7 a		(-++			abcd
8 )		pop all			-++abcd	

A > B * C - G * H ) convert to postfix
1 2 3 4 5 6 7 8 9 10
sno		stack			postfix
----------------------------------------------------
		(
1 A		(			A
2 >		(>			A
3 B		(>			AB
4 *		(>*			AB
5 C		(>*			ABC
6 -		(>-			ABC*
7 G		(>-			ABC*G
8 *		(>-*			ABC*G
9 H		(>-*			ABC*GH
10 )		pop all			ABC*GH*->

(a+b-c/d)*e%f to prefix
 (a+b- /cd)*e%f
 (+ab - /cd)*e%f
 -+ab/cd * e % f
 *-+ab/cde % f
 %*-+ab/cdef



A  >  B + C * D < E + F
A>B+ *CD < E+F       
A > +B*CD < E+F
A > +B*CD < +EF
>A+B*CD < +EF
<>A+B*CD+EF


Algorithm for infix to postfix expression
----------------------------------------------
  infix_to_postfix(infix , postfix)

step 1 push '(' into stack and ')' add to the end of infix
step 2 scan infix from left to right and repeat step 3 to 6 for each element of infix until the stack is empty.
step 3 if operand is encountered add to postfix.
step 4 if '(' is encountered push into the stack
step 5 if X operator is encountered, then
           - Repeatedly pop from stack and add to postfix each operator which have same or higher precedence.
           - Push into the stack
step 6 if ')' is encountered, then
        -Repeatedly pop from the stack and add to postfix each operator until '(' is encoutered.
        - Remove ()
step 7 Return
  


General algorithm for infix to prefix
---------------------------------------
 step1 push '(' into the stack
 step2 scan infix from right to left
 step3 same precedence operator keep inside stack
 step4 if lower precedence operator is encountered then higher precedence operator go to prefix.


Postfix evalution
---------------------------
Find the result of postfix using stack.
Add right parenthesis to the end of postfix . Right parenthesis is work like sentinal.
Scanning start from left to right.
Push '(' bracket in stack.
      10  5  7  *  +  )  
      1   2  3  4  5  6

scanned element 		 stack
-----------------------------------------------------
                      		(
1 10				( 10
2 5				( 10 5
3 7				( 10 5 7
4 *				( 10 35		      //5 * 7
5 +				( 45		 	//10+35
6 )				pop 45 and cancel bracket  

10 / 5 + 6 * 2 =>  10  5  / 6  2  *  + 
---------------------------------------

10  5  / 6  2  *  +  )
1   2  3 4  5  6  7  8
scanned element 		 stack
-----------------------------------------------------
				(
1 10				(10
2 5				(10 5      
3 /				( 2		//10/5
4 6				( 2 6
5 2				( 2 6 2
6 *				(2 12		//6*2
7 +				(14		//2+12
8)				pop 14 and cancel brackets

Algorithm for evalution of a postfix
------------------------------------------
     post_evaluation(postfix)

step 1: Add right parenthesis ')' at end of postfix
step 2: scan postfix from left to right and repeat step 3 & 4 for each element of postfix until the ')' is encountered.
step 3: if operand is encountered, push into the stack.
step 4: if an operator(X) is encountered then,
        - pop top two elements[A B] from the stack
        - Evaluate B (X) A
        - push result in stack
step 5: Return 

Evaluate postfix
------------------
5 6 2 + * 12 4 / -
 DS&C Homework[14Aug2021]
----------------------------
Q1 program to accept expression in char array and print.
    Enter expression: a+b*c
    your expression: a+b*c
Q2 program to accept expression in char array. print operand and operator separately
   Enter infix expression: a+b*c
   operand: abc
   operator: +*
Q3 program to accept expression in char array. count operator and operands
Q4 program to accept infix expression in char array. print operator according to precedence.
   Enter infix expression: a+b*c>d
   higher to lower precedence: * + >
Q5 program to accept infix expression in char array. print operator according to precedence.
   Enter infix expression: a+b*c>d
   lower to higher precedence: > + *
Q6 program to accept infix expression in char array. print same precedence operator.
   Enter infix expression: a+b*c>d%f-d
   same precedence: 
    + -  * %
Q7 Find the value of postfix using stack.
    a) 10 6 * 7 3 - + 
    b) 10 11 12 + 8 * -
    c) 5 1 3 5 4 - * + >
    d) 5 4 - 6 19 - *
    e) 15 14 2 / 6 2 - + >
 5  1  3  5  4  -  *  +  >  )
1  2  3  4  5  6  7  8  9 10

symbol Scanned			stack
---------------------------------------------
				(
1 5				(5
2 1				(5 1
3 3				(5 1 3
4 5				(5 1 3 5
5 4				(5 1 3 5 4
6 -				(5 1 3 1
7 *				(5 1 3
8 +				(5 4
9 >				(1
10)                           empty stack    output=1   

Queue
--------------------------
It is linear datastructure. 
It arrange the data in sequence.
It is also called linear queue.
It is FIFO[first in first out].
In queue, one end is used for insertion and other end used for deletion.
Insertion end is called rear end.
Deletion end is called front end.
Rear and front are index pointers.

Operations in Queue
-----------------------------
 -Insertion
 -Deletion

Representation of Queue
--------------------------
-using Array
-using Linked list

Application of Queue
------------------------------
-It is used to store telephone calls in Call Center[enquiry system]
-printing process details store in queue incase of network printer.
-CPU scheduling
-Simulation of traffic control system

example
----------------
   int queue[5];
   int front=-1,rear=-1;    //queue is empty
   
   insert(10)
   queue [10]      //front=0 rear=0
   
   insert(20)
    queue[10,20]    //front=0 rear=1
  insert(30)
    queue[10,20,30]   //front=0 rear=2

  insert(40)
    queue[10,20,30,40]   //front=0 rear=3

   delete()
   queue[20,30,40]      //front=1 rear=3   

Performing any operation in queue check the following condition
----------------------------------------------------------------
1) overflow condition
2) underflow condition

1) overflow condition
-------------------------
Queue is full and no space for new insertion.
It is checked when insertion operation performed.

  Algorithm		
-----------------------------------------
  if(rear==sizeof Queue)
   Display'Overflow condition'& exit

C-Program
-----------
  if(rear==sizeofQueue-1)
   {
    printf("Overflow condition");
     exit(0);
   }

Insertion operation
------------------------------
  que_ins(queue,front,rear,iele)
[queue: queue array,front:deletion index,rear:insertion index,iele:inserting element]

step 1:  if(rear=size)
         Display'Overflow condition' & exit

step 2: if(front=0 & rear=0)
          -set front=1, rear=1
        else
          -set rear=rear+1
step 3: set queue[rear]=iele
step 4: Return
 

 queue[4]      //capacity is 4
   front=0 rear=0
insert(10)
  queue[4]=[10]   front=1 rear=1
insert(45)
  queue[4]=[10,45]  front=1 rear=2
insert(50)
  queue[4]=[10,45,50] front=1 rear=3
insert(100)
  queue[4]=[10,45,50,100]  front=1 rear=4
insert(23)
  

Algorithm for deletion operation in queue
---------------------------------------------
   Que_del(queue, front,rear)
 [queue: array,front:deletion index,rear:insertion index]

step1: if(front=0)
       -Display'Underflow condition' and exit
step2: if(front=rear)
          -set front=0,rear=0
       else
          -set front=front+1
step 3: return


Example
  queue[4]=[10,45,50,100]  front=1 rear=4
  delete()
     queue[4]=[45,50,100]  front=2 rear=4

  queue[4] =[]     front=0 rear=0
    delete() => underflow condition and exit
  queue[4]=[11]    front=1 rear=1
   delete()   queue is empty front=0 rear=0


Structure
---------------------------
It is used for making user defined data type.
predefined data type is used in structure declaration.
struct keyword is used for declaration.

 struct  userdefinedDatatypename
 {
     var1;       //structure member
     var2;
     var3;
 };  
structure declaration always end with semicolon.
structure member may be similar or disimlar data.
structure member is accessed using dot operator.
example
--------------
student
 -roll
 -name
 -branch

int s; //keep single integer value
student s;  //keep student data roll,name and branch

struct student
{
    int roll;
    char name[15];
    char branch[10];
};

struct student s;
 s.roll=> keep roll
 s.name=> keep name
 s.branch=> keep branch

s is structure variable. Structure member is accessed using dot[s.roll,s.name,s.branch]

structure initialization
-----------------------------
Declaration sequence maintained incase of compile time initialization.

 struct student   //Global structure declaration
  {
     int roll;
      char name[20];
  };
 main()
 {
      struct student s={10,"Ramesh"};
      printf("%d", s.roll);
      printf("%s", s.name);    
 }  

structure declaration may be global or local type.
Global declaration means before main(). Access globaly in program.
Local declaration means inside main(). Access within main()

 main()
 {
     struct student   //Local structure declaration
     {
      int roll;
      char name[20];
      };

      struct student s={10,"Ramesh"};
      printf("%d", s.roll);
      printf("%s", s.name);    
 }

 DS&C Homework[17Aug2021]
------------------------------------
Q1 Complete Queue operation
Q2 program to design queue for 5 float numbers[menu based]
Q3 program to design queue for 4 characters
Q4 program to design college data type using structure. Store college details and print
Q5 program to design mobile data type using structure. Store mobile details and print
Q6 program to design book data type using structure . Store book details and print.
Q7 program to design DOB data type using structure. Store your birthday and print
Q8 program to design Sports data type using structure. Store name of three sports and print.

============================
 #include<stdio.h>
struct student
{
    int roll;
    char name[20];
};
void menu();
void push();
void pop();
void peep();
struct student stack[3];
int msize=5; //0 1 2 3 4
int top=-1;
main()
{
    menu();
}
void menu()
{
    int ch;
    system("cls");
    printf("\nStack Operations for student data\n");
    printf("========================================\n");
    printf("          1 Push\n");
    printf("          2 Pop\n");
    printf("          3 Peep\n");
    printf("          4 Exit\n");
    printf(" ========================================\n");
    printf("       Enter Your Choice:");
    scanf("%d", &ch);
    if(ch==1)
       push();
    else if(ch==2)
       pop();
    else if(ch==3)
       peep();
     else if(ch==4)
        exit(0);
    menu();
}
void push()
{
   if((msize-1)==top)
   {
       printf("Overflow condition..");
       system("pause");
       menu();
    }
   top=top+1;
   printf("Enter Roll and Name:");
   scanf("%d%s",&stack[top].roll,&stack[top].name);
   menu();
}
void pop()
{
   if(top==-1)
   {
       printf("Underflow condition..\n");
       system("pause");
       menu();
   }
   printf("Popped element roll=%d name=%s\n", stack[top].roll,stack[top].name);
   system("pause");
   top=top-1;
   menu();
}
void peep()
{
   if(top==-1)
   {
       printf("Underflow condition..\n");
       system("pause");
       menu();
   }
   printf("Topmost element roll=%d name=%s\n", stack[top].roll,stack[top].name);
   system("pause");
   menu();
}

 Structure
-----------------------------
User input for structure variable.
scanf() function is used to take user input for structure variable.

example : Program to take user input for structure [student -name ,roll,branch]

#include<stdio.h>
struct student
{
    char name[20];
    int roll;
    char branch[20];
};
int main()
{
     struct student s;
     printf("Enter name ,roll and branch:");
     scanf("%s%d%s", s.name,&s.roll,s.branch);
     printf("Name=%s Roll=%d Branch=%s", s.name,s.roll,s.branch);
    return 0;
}

program to store student details with two marks. Print roll ,name and average marks.
-----------------------------------------------------------------------------------
#include<stdio.h>
struct student
{
    char name[20];
    int roll;
    float m1,m2;
};
int main()
{
     struct student s;
     printf("Enter roll,name mark1 and mark2:");
     scanf("%d%s%f%f", &s.roll,s.name,&s.m1,&s.m2);
     printf(" Roll=%d Name=%s Avg marks=%f", s.roll,s.name,(s.m1+s.m2)/2);
    return 0;
}

Array of Structure
-------------------------
Structure variable is declared with array.
Each array elements are represent as structure variable.
struct dob
{
    int day,month,year;
};

  struct dob s1;       //it keeps date of birth of 1 students
  struct dob cse[5];   // it keeps date of birth of 5 students

 cse[] => it is array of structure.
  cse[0] => cse[0].day, cse[0].month, cse[0].year
  cse[1] => cse[1].day, cse[1].month, cse[1].year
  cse[2] => cse[2].day, cse[2].month, cse[2].year
  cse[3] => cse[3].day, cse[3].month, cse[3].year
  cse[4] => cse[4].day, cse[4].month, cse[4].year

program to store 3 date birth in array of structure
-----------------------------------------------------
#include<stdio.h>
struct dob
{
    int day,month,year;
};
int main()
{
    struct dob s[3];
    int i;
    for(i=0;i<3;i++)
    {
      printf("Enter date of birth of %d [day month year]:",i+1);
      scanf("%d%d%d", &s[i].day,&s[i].month,&s[i].year);
    }
     for(i=0;i<3;i++)
     {
       printf(" Date of birth of %dst Student:",i+1);
       printf("%d-%d-%d\n", s[i].day,s[i].month,s[i].year);
     }
   return 0;
}

program to take roll,name ,m1 and m2 of 3 students. print roll,name with average marks
-----------------------------------------------------------------------------------------
struct student
{
    char name[20];
    int roll;
    float m1,m2;
};
int main()
{
     struct student s[3];
     int i;
     for(i=0;i<3;i++)
     {
       printf("Enter roll,name mark1 and mark2 of student%d:",i+1);
       scanf("%d%s%f%f", &s[i].roll,s[i].name,&s[i].m1,&s[i].m2);
     }
     for(i=0;i<3;i++)
     {
       printf("Details of student%d :",i+1);
       printf(" Roll=%d Name=%s Avg marks=%f\n", s[i].roll,s[i].name,(s[i].m1+s[i].m2)/2);
     }
    return 0;
}

program to design stack for 3 student details
------------------------------------------------
#include<stdio.h>
struct student
{
    int roll;
    char name[20];
};
void menu();
void push();
void pop();
void peep();
struct student stack[3];
int msize=5; //0 1 2 3 4
int top=-1;
main()
{
    menu();
}
void menu()
{
    int ch;
    system("cls");
    printf("\nStack Operations for student data\n");
    printf("========================================\n");
    printf("          1 Push\n");
    printf("          2 Pop\n");
    printf("          3 Peep\n");
    printf("          4 Exit\n");
    printf(" ========================================\n");
    printf("       Enter Your Choice:");
    scanf("%d", &ch);
    if(ch==1)
       push();
    else if(ch==2)
       pop();
    else if(ch==3)
       peep();
     else if(ch==4)
        exit(0);
    menu();
}
void push()
{
   if((msize-1)==top)
   {
       printf("Overflow condition..");
       system("pause");
       menu();
    }
   top=top+1;
   printf("Enter Roll and Name:");
   scanf("%d%s",&stack[top].roll,&stack[top].name);
   menu();
}
void pop()
{
   if(top==-1)
   {
       printf("Underflow condition..\n");
       system("pause");
       menu();
   }
   printf("Popped element roll=%d name=%s\n", stack[top].roll,stack[top].name);
   system("pause");
   top=top-1;
   menu();
}
void peep()
{
   if(top==-1)
   {
       printf("Underflow condition..\n");
       system("pause");
       menu();
   }
   printf("Topmost element roll=%d name=%s\n", stack[top].roll,stack[top].name);
   system("pause");
   menu();
}

----------------------------------------------------------------
Pointer
--------------------------------------------------------------
Pointer is type of variable.
It operates value using address.
Pointer variable is declared with *.
* represent value at address.

syntax
---------
  datatype * var;
   int *p1;   //integer pointer, keep address of any integer variable
   float *p2;  //float pointer, keep address of any float pointer
   char *p3;   //character pointer, keep address of any character pointer
All above pointer occupies 4 or 2 bytes memory space.
program to print size of pointers
-----------------------------------
#include<stdio.h>
main()
{
   int *p1;   //integer pointer
   float *p2;  //float pointer
   char *p3;   //character pointer
   printf("Int pointer %d", sizeof(p1));
   printf("Float pointer %d", sizeof(p2));
   printf("char pointer %d", sizeof(p3));
}


Assign address to pointer
----------------------------
  int n=10;
  int *p=&n;
  printf("n=%d",n);     //direct variable
  printf("n=%d", *p);   //using pointer


program to print integer value using int pointer
------------------------------------------------
main()
{
  int n=10;
  int *p=&n;
  printf("n=%d", *p);   //using pointer
}

program to print character value using char pointer
--------------------------------------------------
main()
{
  char ch='A';
  char *p=&ch;
  printf("ch=%c", *p);   //using pointer
}

program to print float value using float pointer
------------------------------------------------
main()
{
  float n=10.5;
  float *p=&n;
  printf("n=%f", *p);   //using pointer
}

pointer arithmatic
-------------------
main()
{
  float n=10.5;
  float *p=&n;
   n++;
   (*p)++;
  printf("n=%f", *p);   //using pointer
  printf("n=%f", n);
}

main()
{
  float n=10.5;
  float *p=&n;
   n=1.5;
   (*p)+=10;
  printf("n=%f", *p);   //using pointer
  printf("n=%f", n);
}

----------------------------------
program to swap two numbers using pointer
-----------------------------------------
#include<stdio.h>
main()
{
    int n1,n2,*p1,*p2;
    printf("Enter value for n1 and n2:");
    scanf("%d%d", &n1,&n2);
    p1=&n1;  //assign address of n1
    p2=&n2;  //assign address of n2
   
    *p1= *p1+ *p2;
    *p2= *p1 - *p2;
    *p1= *p1 - *p2;
    printf("n1=%d n2=%d", n1,n2);
}

Single value is pointed by multiple pointer.

main()
{
    int n=10, *p1,*p2;
    p1=&n;
    p2=&n;
    (*p1)++;
    (*p2)++;
    printf("n=%d", n);
}

main()
{
    char ch='A', *p1,*p2;
    p1=&n;
    p2=&n;
    (*p1)+=32;
    (*p2)+=1;
    printf("ch=%c", ch);
}

DS&C Homework[21Aug2021]
---------------------------------------
Q1 program to accept following in structure varaible and print.
   [ram, cse,bhubneswar]
Q2 program to accept following in structure variable and print roll,name with average marks.
  [10,Sunil, 10.0,8.5,9.6]    
Q3 program to accept following records in array of structure and print each record in separate line.
   [11,Ramesh,ramesh@gmail.com]
   [13,sumit,sumit@gmail.com]
   [15,Ram,ram@gmail.com]
   [19,punit,punit@gmail.com]
Q4 program to accept dayname with two temprature. Print day with average temperature.
   [Monday, 35.6, 39.8]
   [Tuesday, 33.6, 39.7]
   [Wednesday, 35.6, 37.1]
   [Thursday, 37.6, 39.0]
   [Friday, 38.0, 39.8]
Q5 program to store student details with marks. Print student details with maximum mark
   [11,Ramesh,10.0,9,0]
   [13,sumit,8.5,9.5]
   [15,Ram,7.5,8,6]
   [19,punit,6.5,7.8]
Q6 program to accept two int numbers and find sum using pointers.
Q7 program to accept capital char value and print in small case using pointer. 
Q8 program to accept three float numbers and find average using pointer
Q9 program to accept two characters. Swap using pointer
Q10 program to accept two int number. Find greatest number using pointer.

 pointer
---------------------------
Array itself pointer. Array name stores address.

example
-----------
main()
{
   int num[5]={11,22,33,44,55};
   printf("%d ", num);    //prints starting address or base address
   printf("%d ", *num);   //print first element 11
   printf("%d ", *(num+1));   //22
   printf("%d ", *num+1);    //12
}

program to print array element using pointer
---------------------------------------------
main()
{
    int i,num[5]={11,22,33,44,55};
    for(i=0;i<5;i++)  //0 1 2 3 4
      printf("%d ", *(num+i));
}

program to find sum of array elements using pointer.
---------------------------------------------------------
main()
{
    int i,s=0,num[5]={11,22,33,44,55};
    for(i=0;i<5;i++)  //0 1 2 3 4
       s=s+ *(num+i); 
    printf("sum =%d ",s );
}

program to find smallest element in array using pointer.
------------------------------------------------------------
main()
{
    int i,s,num[10]={5,87,20,11,22,33,44,55,12,9};
    s=num[0];
    for(i=0;i<10;i++)  
       if(*(num+i)<s)
         s= *(num+i); 
    printf("smallest element =%d ",s );
}

print string using pointer
----------------------------
   main()
   {
     char str[20]="Welcome";
     printf("%c", *str);    
   }

print string using loop
--------------------------------
   main()
   {
     int i;
     char str[50]="This is C programming";
      for(i=0;*(str+i);i++)
        printf("%c\n", *(str+i));    
   }


program to print array using pointer variable
----------------------------------------------
main()
{
    int i,*p,num[10]={5,87,20,11,22,33,44,55,12,9};
    p=num;
    for(i=0;i<10;i++)  
        printf("%d ",*(p+i));
}

function and pointer
-------------------------
pointer varaible is used as function parameter.
It is also called pass by address or call by address[parameter passing techniques].
function call statement is used to pass address of actual argument.
Actual arguement:Argument is used in function call .

Example
----------
 program to pass pointer in function.

#include<stdio.h>
void show( int *);
main()
{
     int n=5;
      show(&n);
}
void show(int *p)
{
    printf("value of n=%d", *p);
}

--------------------------------------
program to update value in function definition and print updated result in main
----------------------------------------------
#include<stdio.h>
void show( int *);
main()
{
     int n=5;
      show(&n);    //call by address
     printf("value of n in main %d",n);
}
void show(int *p)
{
    *p= *p + 10;
    printf("value of n=%d", *p);
}
program to show execution of pass by value or call by value
-------------------------------------------
#include<stdio.h>
void show( int);
main()
{
     int n=5;
      show(n);    //call by value
     printf("value of n in main %d",n);
}
void show(int n)
{
    n= n + 10;
    printf("value of n=%d", n);
}

program to swap two numbers using call by address.
---------------------------------------------------
#include<stdio.h>
void swap(int *,int *);
main()
{
    int n1,n2;
    printf("Enter value of n1 and n2");
    scanf("%d%d", &n1,&n2);  //10 20
    swap(&n1,&n2);   //call by address
    printf("After swap n1=%d n2=%d", n1,n2);
}
void swap(int *p1,int *p2)
{
     *p1= (*p1 + *p2)-(*p2 = *p1);
}           

access structure variable using pointer
------------------------------------------
pointer variable is used to point structure variable.
Structure member is accesed using arrow (->) sign.
#include<stdio.h>
struct stud
{
   int roll;
   char name[20];
};
main()
{
    struct stud *p,s1={11,"Ramesh"};
    p=&s1;
    printf("\nRoll %d", s1.roll);
    printf("\nRoll %d", p->roll);
    printf("\nName %s", p->name);
}

pass pointer type structure in function
-----------------------------------------
#include<stdio.h>
struct stud
{
   int roll;
   char name[20];
};
void show(struct stud *);  //function prototype
main()
{
    struct stud s1={11,"Ramesh"};
    show(&s1);                   //function call by address
}
void show(struct stud *p)    //function definition
{
    printf("\nRoll %d", p->roll);
    printf("\nName %s", p->name);
}
---------------------------------------
program to find sum of two time[hr and min]
---------------------------------------------
   work time in first half: 3 hr 50 min
   Work time in second half: 2 hr 45 min
   Total work time: 6 hr 35 min   
Time data type is designed using structure.
#include<stdio.h>
struct time
{
   int hr;
   int min;
};
main()
{
    struct time t1,t2,tot;
    printf("Work time in first half[hr min]:");
    scanf("%d%d", &t1.hr,&t1.min); //3 50
    printf("Work time in Second half[hr min]:");
    scanf("%d%d", &t2.hr,&t2.min); //2 45
    tot.hr= t1.hr+t2.hr+ (t1.min+t2.min)/60;
    tot.min= (t1.min +t2.min)%60;
    printf("Total work time:%d hr %d min",tot.hr,tot.min);  
}

t1.hr=3
t1.min=50
t2.hr=2
t2.min=45
tot.hr =  3 + 2+ (50+45)/60= 6
tot.min= (50+45)%60 =35

---------------------------------------------------------
Addition of two time slots using pointer
---------------------------------------------------------
#include<stdio.h>
struct time
{
   int hr;
   int min;
};
void sumtime(struct time *,struct time *,struct time *);
main()
{
    struct time t1,t2,tot;
    printf("Work time in first slot[hr min]:");
    scanf("%d%d", &t1.hr,&t1.min); //3 50
    printf("Work time in Second slot[hr min]:");
    scanf("%d%d", &t2.hr,&t2.min); //2 45
    sumtime(&t1, &t2, &tot);   //call by address
    printf("Total work time in slot:%d hr %d min",tot.hr,tot.min);  
}
void sumtime(struct time *p1, struct time *p2,struct time *p3)
{
    p3->hr= p1->hr+p2->hr+ (p1->min+p2->min)/60;
    p3->min= (p1->min +p2->min)%60;
}


pointer to pointer variable
-------------------------------
it is also type of pointer variable.
It is denoted by more than one * with variable.
It keeps address of other pointer variable.
It is also called chain pointer.
  datatype **variable;
  datatype ***variable;
  datatype **variable;
example
-----------
main()
{
   int n=10;
   int *p1= &n;
   int **p2=&p1;
   int ***p3=&p2;
   int **p4=&p3;
   printf("%d", **p4);  //10
}
 
pointer arithmetic
----------------------
main()
{
   int n=10;
   int *p1= &n;
   int **p2=&p1;
   int ***p3=&p2;
   int **p4=&p3;
    **p4 +=20;
    *p1= *p1 * 10;
   **p2= **p2 - 50;
   printf("%d", n);  
}
 
n=10 30 300  250

 Dynamic Memory Allocation
----------------------------------
Memory allocation during run time.
Memory allocation is possible with pointer variable. pointer stores memory address.
DMA returns memory address.

Predefined function is used to allocate memory space.

1) malloc()
2) calloc()
3) realloc()
4) free()

1) malloc()
It is predefined function to allocate space for pointer variable.
It returns void type of address. It means allocate space for all types of pointer.
Cast operator is used to convert address to particular type.
In case of malloc(), allocated variable contains garbage value
malloc() function always pass single argument.
It allocates memory in bunch.
syntax
--------------
   pointervar=(cast)malloc(size);

  int *p;
  //allocate space for 1 integer
  p=(int *)malloc(1*sizeof(int));

  char *p;
  //allocate space for 2 character
  p=(char *)malloc(2);
  or
  p=(char *)malloc(2*sizeof(char));
example: program to print default value of allocated pointer
#include<stdio.h>
main()
{
    int *p;
    p=(int *)malloc(sizeof(int));
    printf("Default value %d", *p);
}


example: program to allocate space for 1 integer
----------
#include<stdio.h>
main()
{
    int *p;
    p=(int *)malloc(sizeof(int));
    printf("Enter a  integer value:");
    scanf("%d", p);
    printf("You have entered %d", *p);
}

program to allocate space for 2 integer 
------------------------------------------
#include<stdio.h>
main()
{
  int *p;
  p=(int *)malloc(2*sizeof(int));
  printf("Enter first  integer value:");
  scanf("%d", p);
  printf("Enter second  integer value:");
  scanf("%d", p+1);
   printf("You have entered first %d", *p);
  printf("\nYou have entered second%d", *(p+1));
}

program to allocate space for five integer
----------------------------------------------
#include<stdio.h>
main()
{
  int *p,i;
  p=(int *)malloc(5*sizeof(int));
  for(i=0;i<5;i++)
  { 
    printf("Enter element %d:",i+1);
    scanf("%d", p+i);
  }
  printf("Entered  value:\n");
  for(i=0;i<5;i++)
  { 
    printf("  %d:",*(p+i));
  }
}

program to allocate space for 5 characters.
--------------------------------------------
#include<stdio.h>
main()
{
  char *p;
  int i;
  p=(char *)malloc(5*sizeof(char));
  for(i=0;i<5;i++)
  { 
    printf("Enter vowel %d:",i+1);
    fflush(stdin);
    scanf("%c", p+i);
  }
  printf("Entered  vowels:\n");
  for(i=0;i<5;i++)
  { 
    printf("  %c:",*(p+i));
  }
}
--------------------------------------------------
int num[10];   //static allocation,store maximum 10 integer value
int *num;      //allocate memory space dynamically for unlimited value

program to allocate space according to user input
--------------------------------------------------
#include<stdio.h>
main()
{
    int n,*arr,i;
    printf("Number of elements to be store:");
    scanf("%d", &n);
    arr=(int *)malloc(n*sizeof(int));
    printf("Enter %d elements:",n);
    for(i=0;i<n;i++)
      scanf("%d", arr+i);
   printf("Entered element\n");
    for(i=0;i<n;i++)
     printf("%d ", *(arr+i));
}

allocate memory space for pointer type structure
--------------------------------------------------
#include<stdio.h>
struct stud
{
   int roll;
   char name[30];
};
main()
{
    struct stud *p;
    p=(struct stud *)malloc(sizeof(struct stud));  
    printf("Enter roll and name:");
    scanf("%d%s", &p->roll, p->name);
    printf("Roll=%d", p->roll);
    printf(" Name=%s", p->name);
}

program to store roll and name of two students
-------------------------------------------------
#include<stdio.h>
struct stud
{
   int roll;
   char name[30];
};
main()
{
    struct stud *p;
    p=(struct stud *)malloc(2*sizeof(struct stud));  
    printf("Enter roll and name of first:");
    scanf("%d%s", &p->roll, p->name);
    printf("Enter roll and name of second:");
    scanf("%d%s", &(p+1)->roll, (p+1)->name);
    printf("Roll=%d", p->roll);
    printf(" Name=%s", p->name);
       printf("Roll=%d", (p+1)->roll);
    printf(" Name=%s", (p+1)->name);
}

calloc()
-----------------
It is also predefined function to allocate space at run time.
It allocate space in blocks.
Default value of allocated space is zero.
It allocate cleaned space.
It is always pass two argument. first number of blocks, second size of the block.
It works with pointer variable.
    
     syntax
  pointervar=(cast)calloc(numberofblocks,size of the blocks);

example
    allocate space for 1 integer
   
    int *p;
    p=(int *) calloc( 1 , sizeof(int));
example: program to print default value of allocated pointer
#include<stdio.h>
main()
{
    int *p;
   p=(int *) calloc( 1 , sizeof(int));
   printf("Default value=%d", *p);    
}

program to store value in allocated space
-------------------------------------------
#include<stdio.h>
main()
{
   int *p;
   p=(int *) calloc( 1 , sizeof(int));
   printf("Enter integer value::");
   scanf("%d", p);
   printf(" value=%d", *p);    
}


realloc()
------------------
It is used to resize allocated space.
it works with pointer.

syntax
-----------
   pointervar=realloc(pointervariable,newsize);

example
---------
#include<stdio.h>
main()
{
   char *p;
   p=(char *) calloc( 8 , sizeof(char));
    strcpy(p,"trident");
    printf(" value=%s", p);
   p=realloc(p, 15);
   strcpy(p,"trident.com");
   printf("\nnew value=%s",p);
}

free()
--------------------
It is used to free allocated space.
It is always pass name of allocated pointer.

#include<stdio.h>
main()
{
   int *p;
   p=(int *) calloc( 1 , sizeof(int));
   printf("Enter integer value::");
   scanf("%d", p);
   printf(" value=%d", *p); 
    free(p);   
}

 DS&C Homework[26Aug2021]
---------------------------------
Q1 program to sort following list using pointer[bubble sort]
   [78,10,89,50,90,16,11,6,5,17]
Q2 program to sort following list using pointer[selection sort]
   [78,10,89,50,90,16,11,6,5,17]
Q3 program to sort following list using pointer[insertion sort]
   [78,10,89,50,90,16,11,6,5,17]
Q4 program to search an element using pointer[linear search]
   [78,10,89,50,90,16,11,6,5,17]

Q5 program to print following using structure type pointer
   [1,ramesh,CSE, ramesh@gmail.com]  
Q6 Program to find sum of two distance
     10Km 700m + 8 Km 800m
Q7 program to add two time slots
    10hr 50min 22sec + 7hr 30min 45 sec
Q8 program to add following
    5 yr 10months + 6 yr 6months
Q9 program to create pointer array for 8 float numbers.
Q10 program to accept 10 integer element in pointer array. find biggest and smallest element.

 selection sort using pointer
------------------------------
#include<stdio.h>
main()
{
    int num[10],i,j,s,*p;
     printf("Enter 10 elements:");
     for(i=0;i<10;i++)
       scanf("%d", &num[i]);
      p=num;
     for(i=0;i<10;i++)
     {
         s=i;
         for(j=i;j<10;j++)
         {
             if(* (p+j)<* (p+s))
                s=j;
         }
         * (p+i)=(* (p+i)+ * (p+s))-(* (p+s)=* (p+i));
     }
     for(i=0;i<10;i++)
       printf("%d ", * (p+i));
}


Linked List
-------------
It is dyanmic data structure.
It stores data in node.
Memory allocation at run time.
Static allocation problem is solved using linked list.
Memory westage problem is solved using linked list.
Shifting is not required incase of insertion and deletion.
Node is created using self referential structure.

  int roll[100];     //allocates space for array is 400bytes: static allocation

Node is divided into two parts 
1 information: keep data
2 next pointer: keep address of next node

start is pointer. It keeps address of starting node.
Incase of empty linked list, null value in start.

self referential structure
---------------------------
Structure declaration is used same type of pointer variable in definition.
It means same type of pointer variable is used in structure declaration
struct node
{
   int info;
   struct node * next;
};

Linked List
==================
struct node
{
   int info;
   struct node * next;
};

Structure member is accessed using pointer type structure
----------------------------------------------------------
Arrow is used to access structure member using pointer type structure.
Arrow is combination of - and > symbol.
example
#include<stdio.h>
struct stud
{
   int roll;
   char name[20];
};
int main()
{
   struct stud * p,s={11,"Ramesh"};
   p=&s;
   printf("Roll=%d", p->roll);
   printf("\nName=%s",p->name);
  return 0;
}

dynamically allocate memory space for structure pointer
---------------------------------------------------------
#include<stdio.h>
struct stud
{
   int roll;
   char name[20];
};
int main()
{
   struct stud * p;
   p=(struct stud* )malloc(sizeof(struct stud));
   printf("Enter roll and name:");
   scanf("%d%s", &p->roll, p->name);
   printf("Roll=%d", p->roll);
   printf("\nName=%s",p->name);
  return 0;
}


create linked list with two information[11,22]
---------------------------------------------------
#include<stdio.h>
struct node
{
   int info;
   struct node * next;
};
int main()
{
      struct node * start,* node;
      node=(struct node*)malloc(sizeof(node));
      start=node;
      printf("Enter first value:");
      scanf("%d", &node->info);
      node->next=(struct node*)malloc(sizeof(node));
      node=node->next;
      printf("Enter second value:");
      scanf("%d",&node->info);
      node->next=NULL;
      printf("Entered Value\n");
       node=start;
       printf("%d ",node->info);
      node=node->next;
       printf("%d ",node->info);
    return 0;      
}

program to create linked list with 4 information[11,22,33,44]
#include<stdio.h>
struct node
{
   int info;
   struct node * next;
};
int main()
{
      struct node * start,* node;
      node=(struct node*)malloc(sizeof(node));
      start=node;
      printf("Enter first value:");
      scanf("%d", &node->info);
      node->next=(struct node* )malloc(sizeof(node));
      node=node->next;
      printf("Enter second value:");
      scanf("%d",&node->info);
      node->next=(struct node* )malloc(sizeof(node));
      node=node->next;
      printf("Enter third value:");
      scanf("%d",&node->info);
      node->next=(struct node* )malloc(sizeof(node));
      node=node->next;
      printf("Enter forth value:");
      scanf("%d",&node->info);
      node->next=NULL;
      printf("Entered Value\n");
       node=start;
      while(node!=NULL)
      {
        printf("%d ",node->info);
        node=node->next;
      } 
    return 0;      
}
 
program to store in linked list
start[1000]=>1000[Ram,10,2000]=>2000[Ramesh,11,NULL]

#include<stdio.h>
struct node
{
   char name[20];
   int roll;
   struct node * next;
};
int main()
{
      struct node * start,* node;
      node=(struct node* )malloc(sizeof(node));
      start=node;
      printf("Enter name and roll for first:");
      scanf("%s", node->name);
      scanf("%d", &node->roll);
      node->next=(struct node* )malloc(sizeof(node));
      node=node->next;
      printf("Enter name and roll for second :");
      scanf("%s", node->name);
      scanf("%d", &node->roll);
      node->next=NULL;
      node=start;
      while(node!=NULL)
      {
        printf("%s ",node->name);
        printf("%d \n",node->roll); 
        node=node->next;
      } 
  return 0;
}

linked list example
--------------------------
#include<stdio.h>
#include<stdlib.h>
struct inum
{
  int info;
  struct inum * next;
};
int main()
{
   struct inum * node,* start; char ch='y';
   node=(struct inum* )malloc(sizeof(struct inum));
   start=node;
   while(1)
   {
     printf("Enter value for Linked list:");
     scanf("%d",&node->info);
     printf("Do you want to insert more [y/n]:");
     fflush(stdin);
     scanf("%c",&ch);
     if(ch!='y')
        break;
     node->next=(struct inum* )malloc(sizeof(struct inum));
      node=node->next;
   }
     node->next=NULL;
      node=start;
      while(node!=NULL)
        {
           printf("%d ", node->info );
           node=node->next;
        }
   return 0;
}

program to accept name and roll in linked list
---------------------------------------------------
#include<stdio.h>
#include<stdlib.h>
struct inum
{
  char name[20];
  int roll;
  struct inum * next;
};
int main()
{
   struct inum * node,* start; char ch='y';
   node=(struct inum* )malloc(sizeof(struct inum));
   start=node;
   while(1)
   {
     printf("Enter name and roll:");
     scanf("%s",node->name);
     scanf("%d",&node->roll);
     printf("Do you want to insert another record [y/n]:");
     fflush(stdin);
     scanf("%c",&ch);
     if(ch!='y')
        break;
     node->next=(struct inum* )malloc(sizeof(struct inum));
      node=node->next;
   }
     node->next=NULL;
      node=start;
      while(node!=NULL)
        {
           printf("%s ", node->name);
           printf("%d \n", node->roll );
           node=node->next;
        }
   return 0;
}

 DS&C Homework[28Aug2021]
-----------------------------------------
Q1 program to store following in linked list and print
   32.5, 89.4 , 50.3 12.2
Q2 program to store following in linked list and print
   [Sumit cse 11]=>[Ramesh IT 23]=>[Mohit Mech 24]
Q3 program to arrange following data in descending order using pointer[selection sort]
    55,22,66, 98,100,10
Q4 program to arrage following data in descending order using pointer[insertion sort]
    3.5, 8.6,2.5,1.1,2.8
Q5 program to print even index element using pointer.
    11,33,44,55,77,99
Q6 program to print first half of elements using pointer
    10 ,20,30, 40,50,60, 70,88
Q7 program to print second half of elements using pointer
     n o p e x r q z 
Q8 program to print string in capital letters using pointer
    welcome student
Q9 program to print string in revrse form using pointer
    this is c programming
Q10 program to count letters and print separate line using pointer
    welcome student

 Single Linked List
----------------------------------
Node contains single pointer to point upcoming node.
Node is created using self referential structure.
Traversal is possible in forward direction.
In single linked list backward traversal is not possible.

struct node
{
    int info;            //keep data
    struct node * next;  //point upcoming node-pointer
};

Operations in single linked list
------------------------------------
1) creation => create linked list
2) Insertion => Insert node[first, last and any position]
3) Deletion => Delete node[first,last and any position]
4) Traversal => print contents of list


creation of node
---------------------
#include<stdio.h>
#include<stdlib.h>
struct inum
{
  int info;
  struct inum * next;
}*start;

void menu()
{
     int ch;
     printf("Linked List Operations\n");
     printf("     1  Insert at First\n");
     printf("     2  Traverse\n");
     printf("     3 Insert at Last\n");
     printf("     4 Insert at particular position\n");
     printf("Enter Your choice:");
     scanf("%d", &ch);
     if(ch==1)
       insfirst();
     else if(ch==2)
      traverse();
     else if(ch==3)
      inslast();
     else if(ch==4)
      inspart();
}
void creation()
{
   struct inum * node; char ch='y';
   node=(struct inum* )malloc(sizeof(struct inum));
   start=node;
   while(1)
   {
     printf("Enter value for Linked list:");
     scanf("%d",&node->info);
     printf("Do you want to insert more [y/n]:");
     fflush(stdin);
     scanf("%c",&ch);
     if(ch!='y')
        break;
     node->next=(struct inum* )malloc(sizeof(struct inum));
      node=node->next;
   }
     node->next=NULL;
   menu();
}
void insfirst()
{
      struct inum *n;
       n=(struct inum *)malloc(sizeof(struct inum));
       printf("Enter value to insert in begininng:");
       scanf("%d", &n->info);
      n->next=start;
      start=n;
}
void inslast()
{
  struct inum *newnode,*n;
    n=start;
    newnode=(struct inum*)mallloc(sizeof(struct inum));
    printf("Enter value to insert at last :");
    scanf("%d", &newnode->info);
        while(n->next!=NULL)
        n=n->next;
    n->next=newnode;
    newnode->next=NULL;
    menu();
}
void inspart()
{
    struct inum *newnode,*n,*prev;
    int pele;
    n=start;
    newnode=(struct inum*)malloc(sizeof(struct inum));
    printf("Enter particular element:");
    scanf("%d", &pele);
    printf("Enter value to insert at particular :");
    scanf("%d", &newnode->info);
    while(n!=NULL&&n->info!=pele)
    {
        prev=n;
        n=n->next;
    }
    newnode->next=prev->next;
    prev->next=newnode;
    menu();
}
void traverse()
{
     struct inum *n;
      n=start;
      while(n!=NULL)
        {
           printf("%d ", n->info );
           n=n->next;
        }
    menu();
}
int main()
{
   creation(); 
   return 0;
}

 Algorithm for Insert at first position
---------------------------------------
  ins_beg(start, idata)
 [strat: keep address of first node,idata:inserting value]
step1: node =create a new node
step2: if(node=null)
       Display" out of memory space" and exit
step3: info[node]=idata
step4: next[node]=start
step5: start=node
step6: return

Algorithm for Insert at last position
---------------------------------------
  ins_last(start,idata)
  [start: keep address of first node,idata:inserting data]
step1: node=create a new node
step2: if(node=null)
       Display" out of memory space" and exit
step3: info[node]=idata
step4: next[node]=NULL
step5: set ptr=start
step6: Repeat step 7 and 8 while ptr not equal to NULL
step7  set last=ptr
step8  set ptr=next[ptr]
step9  set next[last]=node;
step10 return

node=5000
 start		11	22	33
  1000		1000	2000	3000
ptr=1000=>2000=>3000=>NULL
last=1000/2000/3000

Algorithm to insert node after specific node
--------------------------------------------
    ins_spec(start,idata,spec)
 [start: address of firstnode,idata:inserting data,spec: specific value]
step1: node=create a new node
step2: if(node=null)
       Display" out of memory space" and exit
step3: info[node]=idata
step4: next[node]=NULL
step5: set ptr=start
step6: Repeat step 7 while ptr not equal to NULL & info[ptr] not equal to spec
step7: ptr= next[ptr]
step8: if ptr==NULL
       Display "Element is not found" and exit
step9: set next[node]=next[ptr]
step10: set next[ptr]=node
step11: return


    node=8000=>4000     spec=33   idata=99
start	11	22	33	33	44	55
1000	1000	2000	3000  	8000	4000	5000

ptr=1000/2000/3000      

Deletion operation in Single Linked list
--------------------------------------------
Delete node from the list.
Check list is empty or not.

Algorithm for deletion of first node
-------------------------------
   Del_first(start)
step1: ptr=start
step2: if(ptr==NULL)
       -Display"Underflow condition" and exit
step3: set start=next[ptr]
step4: set next[ptr]=NULL
step5: free space associated with ptr
step6: return

start	11	22	33	33	44	55
2000	1000	2000	3000  	8000	4000	5000

Algorithm to delete last node
-----------------------------------
    Del_last(start)
step1: ptr=start
step2: if(ptr==NULL)
       -Display"Underflow condition" and exit
step3: Repeat step 4 and 5 while next[ptr]!=NULL
step4: set last=ptr
step5: set ptr=next[ptr]
step6: set next[last]=NULL
step7: free space associated with ptr
step8: Return

start	11	22	33	33	44	55
1000	1000	2000	3000  	8000	4000	5000

ptr=1000/2000/3000/8000/4000/5000
last=1000/2000/3000/8000/4000

Algorithm to delete after searching element
-----------------------------------------------
    Del_after(start,spec)
step1: ptr=start
step2: if(ptr==NULL)
       -Display"Underflow condition" and exit
step3: Repeat step 4 while ptr not equal to NULL & info[ptr] not equal to spec
step4: ptr= next[ptr]
step5: if ptr==null
        Display"Element is not found" and exit
step6: set node=next[ptr]
step7: set next[ptr]=next[node]
step8: free space associated with node
step9: return

start	11	22	33	30	44	
1000	1000	2000	3000  	4000	5000	

ptr=1000/2000/3000    spec=33
node=4000

 #include<stdio.h>
#include<stdlib.h>
struct inum
{
  int info;
  struct inum *next;
}*start;
void createlist()
{
       struct inum *node; char ch='y';
   node=(struct inum*)malloc(sizeof(struct inum));
   start=node;
   while(1)
   {
     printf("Enter value for Linked list:");
     scanf("%d",&node->info);
     printf("Do you want to insert more [y/n]:");
     fflush(stdin);
     scanf("%c",&ch);
     if(ch!='y')
        break;
     node->next=(struct inum*)malloc(sizeof(struct inum));
      node=node->next;

   }
     node->next=NULL;
    menu();
}
void traverse()
{
    struct inum *node;
          node=start;
      while(node!=NULL)
        {
           printf("%d ", node->info );
           node=node->next;
        }
        menu();
}
void menu()
{
     int ch;
     printf("\nLinked List Operations\n");
     printf("     1  Delete First\n");
     printf("     2  Delete  last\n");
     printf("     3  Delete after particular position\n");
     printf("     4  Traverse\n");
     printf("Enter Your choice:");
     scanf("%d", &ch);
     if(ch==1)
       delfirst();
      if(ch==2)
       dellast();
      if(ch==3)
       delpart();
     else if(ch==4)
      traverse();
}
void delfirst()
{
     struct inum *n=start;
     start=n->next;
     printf("Deleted element=%d", n->info);
     n->next=NULL;
    menu();
}
void dellast()
{
   struct inum *n=start,*last;
   while(n->next!=NULL)
   {
       last=n;
       n=n->next;
   }
   printf("\nDeleted node=%d",n->info);
   last->next=NULL;
    menu();
}
void delpart()
{

}
int main()
{
    createlist();
    return 0;
}

 DS&C Homework[2Sept2021]
-----------------------------------
Q1 program to design single linked list for student data[name,branch,city]
    1 Insert at first
    2 Insert at end
    3 view
    4 count
    5 exit
Q2 program to design linked list for student Marks data[roll,name,mark1,mark2]
    1 Insert at end
    2 view
    3 view with average marks
    4 exit
[7:33 pm, 04/09/2021] Rahul Sir Tat: #include<stdio.h>
#include<stdlib.h>
struct inum
{
  int roll;
  char name[20];
  struct inum * next;
}*start;

void menu()
{
     int ch;
     printf("Linked List Operations\n");
     printf("     1  Insert at First\n");
     printf("     2  Traverse\n");
     printf("     3 Insert at Last\n");
     printf("     4 Insert at particular position\n");
     printf("     5 Count\n");
     printf("     6 Exit\n");
     printf("Enter Your choice:");
     scanf("%d", &ch);
     if(ch==1)
       insfirst();
     else if(ch==2)
      traverse();
     else if(ch==3)
      inslast();
     else if(ch==4)
      inspart();
      else if(ch==5)
        countnode();
      else
        exit(0);
}
void creation()
{
   struct inum * node; char ch='y';
   node=(struct inum* )malloc(sizeof(struct inum));
   start=node;
   while(1)
   {
     printf("Enter roll and name for Linked list:");
     scanf("%d",&node->roll);
     scanf("%s", node->name);
     printf("Do you want to insert more [y/n]:");
     fflush(stdin);
     scanf("%c",&ch);
     if(ch!='y')
        break;
     node->next=(struct inum* )malloc(sizeof(struct inum));
      node=node->next;
   }
     node->next=NULL;
   menu();
}
void insfirst()
{
      struct inum *n;
      n=(struct inum *)malloc(sizeof(struct inum));
      printf("Enter roll and name to insert in begininng:");
      scanf("%d", &n->roll);
      scanf("%s", n->name);
      n->next=start;
      start=n;
      menu();
}
void inslast()
{
    struct inum *newnode,*n;
    n=start;
    newnode=(struct inum*)malloc(sizeof(struct inum));
    printf("Enter roll and name to insert at last :");
    scanf("%d", &newnode->roll);
    scanf("%s", newnode->name);
        while(n->next!=NULL)
        n=n->next;
    n->next=newnode;
    newnode->next=NULL;
    menu();
}
void inspart()
{
    struct inum *newnode,*n,*prev;
    int pele;
    n=start;
    newnode=(struct inum*)malloc(sizeof(struct inum));
    printf("Enter particular roll element:");
    scanf("%d", &pele);
    printf("Enter roll and name to insert at particular :");
    scanf("%d", &newnode->roll);
    scanf("%s", newnode->name);
    while(n!=NULL&&n->roll!=pele)
    {
        prev=n;
        n=n->next;
    }
    newnode->next=prev->next;
    prev->next=newnode;
    menu();
}
void traverse()
{
     struct inum *n;
      n=start;
      while(n!=NULL)
        {
           printf("%d  %s\n", n->roll, n->name );
           n=n->next;
        }
   menu();
}
void countnode()
{
     int c=0;
    struct inum *n;
      n=start;
      while(n!=NULL)
        {
            c++;
           n=n->next;
        }
        printf("Total number of nodes:%d\n",c);
   menu();

}
int main()
{
  creation();
   return 0;
}

 Double Linked List
----------------------------------------
It is dynamic datastructure.
Node is used to store data in list.
Every node is connected using two links.
Node is divided into three parts[prev,info,next]
prev= It is type of pointer which keeps address of previous node.
info= It stores data.
next= It is type of pointer which keeps address of next node.
In case of first node, prev pointer keeps null value.
In case of last node, next pointer keeps null value.
It is also called two way list. It means traversal is possible in both direction[forward and backward traversal].
Self referential structure is used to design node.
Node structure in double linked list.
struct dlink
{
   struct dlink *prev;
    int info;
  struct dlink *next;
};

Double linked list operations
-------------------------------------
1) Traversal
    -forward traversal
    -backward traversal
2) Insertion
      -At first position
      -At last position
      -At specific position
3) Deletion
     - first node
     - last node
     - specific node

Creation of double linked list
---------------------------------

#include<stdio.h>
struct dlink
{
  struct dlink *prev;
  int info;
  struct dlink *next;
}*start;
int main()
{
    struct dlink *node, *last; char ch='y';
   node=(struct dlink*)malloc(sizeof(struct dlink));
   start=node;
   node->prev=NULL;
   while(1)
   {
     printf("Enter value for node:");
     scanf("%d",&node->info);
     printf("Do you want to insert more [y/n]:");
     fflush(stdin);
     scanf("%c",&ch);
     if(ch!='y')
        break;
     node->next=(struct dlink*)malloc(sizeof(struct dlink));
      (node->next)->prev=node;
      node=node->next;
   }
     node->next=NULL;
     node=start;
     printf("\nForward Traversal\n\n");
      while(node!=NULL)
        {
            last=node;
            printf("%u<-%d[%u]->%u   ",node->prev, node->info,node,node->next);
           node=node->next;
        }
    printf("\nBackward Traversal\n\n");
     while(last!=NULL)
      {
          printf("  %d ",last->info);
          last=last->prev;
      }
   return 0;
}

 DS Homework[6Sept2021]
--------------------------------
Q1 create double linked list for following data
    10.5,3.5,6.7,9.8
Q2 program for menu based program to create, forward and backward traversal
Q3 program to create double linked list for [10, Ramesh]

 Double linked list
=====================================
1 Creation
2 forward traversal
3 backward traversal
4 Insertion 
    -first position
    -last position
    -specific position
5 Deletion
    -deletion of first node
    -deletion of last node
    -deletion of specific node
Insertion operation
-------------------------
 Insertion of a node in existing double linked list.


#include<stdio.h>
#include<stdlib.h>
struct dlink
{
  struct dlink *prev;
  int info;
  struct dlink *next;
}*start;
void creation();
void menu();
void ftraversal();
void btraversal();
void insfirst();
void inslast();
void insspec();
int main()
{
    creation();
   return 0;
}

void menu()
{
 int ch;
     printf("\nDouble Linked List Operations\n");
     printf("     1  Insert at First\n");
     printf("     2  Forward Traversal\n");
     printf("     3 Backward Traversal\n");
     printf("     4 Insert at Last\n");
     printf("     5 Insert at particular position\n");
     printf("     6 Exit\n");
     printf("Enter Your choice:");
     scanf("%d", &ch);
     if(ch==1)
       insfirst();
     else if(ch==2)
      ftraverse();
     else if(ch==3)
      btraverse();
     else if(ch==4)
      inslast();
      else if(ch==5)
        insspec();
      else
        exit(0);
}
void creation()
{
    struct dlink *node, *last; char ch='y';
   node=(struct dlink*)malloc(sizeof(struct dlink));
   start=node;
   node->prev=NULL;
   while(1)
   {
     printf("Enter value for node:");
     scanf("%d",&node->info);
     printf("Do you want to insert more [y/n]:");
     fflush(stdin);
     scanf("%c",&ch);
     if(ch!='y')
        break;
     node->next=(struct dlink*)malloc(sizeof(struct dlink));
      (node->next)->prev=node;
      node=node->next;
   }
     node->next=NULL;
  menu();
}
void ftraverse()
{
    struct dlink *node;
     node=start;
     printf("\nForward Traversal\n\n");
      while(node!=NULL)
        {

            printf("%d   ", node->info);
           node=node->next;
        }
   menu();
}
void btraverse()
{
  struct dlink *last,*node=start;
    while(node!=NULL)
    {
        last=node;
        node=node->next;
    }
   printf("\nBackward Traversal\n\n");

     while(last!=NULL)
      {
          printf("  %d ",last->info);
          last=last->prev;
      }

    menu();
}
void insfirst()
{
     struct dlink *newnode,*n;
      n=start;
      newnode=(struct dlink *)malloc(sizeof(struct dlink));
      printf("Enter inserting value for first:");
      scanf("%d", &newnode->info);
      newnode->prev=n->prev;
      newnode->next=n;
      n->prev=newnode;
      start=newnode;
      menu();
}
void inslast()
{
     struct dlink *newnode, *n,*last;
     n=start;
      newnode=(struct dlink *)malloc(sizeof(struct dlink));
      printf("Enter inserting value for last:");
      scanf("%d", &newnode->info);
      while(n!=NULL)
      {
          last=n;
          n=n->next;
      }
     newnode->next=last->next;
      newnode->prev=last;
      last->next=newnode;
   menu();
}
void insspec()
{

}
[8:39 pm, 09/09/2021] Rahul Sir Tat: void insspec()
{
      struct dlink *n,*newnode; int spec;
      n=start;
      newnode=(struct dlink*)malloc(sizeof(struct dlink));
      printf("Enter inserting value:");
      scanf("%d", &newnode->info);
      printf("Enter specific value:");
      scanf("%d", &spec);
      while(n!=NULL && n->info!=spec)
      {
          n=n->next;
      }
      newnode->prev=n->prev;
      newnode->next=n;
      (n->prev)->next=newnode;
      n->prev=newnode;
      menu();
}

Deletion operation in Double linked list
-------------------------------------------------------
Delete element from existing linked list.
Deletion operation
    1) Deletion of first node
    2) Deletion of last node
    3) Deletion of specific node





#include<stdio.h>
#include<stdlib.h>
struct dlink
{
  struct dlink *prev;
  int info;
  struct dlink *next;
}*start;
void creation();
void menu();
void ftraversal();
void btraversal();
void delfirst();
void dellast();
void delspec();
int main()
{
    creation();
   return 0;
}

void menu()
{
 int ch;
     printf("\nDouble Linked List Operations\n");
     printf("     1  Deletion of First\n");
     printf("     2  Forward Traversal\n");
     printf("     3 Backward Traversal\n");
     printf("     4 Deletion of Last\n");
     printf("     5 Deletion of particular element\n");
     printf("     6 Exit\n");
     printf("Enter Your choice:");
     scanf("%d", &ch);
     if(ch==1)
       delfirst();
     else if(ch==2)
      ftraverse();
     else if(ch==3)
      btraverse();
     else if(ch==4)
      dellast();
      else if(ch==5)
        delspec();
      else
        exit(0);
}
void creation()
{
    struct dlink *node, *last; char ch='y';
   node=(struct dlink*)malloc(sizeof(struct dlink));
   start=node;
   node->prev=NULL;
   while(1)
   {
     printf("Enter value for node:");
     scanf("%d",&node->info);
     printf("Do you want to insert more [y/n]:");
     fflush(stdin);
     scanf("%c",&ch);
     if(ch!='y')
        break;
     node->next=(struct dlink*)malloc(sizeof(struct dlink));
      (node->next)->prev=node;
      node=node->next;
   }
     node->next=NULL;
  menu();
}
void ftraverse()
{
    struct dlink *node;
     node=start;
     printf("\nForward Traversal\n\n");
      while(node!=NULL)
        {

            printf("%d   ", node->info);
           node=node->next;
        }
   menu();
}
void btraverse()
{
  struct dlink *last,*node=start;
    while(node!=NULL)
    {
        last=node;
        node=node->next;
    }
   printf("\nBackward Traversal\n\n");

     while(last!=NULL)
      {
          printf("  %d ",last->info);
          last=last->prev;
      }
    menu();
}
void delfirst()
{
     struct dlink *n;
      n=start;
       printf("\nDeleted Element=%d\n",n->info);
      (n->next)->prev=NULL;
      start=n->next;
      n->next=NULL;
      menu();
}
void dellast()
{
     struct dlink  *n,*last;
      n=start;
      while(n!=NULL)
      {
          last=n;
          n=n->next;
      }
      printf("\nDeleted Element=%d",last->info);
     (last->prev)->next=NULL;
     last->prev=NULL;

   menu();
}
void delspec()
{
      struct dlink *n; int spec;
      n=start;
      printf("Enter specific value:");
      scanf("%d", &spec);
      while(n!=NULL && n->info!=spec)
      {
          n=n->next;
      }
      printf("\nDeleted Element=%d\n", n->info);
      (n->prev)->next=n->next;
      (n->next)->prev=n->prev;
       n->next=NULL;
       n->prev=NULL;
      menu();
}
 Circular Linked list
--------------------------------
It is type of linked list.
In circular linked list, next of last element keep an address of first node.
Backward traversal is not possible in circular linked list.

Operations on circular linked list
------------------------------------
1) Forward Traversal 
2) Insertion
    -first
    -last
    -particular
2) Deletion
    -first
    -last
    -particular

Creation of circular linked list
-----------------------------------
#include<stdio.h>
struct node
{
   int info;
   struct node *next;
}*start;
int main()
{
   struct node * n; char ch='y';
   n=(struct node* )malloc(sizeof(struct node));
   start=n;
   while(1)
   {
     printf("Enter value for Linked list:");
     scanf("%d",&n->info);
     printf("Do you want to insert more [y/n]:");
     fflush(stdin);
     scanf("%c",&ch);
     if(ch!='y')
        break;
     n->next=(struct node* )malloc(sizeof(struct node));
      n=n->next;
   }
    n->next=start;
    n=start;
    while(n->next!=start)
    {
        printf("%d ", n->info);
        n=n->next;
    }
    printf("%d ",n->info);
 return 0;
}

Insertion operation
---------------------------
Insert a node in existing linked list.
  1) insert at first
  2) insert at last
  3) insert at particular 

#include<stdio.h>
struct node
{
   int info;
   struct node *next;
}*start;
void insfirst();
void inslast();
void inspart();
void menu();
void creatlist();
void traverse();
int main()
{
   creatlist();
   return 0;
}
void menu()
{
     int ch;
     printf("circular Linked List Operations\n");
     printf("     1  Insert at First\n");
     printf("     2  Traverse\n");
     printf("     3 Insert at Last\n");
     printf("     4 Insert at particular position\n");
     printf("     5 Exit\n");
     printf("Enter Your choice:");
     scanf("%d", &ch);
     if(ch==1)
       insfirst();
     else if(ch==2)
      traverse();
     else if(ch==3)
      inslast();
     else if(ch==4)
      inspart();
      else if(ch==5)
        exit(0);
}
void creatlist()
{
struct node * n; char ch='y';
   n=(struct node* )malloc(sizeof(struct node));
   start=n;
   while(1)
   {
     printf("Enter value for Linked list:");
     scanf("%d",&n->info);
     printf("Do you want to insert more [y/n]:");
     fflush(stdin);
     scanf("%c",&ch);
     if(ch!='y')
        break;
     n->next=(struct node* )malloc(sizeof(struct node));
      n=n->next;
   }
    n->next=start;
  menu();
}
void insfirst()
{
    struct node *newnode,*n;
    n=start;
    newnode=(struct node* )malloc(sizeof(struct node));
    printf("Enter Inserting value:");
    scanf("%d", &newnode->info);
    newnode->next=start;
     while(n->next!=start)
     {
         n=n->next;
     }
     n->next=newnode;
     start=newnode;
  menu();
}
void inslast()
{
  menu();
}
void inspart()
{
   menu();
}
void traverse()
{
    struct node *n,*n1;
    n=start;
    n1=start;
    while(n->next!=n1)
    {
        printf("%d ", n->info);
        n=n->next;
        n1=start->next;
    }
    menu();
}
 Deletion program of circular linked list
---------------------------------------------
#include<stdio.h>
#include<stdlib.h>
struct node
{
   int info;
   struct node *next;
}*start;
void delfirst();
void dellast();
void delpart();
void menu();
void creatlist();
void traverse();
int main()
{
   creatlist();
   return 0;
}
void menu()
{
     int ch;
     printf("circular Linked List Operations\n");
     printf("     1  Deletion of  First\n");
     printf("     2  Traverse\n");
     printf("     3 Deletion of Last\n");
     printf("     4 Deletion of particular \n");
     printf("     5 Exit\n");
     printf("Enter Your choice:");
     scanf("%d", &ch);
     if(ch==1)
       delfirst();
     else if(ch==2)
      traverse();
     else if(ch==3)
      dellast();
     else if(ch==4)
      delpart();
      else if(ch==5)
        exit(0);
}
void creatlist()
{
struct node * n; char ch='y';
   n=(struct node* )malloc(sizeof(struct node));
   start=n;
   while(1)
   {
     printf("Enter value for Linked list:");
     scanf("%d",&n->info);
     printf("Do you want to insert more [y/n]:");
     fflush(stdin);
     scanf("%c",&ch);
     if(ch!='y')
        break;
     n->next=(struct node* )malloc(sizeof(struct node));
      n=n->next;
   }
    n->next=start;
  menu();
}
void delfirst()
{
    struct node *n;
    n=start;
     while(n->next!=start)
     {
         n=n->next;
     }
     n->next=start->next;
     n=start;
     start=n->next;
     n->next=NULL;

    menu();
}
void dellast()
{
    struct node *n,*last;
    n=start;
     while(n->next!=start)
     {
         last=n;
         n=n->next;
     }
     last->next=start;
     n->next=NULL;
    printf("Deleted node %d  ",n->info);
  menu();
}
void delpart()
{
   menu();
}
void traverse()
{
    struct node *n,*n1;
    n=start;
    n1=start;
    while(n->next!=n1)
    {
        printf("%d ", n->info);
        n=n->next;
        n1=start->next;
    }
    menu();
}
---------------------------------
Tree
--------------------
It is type of non-linear datastructure.
Non-linear means, not in sequence.
Tree stores data in node. Node is created using self-referential structure.
Each node have two addresses
  - address of left child
  - address of right child
Tree does not have loop and cyclic path.
Root node: First node of the tree. Tree is started from that node.
parent node: Immediate predecessor of a node is called parent node.
child node: Immediate sucessor of a node is called child node.
leaf node: A node with degree zero. It is also called terminal node.
non-terminal node: Any node whose degree is not zero.
Degree of tree: The maximum degree of nodes in given tree is called degree of tree.
Depth of tree: The depth of node is length of unique path from the root.
Degree of node: number of child 

Binary tree
---------------------
A tree is binary tree if each node of it can have at most two branches. In other word
we can say every node of a tree can have at most degree two.
 
Complete Binary tree
--------------------
A binary tree is complete binary tree if each leaf in the tree is either at last level or before
last level.
 Binary Tree creation
-----------------------------
Each node have at most 2 children
create binary tree for [11,22,10,32,17,19,21,54,12]
     
     create root     11
insert 22 -> left of 11
   
              11
             /
            22
insert 10 -> right of 11
              11
             /  \
            22  10
insert 32 -> left of 22
              11
             /  \
            22  10
           /  
          32
insert 17 -> right of 22
              11
             /   \
            22    10
           /  \ 
          32  17
insert 19 -> left of 10
              11
             /   \
            22    10
           /  \   /
          32  17 19
insert 21 -> right of 10
              11
             /   \
            22    10
           /  \   /  \
          32  17 19   21

insert 54 -> left of 32
              11
             /   \
            22    10
           /  \   /  \
          32  17 19   21
         /
        54
insert 12 -> right of 32
              11
             /   \
            22    10
           /  \   /  \
          32  17 19   21
         /  \
        54  12

Tree is store in array
-------------------------
[11,22,10,32,17,19,21,54,12]

Traversal of Tree
-----------------------
Printing contents of tree. There are three techniques.
1)Inorder traversal[LNR  left->Node->Right]
2)preorder traversal[NLR Node->left->Right]
3)postorder traversal[LRN left->right->Node]

Inorder traversal
------------------------
In this traversal, first visit left, node and right.

Inorder traversal of following tree [54,]
              11 
             /   \
            22    10 
           /  \   /  \
          32  17 19   21
         /  \
        54  12
Inorder Traversal
54,32,12,22,17,11,19,10,21

      22
    10   50
 5    7  8  19
4  3 

[4 5 3 10 7 22 8 50 19]
Preorder traversal[NLR]
------------------------
First visit node then left and right.

              11 
             /   \
            22    10 
           /  \   /  \
          32  17 19   21
         /  \
        54  12
Preorder Traversal
11,22,32,54,12,17,10,19,21

         56
     10      55
  11   19   7   5
9   15 7 14 6
Preorder traversal[56, 10,11,9,15,19,7,14,55,7,6,5]

Postorder Traversal[LRN]
--------------------------
Visit left,right then node
              11 
             /   \
            22    10 
           /  \   /  \
          32  17 19   21
         /  \
        54  12

Postorder traversal
54,12,32,17,22,19,21,10,11

          70
       10      30
    11   16   9    90
 6    8 7  8  88 33
[6,8,11,7,8,16,10,88,33,9,90,30,70]

Creation of tree
-------------------------------

#include <stdio.h>
#include <stdlib.h>
struct node {
    int data;
    struct node* left;
    struct node* right;
};
 
/* newNode() allocates a new node
with the given data and NULL left
and right pointers. */
struct node* newNode(int data)
{
    // Allocate memory for new node
    struct node* node
        = (struct node*)malloc(sizeof(struct node));
 
    // Assign data to this node
    node->data = data;
 
    // Initialize left and
    // right children as NULL
    node->left = NULL;
    node->right = NULL;
    return (node);
}
 
int main()
{
    /create root/
    struct node* root = newNode(1);
    /* following is the tree after above statement
         1
        / \
      NULL NULL
    */
 
    root->left = newNode(2);
    root->right = newNode(3);
    /* 2 and 3 become left and right children of 1
            1
         /    \
        2      3
      /  \    /  \
   NULL NULL NULL NULL
    */
 
    root->left->left = newNode(4);
    /* 4 becomes left child of 2
             1
         /    \
        2      3
      /  \    /  \
     4 NULL NULL NULL
    / \
 NULL NULL
    */
 
    getchar();
    return 0;
}
 DS&C Homework[23Sept2021]
----------------------------
Q1 construct Binary tree
a) 11,10,20,30,55,21,19,23,10
b) a c w q s d f t w g h u
c) 11 a 22 e r q 3 f l 90 n
d) D a t a s t r u c t u r e
Q2 construct Binary Search tree
a) 20 10 15 9 21 39 34 55 89 100
b) a c w q s d f t w g h u
c) Z B b c D e F y K M o P
d) 7.8 6.5 1.2 5.6 3.2 3.0
======================================================
 #include <stdio.h>
#include <stdlib.h>

struct btnode
{
    int value;
    struct btnode *l;
    struct btnode *r;
}*root = NULL, *temp = NULL, *t2, *t1;

void delete1();
void insert();
void delete();
void inorder(struct btnode *t);
void create();
void search(struct btnode *t);
void preorder(struct btnode *t);
void postorder(struct btnode *t);
void search1(struct btnode *t,int data);
int smallest(struct btnode *t);
int largest(struct btnode *t);

int flag = 1;

void main()
{
    int ch;

    printf("\nOPERATIONS ---");
    printf("\n1 - Insert an element into tree\n");
    printf("2 - Delete an element from the tree\n");
    printf("3 - Inorder Traversal\n");
    printf("4 - Preorder Traversal\n");
    printf("5 - Postorder Traversal\n");
    printf("6 - Exit\n");
    while(1)
    {
        printf("\nEnter your choice : ");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            insert();
            break;
        case 2:
            delete();
            break;
        case 3:
            inorder(root);
            break;
        case 4:
            preorder(root);
            break;
        case 5:
            postorder(root);
            break;
        case 6:
            exit(0);
        default :
            printf("Wrong choice, Please enter correct choice  ");
            break;
        }
    }
}

/* To insert a node in the tree */
void insert()
{
    create();
    if (root == NULL)
        root = temp;
    else
        search(root);
}

/* To create a node */
void create()
{
    int data;

    printf("Enter data of node to be inserted : ");
    scanf("%d", &data);
    temp = (struct btnode *)malloc(1*sizeof(struct btnode));
    temp->value = data;
    temp->l = temp->r = NULL;
}

/* Function to search the appropriate position to insert the new node */
void search(struct btnode *t)
{
    if ((temp->value > t->value) && (t->r != NULL))      /* value more than root node value insert at right */
        search(t->r);
    else if ((temp->value > t->value) && (t->r == NULL))
        t->r = temp;
    else if ((temp->value < t->value) && (t->l != NULL))    /* value less than root node value insert at left */
        search(t->l);
    else if ((temp->value < t->value) && (t->l == NULL))
        t->l = temp;
}

/* recursive function to perform inorder traversal of tree */
void inorder(struct btnode *t)
{
    if (root == NULL)
    {
        printf("No elements in a tree to display");
        return;
    }
    if (t->l != NULL)
        inorder(t->l);
    printf("%d -> ", t->value);
    if (t->r != NULL)
        inorder(t->r);
}

/* To check for the deleted node */
void delete()
{
    int data;

    if (root == NULL)
    {
        printf("No elements in a tree to delete");
        return;
    }
    printf("Enter the data to be deleted : ");
    scanf("%d", &data);
    t1 = root;
    t2 = root;
    search1(root, data);
}

/* To find the preorder traversal */
void preorder(struct btnode *t)
{
    if (root == NULL)
    {
        printf("No elements in a tree to display");
        return;
    }
    printf("%d -> ", t->value);
    if (t->l != NULL)
        preorder(t->l);
    if (t->r != NULL)
        preorder(t->r);
}

/* To find the postorder traversal */
void postorder(struct btnode *t)
{
    if (root == NULL)
    {
        printf("No elements in a tree to display ");
        return;
    }
    if (t->l != NULL)
        postorder(t->l);
    if (t->r != NULL)
        postorder(t->r);
    printf("%d -> ", t->value);
}

/* Search for the appropriate position to insert the new node */
void search1(struct btnode *t, int data)
{
    if ((data>t->value))
    {
        t1 = t;
        search1(t->r, data);
    }
    else if ((data < t->value))
    {
        t1 = t;
        search1(t->l, data);
    }
    else if ((data==t->value))
    {
        delete1(t);
    }
}

/* To delete a node */
void delete1(struct btnode *t)
{
    int k;

    /* To delete leaf node */
    if ((t->l == NULL) && (t->r == NULL))
    {
        if (t1->l == t)
        {
            t1->l = NULL;
        }
        else
        {
            t1->r = NULL;
        }
        t = NULL;
        free(t);
        return;
    }

    /* To delete node having one left hand child */
    else if ((t->r == NULL))
    {
        if (t1 == t)
        {
            root = t->l;
            t1 = root;
        }
        else if (t1->l == t)
        {
            t1->l = t->l;

        }
        else
        {
            t1->r = t->l;
        }
        t = NULL;
        free(t);
        return;
    }

    /* To delete node having right hand child */
    else if (t->l == NULL)
    {
        if (t1 == t)
        {
            root = t->r;
            t1 = root;
        }
        else if (t1->r == t)
            t1->r = t->r;
        else
            t1->l = t->r;
        t == NULL;
        free(t);
        return;
    }

    /* To delete node having two child */
    else if ((t->l != NULL) && (t->r != NULL))
    {
        t2 = root;
        if (t->r != NULL)
        {
            k = smallest(t->r);
            flag = 1;
        }
        else
        {
            k =largest(t->l);
            flag = 2;
        }
        search1(root, k);
        t->value = k;
    }

}

/* To find the smallest element in the right sub tree */
int smallest(struct btnode *t)
{
    t2 = t;
    if (t->l != NULL)
    {
        t2 = t;
        return(smallest(t->l));
    }
    else
        return (t->value);
}

/* To find the largest element in the left sub tree */
int largest(struct btnode *t)
{
    if (t->r != NULL)
    {
        t2 = t;
        return(largest(t->r));
    }
    else
        return(t->value);
}
 Expression tree
---------------------
It is type tree .
It is created with the help of traversal list.
Any expression is represent in the form of tree.
Root node contains operator.

   example
-------------------
   A + B X C   => inorder form



 A* B - C   => inorder form  [LNR]
 A B * C -  => postorder form [LRN]


               -
              /  \
             *    C
           /  \
          A    B


A + B * C > D  => inorder form [LNR]
A B C * + D >  => postorder form[LRN]

                  >
           A+B*C / \ D


          >
         / \
        +   D
       / \
      A   *
         /  \
        B    C

A * B - D < E
-----------------------
Step 1 => Find post or pre order form of expression
Step 2 => Find root node in post or preorder form[right to left direction] 
Step 3 => According to root node divide inorder list in two subtree
step 4 => construct the tree.

A * B - D < E    => inorder form [LNR]
A B * D - E <    => postorder form[LRN]

- In postorder last element is root node
- construct root node
                       <
- According to root node, inorder list is divided in to two subtree.
                       <
          A * B - D   / \    E
- construct right of root because only one element

                       <
            A * B - D / \
                         E
- Indentify root node in left subtree. Scan right to left in post order form
- Indentify - is root node in left subtree.
                       <
                     /   \
                    -     E 
         A * B     / \
                      D
-Identify * is root node in left subtree.
                      <
                     /  \
                    -    E 
                   / \
                  *   D
                /  \
               A    B
               
Tree construction using Inorder and preorder list
------------------------------------------------------
A > B * C + D  => inorder form[LNR]
> A + * B C D  => Preorder form[NLR]
-According to preorder traversal, first node is root node[left to right].
- search root node in inorder traversal

                     >
             A     /   \ B * C + D
             
-A is constructed
                   >
                 /   \ B * C + D
                A
- Find root node for right subtree. scan preorder list in left to right
                   >
                 /   \ 
                A     +
                   B*C/  \ D
- D is constructed.
                   >
                 /   \ 
                A     +
                   B*C/  \ 
                          D
- Identify * is root node
                   >
                 /   \ 
                A     +
                     /  \ 
                    *    D
                  /  \
                 B    C
 Graph
------------------------
A Graph is a non-linear data structure consisting of nodes and edges. 
The nodes are sometimes also referred to as vertices and the edges are lines or
arcs that connect any two nodes in the graph. 

Graphs are used to solve many real-life problems. Graphs are used to represent networks. 
The networks may include paths in a city or telephone network or circuit network.
Graphs are also used in social networks like linkedIn, Facebook. 
For example, in Facebook, each person is represented with a vertex(or node).
Each node is a structure and contains information like person id, name, gender, locale etc.

Graph and its representation
================================
A graph is a data structure that consists of the following two components: 
1. A finite set of vertices also called as nodes. 
2. A finite set of ordered pair of the form (u, v) called as edge. 
The pair is ordered because (u, v) is not the same as (v, u) in case of a directed graph(di-graph). 
The pair of the form (u, v) indicates that there is an edge from vertex u to vertex v.
The edges may contain weight/value/cost.

The following two are the most commonly used representations of a graph. 
1. Adjacency Matrix 
2. Adjacency List 
There are other representations also like, 
Incidence Matrix and Incidence List. 
The choice of graph representation is situation-specific. 
It totally depends on the type of operations to be performed and ease of use.
========================================================================================